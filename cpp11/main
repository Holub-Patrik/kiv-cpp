	.text
	.intel_syntax noprefix
	.file	"main.cpp"
	.globl	_Z8generatem                    # -- Begin function _Z8generatem
	.p2align	4, 0x90
	.type	_Z8generatem,@function
_Z8generatem:                           # @_Z8generatem
.Lfunc_begin0:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception0
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	r12
	.cfi_def_cfa_offset 32
	push	rbx
	.cfi_def_cfa_offset 40
	push	rax
	.cfi_def_cfa_offset 48
	.cfi_offset rbx, -40
	.cfi_offset r12, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	r14, rsi
	mov	rbx, rdi
	movzx	eax, byte ptr [rip + _ZGVZ8generatemE4rdev]
	test	al, al
	je	.LBB0_1
.LBB0_4:
	lea	rdi, [rip + _ZZ8generatemE4rdev]
	call	_ZNSt13random_device9_M_getvalEv@PLT
	mov	rax, r14
	shr	rax, 60
	jne	.LBB0_12
# %bb.5:
	test	r14, r14
	je	.LBB0_6
# %bb.7:
	lea	r15, [8*r14]
	mov	rdi, r15
	call	_Znwm@PLT
	mov	qword ptr [rbx], rax
	lea	r12, [rax + 8*r14]
	mov	qword ptr [rbx + 16], r12
	mov	qword ptr [rax], 0
	add	rax, 8
	cmp	r14, 1
	jne	.LBB0_9
# %bb.8:
	mov	r12, rax
	jmp	.LBB0_10
.LBB0_6:
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbx], xmm0
	mov	qword ptr [rbx + 16], 0
	xor	r12d, r12d
	jmp	.LBB0_10
.LBB0_9:
	add	r15, -8
	mov	rdi, rax
	xor	esi, esi
	mov	rdx, r15
	call	memset@PLT
.LBB0_10:
	mov	qword ptr [rbx + 8], r12
	mov	rax, rbx
	add	rsp, 8
	.cfi_def_cfa_offset 40
	pop	rbx
	.cfi_def_cfa_offset 32
	pop	r12
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.LBB0_1:
	.cfi_def_cfa_offset 48
	lea	rdi, [rip + _ZGVZ8generatemE4rdev]
	call	__cxa_guard_acquire@PLT
	test	eax, eax
	je	.LBB0_4
# %bb.2:
.Ltmp0:
	lea	rdi, [rip + _ZZ8generatemE4rdev]
	call	_ZNSt13random_deviceC2Ev
.Ltmp1:
# %bb.3:
	lea	rdi, [rip + _ZNSt13random_deviceD2Ev]
	lea	rsi, [rip + _ZZ8generatemE4rdev]
	lea	rdx, [rip + __dso_handle]
	call	__cxa_atexit@PLT
	lea	rdi, [rip + _ZGVZ8generatemE4rdev]
	call	__cxa_guard_release@PLT
	jmp	.LBB0_4
.LBB0_12:
	lea	rdi, [rip + .L.str.4]
	call	_ZSt20__throw_length_errorPKc@PLT
.LBB0_11:
.Ltmp2:
	mov	rbx, rax
	lea	rdi, [rip + _ZGVZ8generatemE4rdev]
	call	__cxa_guard_abort@PLT
	mov	rdi, rbx
	call	_Unwind_Resume@PLT
.Lfunc_end0:
	.size	_Z8generatem, .Lfunc_end0-_Z8generatem
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table0:
.Lexception0:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end0-.Lcst_begin0
.Lcst_begin0:
	.uleb128 .Lfunc_begin0-.Lfunc_begin0    # >> Call Site 1 <<
	.uleb128 .Ltmp0-.Lfunc_begin0           #   Call between .Lfunc_begin0 and .Ltmp0
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp0-.Lfunc_begin0           # >> Call Site 2 <<
	.uleb128 .Ltmp1-.Ltmp0                  #   Call between .Ltmp0 and .Ltmp1
	.uleb128 .Ltmp2-.Lfunc_begin0           #     jumps to .Ltmp2
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1-.Lfunc_begin0           # >> Call Site 3 <<
	.uleb128 .Lfunc_end0-.Ltmp1             #   Call between .Ltmp1 and .Lfunc_end0
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end0:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZNSt13random_deviceC2Ev,"axG",@progbits,_ZNSt13random_deviceC2Ev,comdat
	.weak	_ZNSt13random_deviceC2Ev        # -- Begin function _ZNSt13random_deviceC2Ev
	.p2align	4, 0x90
	.type	_ZNSt13random_deviceC2Ev,@function
_ZNSt13random_deviceC2Ev:               # @_ZNSt13random_deviceC2Ev
.Lfunc_begin1:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception1
# %bb.0:
	push	r14
	.cfi_def_cfa_offset 16
	push	rbx
	.cfi_def_cfa_offset 24
	sub	rsp, 40
	.cfi_def_cfa_offset 64
	.cfi_offset rbx, -24
	.cfi_offset r14, -16
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 32], rax
	lea	r14, [rsp + 16]
	mov	qword ptr [rsp], r14
	mov	dword ptr [rsp + 16], 1634100580
	mov	dword ptr [rsp + 19], 1953264993
	mov	qword ptr [rsp + 8], 7
	mov	byte ptr [rsp + 23], 0
.Ltmp3:
	mov	rsi, rsp
	call	_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@PLT
.Ltmp4:
# %bb.1:
	mov	rdi, qword ptr [rsp]
	cmp	rdi, r14
	je	.LBB1_3
# %bb.2:
	call	_ZdlPv@PLT
.LBB1_3:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 32]
	jne	.LBB1_9
# %bb.4:
	add	rsp, 40
	.cfi_def_cfa_offset 24
	pop	rbx
	.cfi_def_cfa_offset 16
	pop	r14
	.cfi_def_cfa_offset 8
	ret
.LBB1_5:
	.cfi_def_cfa_offset 64
.Ltmp5:
	mov	rbx, rax
	mov	rdi, qword ptr [rsp]
	cmp	rdi, r14
	je	.LBB1_7
# %bb.6:
	call	_ZdlPv@PLT
.LBB1_7:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 32]
	jne	.LBB1_9
# %bb.8:
	mov	rdi, rbx
	call	_Unwind_Resume@PLT
.LBB1_9:
	call	__stack_chk_fail@PLT
.Lfunc_end1:
	.size	_ZNSt13random_deviceC2Ev, .Lfunc_end1-_ZNSt13random_deviceC2Ev
	.cfi_endproc
	.section	.gcc_except_table._ZNSt13random_deviceC2Ev,"aG",@progbits,_ZNSt13random_deviceC2Ev,comdat
	.p2align	2, 0x0
GCC_except_table1:
.Lexception1:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end1-.Lcst_begin1
.Lcst_begin1:
	.uleb128 .Ltmp3-.Lfunc_begin1           # >> Call Site 1 <<
	.uleb128 .Ltmp4-.Ltmp3                  #   Call between .Ltmp3 and .Ltmp4
	.uleb128 .Ltmp5-.Lfunc_begin1           #     jumps to .Ltmp5
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp4-.Lfunc_begin1           # >> Call Site 2 <<
	.uleb128 .Lfunc_end1-.Ltmp4             #   Call between .Ltmp4 and .Lfunc_end1
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end1:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZNSt13random_deviceD2Ev,"axG",@progbits,_ZNSt13random_deviceD2Ev,comdat
	.weak	_ZNSt13random_deviceD2Ev        # -- Begin function _ZNSt13random_deviceD2Ev
	.p2align	4, 0x90
	.type	_ZNSt13random_deviceD2Ev,@function
_ZNSt13random_deviceD2Ev:               # @_ZNSt13random_deviceD2Ev
.Lfunc_begin2:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception2
# %bb.0:
	push	rax
	.cfi_def_cfa_offset 16
.Ltmp6:
	call	_ZNSt13random_device7_M_finiEv@PLT
.Ltmp7:
# %bb.1:
	pop	rax
	.cfi_def_cfa_offset 8
	ret
.LBB2_2:
	.cfi_def_cfa_offset 16
.Ltmp8:
	mov	rdi, rax
	call	__clang_call_terminate
.Lfunc_end2:
	.size	_ZNSt13random_deviceD2Ev, .Lfunc_end2-_ZNSt13random_deviceD2Ev
	.cfi_endproc
	.section	.gcc_except_table._ZNSt13random_deviceD2Ev,"aG",@progbits,_ZNSt13random_deviceD2Ev,comdat
	.p2align	2, 0x0
GCC_except_table2:
.Lexception2:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase0-.Lttbaseref0
.Lttbaseref0:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end2-.Lcst_begin2
.Lcst_begin2:
	.uleb128 .Ltmp6-.Lfunc_begin2           # >> Call Site 1 <<
	.uleb128 .Ltmp7-.Ltmp6                  #   Call between .Ltmp6 and .Ltmp7
	.uleb128 .Ltmp8-.Lfunc_begin2           #     jumps to .Ltmp8
	.byte	1                               #   On action: 1
.Lcst_end2:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.long	0                               # TypeInfo 1
.Lttbase0:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	main                            # -- Begin function main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
.Lfunc_begin3:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception3
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 24
	.cfi_def_cfa_offset 80
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 16], rax
	mov	ebp, 693
	xor	ebx, ebx
	movabs	r12, 2305843009213693951
	xor	r14d, r14d
	xor	eax, eax
	jmp	.LBB3_1
	.p2align	4, 0x90
.LBB3_2:                                #   in Loop: Header=BB3_1 Depth=1
	mov	dword ptr [rax], ebp
.LBB3_35:                               #   in Loop: Header=BB3_1 Depth=1
	add	rax, 4
	add	ebp, -7
	cmp	ebp, -7
	je	.LBB3_3
.LBB3_1:                                # =>This Inner Loop Header: Depth=1
	cmp	rax, r14
	jne	.LBB3_2
# %bb.21:                               #   in Loop: Header=BB3_1 Depth=1
	sub	r14, rbx
	movabs	rax, 9223372036854775804
	cmp	r14, rax
	je	.LBB3_22
# %bb.25:                               #   in Loop: Header=BB3_1 Depth=1
	mov	rax, r14
	sar	rax, 2
	cmp	rax, 1
	mov	rcx, rax
	adc	rcx, 0
	lea	rdx, [rcx + rax]
	cmp	rdx, r12
	jb	.LBB3_27
# %bb.26:                               #   in Loop: Header=BB3_1 Depth=1
	mov	rdx, r12
.LBB3_27:                               #   in Loop: Header=BB3_1 Depth=1
	mov	r13, r12
	add	rcx, rax
	jb	.LBB3_29
# %bb.28:                               #   in Loop: Header=BB3_1 Depth=1
	mov	r13, rdx
.LBB3_29:                               #   in Loop: Header=BB3_1 Depth=1
	lea	rdi, [4*r13]
.Ltmp9:
	call	_Znwm@PLT
.Ltmp10:
# %bb.30:                               #   in Loop: Header=BB3_1 Depth=1
	mov	r15, rax
	mov	dword ptr [rax + r14], ebp
	test	r14, r14
	jle	.LBB3_32
# %bb.31:                               #   in Loop: Header=BB3_1 Depth=1
	mov	rdi, r15
	mov	rsi, rbx
	mov	rdx, r14
	call	memcpy@PLT
.LBB3_32:                               #   in Loop: Header=BB3_1 Depth=1
	test	rbx, rbx
	je	.LBB3_34
# %bb.33:                               #   in Loop: Header=BB3_1 Depth=1
	mov	rdi, rbx
	call	_ZdlPv@PLT
.LBB3_34:                               #   in Loop: Header=BB3_1 Depth=1
	add	r14, r15
	mov	rax, r14
	lea	r14, [r15 + 4*r13]
	mov	rbx, r15
	jmp	.LBB3_35
.LBB3_3:
	movabs	rsi, 17179869180
	mov	dword ptr [rsp + 12], 0
	sub	rax, rbx
	test	rax, rsi
	je	.LBB3_16
# %bb.4:
	shr	rax, 2
	cdqe
	lea	edx, [rax - 1]
	xor	ecx, ecx
	cmp	edx, 15
	jb	.LBB3_11
# %bb.5:
	lea	rdi, [rbx + 4*rax]
	lea	r8, [rsp + 12]
	cmp	r8, rdi
	jae	.LBB3_7
# %bb.6:
	lea	rdi, [rsp + 16]
	lea	r8, [4*rax]
	lea	r9, [rsi + 4*rax]
	and	r9, rsi
	sub	r8, r9
	lea	rsi, [r8 + rbx]
	add	rsi, -4
	cmp	rsi, rdi
	jae	.LBB3_7
.LBB3_11:
	lea	edx, [rax - 1]
	mov	esi, eax
	and	esi, 3
	je	.LBB3_13
	.p2align	4, 0x90
.LBB3_12:                               # =>This Inner Loop Header: Depth=1
	add	ecx, dword ptr [rbx + 4*rax - 4]
	dec	rax
	mov	dword ptr [rsp + 12], ecx
	dec	esi
	jne	.LBB3_12
.LBB3_13:
	cmp	edx, 3
	jb	.LBB3_16
# %bb.14:
	add	rax, -4
	mov	rdx, rax
	.p2align	4, 0x90
.LBB3_15:                               # =>This Inner Loop Header: Depth=1
	add	ecx, dword ptr [rbx + 4*rax + 12]
	mov	dword ptr [rsp + 12], ecx
	add	ecx, dword ptr [rbx + 4*rax + 8]
	mov	dword ptr [rsp + 12], ecx
	add	ecx, dword ptr [rbx + 4*rax + 4]
	mov	dword ptr [rsp + 12], ecx
	add	ecx, dword ptr [rbx + 4*rax]
	mov	dword ptr [rsp + 12], ecx
	add	rdx, -4
	test	eax, eax
	mov	rax, rdx
	jne	.LBB3_15
	jmp	.LBB3_16
.LBB3_7:
	inc	rdx
	mov	rcx, rdx
	and	rcx, -8
	lea	rsi, [rbx + 4*rax]
	add	rsi, -16
	sub	rax, rcx
	mov	rdi, rcx
	neg	rdi
	pxor	xmm0, xmm0
	xor	r8d, r8d
	pxor	xmm1, xmm1
	.p2align	4, 0x90
.LBB3_8:                                # =>This Inner Loop Header: Depth=1
	movdqu	xmm2, xmmword ptr [rsi + 4*r8 - 16]
	movdqu	xmm3, xmmword ptr [rsi + 4*r8]
	pshufd	xmm3, xmm3, 27                  # xmm3 = xmm3[3,2,1,0]
	paddd	xmm0, xmm3
	pshufd	xmm2, xmm2, 27                  # xmm2 = xmm2[3,2,1,0]
	paddd	xmm1, xmm2
	add	r8, -8
	cmp	rdi, r8
	jne	.LBB3_8
# %bb.9:
	paddd	xmm1, xmm0
	pshufd	xmm2, xmm1, 238                 # xmm2 = xmm1[2,3,2,3]
	paddd	xmm2, xmm1
	pshufd	xmm0, xmm2, 85                  # xmm0 = xmm2[1,1,1,1]
	paddd	xmm0, xmm2
	movd	dword ptr [rsp + 12], xmm0
	cmp	rdx, rcx
	jne	.LBB3_10
.LBB3_16:
	mov	rax, qword ptr [rip + stdout@GOTPCREL]
	mov	rdi, qword ptr [rax]
.Ltmp12:
	lea	rdx, [rip + .L.str]
	lea	rcx, [rsp + 12]
	mov	esi, 2
	call	_ZSt7printlnIJRiEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS5_
.Ltmp13:
# %bb.17:
	test	rbx, rbx
	je	.LBB3_19
# %bb.18:
	mov	rdi, rbx
	call	_ZdlPv@PLT
.LBB3_19:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 16]
	jne	.LBB3_43
# %bb.20:
	xor	eax, eax
	add	rsp, 24
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB3_10:
	.cfi_def_cfa_offset 80
	movd	ecx, xmm0
	lea	edx, [rax - 1]
	mov	esi, eax
	and	esi, 3
	jne	.LBB3_12
	jmp	.LBB3_13
.LBB3_22:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 16]
	jne	.LBB3_43
# %bb.23:
.Ltmp15:
	lea	rdi, [rip + .L.str.5]
	call	_ZSt20__throw_length_errorPKc@PLT
.Ltmp16:
# %bb.24:
.LBB3_38:
.Ltmp14:
	jmp	.LBB3_39
.LBB3_36:
.Ltmp11:
	jmp	.LBB3_39
.LBB3_37:
.Ltmp17:
.LBB3_39:
	mov	r14, rax
	test	rbx, rbx
	je	.LBB3_41
# %bb.40:
	mov	rdi, rbx
	call	_ZdlPv@PLT
.LBB3_41:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 16]
	jne	.LBB3_43
# %bb.42:
	mov	rdi, r14
	call	_Unwind_Resume@PLT
.LBB3_43:
	call	__stack_chk_fail@PLT
.Lfunc_end3:
	.size	main, .Lfunc_end3-main
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table3:
.Lexception3:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end3-.Lcst_begin3
.Lcst_begin3:
	.uleb128 .Ltmp9-.Lfunc_begin3           # >> Call Site 1 <<
	.uleb128 .Ltmp10-.Ltmp9                 #   Call between .Ltmp9 and .Ltmp10
	.uleb128 .Ltmp11-.Lfunc_begin3          #     jumps to .Ltmp11
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp10-.Lfunc_begin3          # >> Call Site 2 <<
	.uleb128 .Ltmp12-.Ltmp10                #   Call between .Ltmp10 and .Ltmp12
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp12-.Lfunc_begin3          # >> Call Site 3 <<
	.uleb128 .Ltmp13-.Ltmp12                #   Call between .Ltmp12 and .Ltmp13
	.uleb128 .Ltmp14-.Lfunc_begin3          #     jumps to .Ltmp14
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp15-.Lfunc_begin3          # >> Call Site 4 <<
	.uleb128 .Ltmp16-.Ltmp15                #   Call between .Ltmp15 and .Ltmp16
	.uleb128 .Ltmp17-.Lfunc_begin3          #     jumps to .Ltmp17
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp16-.Lfunc_begin3          # >> Call Site 5 <<
	.uleb128 .Lfunc_end3-.Ltmp16            #   Call between .Ltmp16 and .Lfunc_end3
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end3:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text.__clang_call_terminate,"axG",@progbits,__clang_call_terminate,comdat
	.hidden	__clang_call_terminate          # -- Begin function __clang_call_terminate
	.weak	__clang_call_terminate
	.p2align	4, 0x90
	.type	__clang_call_terminate,@function
__clang_call_terminate:                 # @__clang_call_terminate
	.cfi_startproc
# %bb.0:
	push	rax
	.cfi_def_cfa_offset 16
	call	__cxa_begin_catch@PLT
	call	_ZSt9terminatev@PLT
.Lfunc_end4:
	.size	__clang_call_terminate, .Lfunc_end4-__clang_call_terminate
	.cfi_endproc
                                        # -- End function
	.section	.text._ZSt7printlnIJRiEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS5_,"axG",@progbits,_ZSt7printlnIJRiEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS5_,comdat
	.weak	_ZSt7printlnIJRiEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS5_ # -- Begin function _ZSt7printlnIJRiEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS5_
	.p2align	4, 0x90
	.type	_ZSt7printlnIJRiEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS5_,@function
_ZSt7printlnIJRiEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS5_: # @_ZSt7printlnIJRiEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS5_
.Lfunc_begin4:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception4
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	r12
	.cfi_def_cfa_offset 32
	push	rbx
	.cfi_def_cfa_offset 40
	sub	rsp, 392
	.cfi_def_cfa_offset 432
	.cfi_offset rbx, -40
	.cfi_offset r12, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	rbx, rdi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 384], rax
	mov	eax, dword ptr [rcx]
	mov	qword ptr [rsp + 48], rax
	lea	rax, [rsp + 96]
	mov	qword ptr [rsp + 72], rax
	mov	qword ptr [rsp + 80], 256
	mov	qword ptr [rsp + 88], rax
	lea	rax, [rip + _ZTVNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE+16]
	mov	qword ptr [rsp + 64], rax
	lea	r14, [rsp + 368]
	mov	qword ptr [rsp + 352], r14
	mov	qword ptr [rsp + 360], 0
	mov	byte ptr [rsp + 368], 0
	mov	qword ptr [rsp], 49
	lea	rax, [rsp + 48]
	mov	qword ptr [rsp + 8], rax
.Ltmp18:
	lea	rdi, [rsp + 64]
	mov	rcx, rsp
	xor	r8d, r8d
	call	_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale
.Ltmp19:
# %bb.1:
	mov	rcx, qword ptr [rsp + 72]
	mov	r8, qword ptr [rsp + 88]
	sub	r8, rcx
	je	.LBB5_14
# %bb.2:
	mov	rsi, qword ptr [rsp + 360]
	movabs	rax, 9223372036854775807
	xor	rax, rsi
	cmp	rax, r8
	jb	.LBB5_3
# %bb.6:
	lea	r15, [rsi + r8]
	mov	rdi, qword ptr [rsp + 352]
	mov	eax, 15
	cmp	rdi, r14
	je	.LBB5_8
# %bb.7:
	mov	rax, qword ptr [rsp + 368]
.LBB5_8:
	cmp	r15, rax
	jbe	.LBB5_9
# %bb.12:
.Ltmp20:
	lea	rdi, [rsp + 352]
	xor	edx, edx
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
.Ltmp21:
	jmp	.LBB5_13
.LBB5_9:
	add	rdi, rsi
	cmp	r8, 1
	jne	.LBB5_11
# %bb.10:
	movzx	eax, byte ptr [rcx]
	mov	byte ptr [rdi], al
	jmp	.LBB5_13
.LBB5_11:
	mov	rsi, rcx
	mov	rdx, r8
	call	memcpy@PLT
.LBB5_13:
	mov	qword ptr [rsp + 360], r15
	mov	rax, qword ptr [rsp + 352]
	mov	byte ptr [rax + r15], 0
	mov	rax, qword ptr [rsp + 72]
	mov	qword ptr [rsp + 88], rax
.LBB5_14:
	lea	r15, [rsp + 32]
	mov	qword ptr [rsp + 16], r15
	mov	rax, qword ptr [rsp + 352]
	cmp	rax, r14
	je	.LBB5_15
# %bb.20:
	mov	qword ptr [rsp + 16], rax
	mov	r12, qword ptr [rsp + 360]
	mov	rcx, qword ptr [rsp + 368]
	mov	qword ptr [rsp + 32], rcx
	jmp	.LBB5_21
.LBB5_15:
	mov	r12, qword ptr [rsp + 360]
	lea	rdx, [r12 + 1]
	mov	rdi, r15
	mov	rsi, r14
	call	memcpy@PLT
	mov	rax, r15
.LBB5_21:
	mov	qword ptr [rsp + 24], r12
	mov	qword ptr [rsp + 64], r12
	mov	qword ptr [rsp + 72], rax
.Ltmp25:
	lea	rdx, [rip + .L.str.6]
	lea	r8, [rsp + 64]
	mov	esi, 3
	mov	ecx, 177
	mov	rdi, rbx
	call	_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE
.Ltmp26:
# %bb.22:
	mov	rdi, qword ptr [rsp + 16]
	cmp	rdi, r15
	je	.LBB5_24
# %bb.23:
	call	_ZdlPv@PLT
.LBB5_24:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 384]
	jne	.LBB5_27
# %bb.25:
	add	rsp, 392
	.cfi_def_cfa_offset 40
	pop	rbx
	.cfi_def_cfa_offset 32
	pop	r12
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.LBB5_3:
	.cfi_def_cfa_offset 432
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 384]
	jne	.LBB5_27
# %bb.4:
.Ltmp22:
	lea	rdi, [rip + .L.str.7]
	call	_ZSt20__throw_length_errorPKc@PLT
.Ltmp23:
# %bb.5:
.LBB5_26:
.Ltmp27:
	mov	rbx, rax
	mov	rdi, qword ptr [rsp + 16]
	cmp	rdi, r15
	jne	.LBB5_17
	jmp	.LBB5_18
.LBB5_16:
.Ltmp24:
	mov	rbx, rax
	mov	rdi, qword ptr [rsp + 352]
	cmp	rdi, r14
	je	.LBB5_18
.LBB5_17:
	call	_ZdlPv@PLT
.LBB5_18:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 384]
	jne	.LBB5_27
# %bb.19:
	mov	rdi, rbx
	call	_Unwind_Resume@PLT
.LBB5_27:
	call	__stack_chk_fail@PLT
.Lfunc_end5:
	.size	_ZSt7printlnIJRiEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS5_, .Lfunc_end5-_ZSt7printlnIJRiEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS5_
	.cfi_endproc
	.section	.gcc_except_table._ZSt7printlnIJRiEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS5_,"aG",@progbits,_ZSt7printlnIJRiEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS5_,comdat
	.p2align	2, 0x0
GCC_except_table5:
.Lexception4:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end4-.Lcst_begin4
.Lcst_begin4:
	.uleb128 .Ltmp18-.Lfunc_begin4          # >> Call Site 1 <<
	.uleb128 .Ltmp21-.Ltmp18                #   Call between .Ltmp18 and .Ltmp21
	.uleb128 .Ltmp24-.Lfunc_begin4          #     jumps to .Ltmp24
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp21-.Lfunc_begin4          # >> Call Site 2 <<
	.uleb128 .Ltmp25-.Ltmp21                #   Call between .Ltmp21 and .Ltmp25
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp25-.Lfunc_begin4          # >> Call Site 3 <<
	.uleb128 .Ltmp26-.Ltmp25                #   Call between .Ltmp25 and .Ltmp26
	.uleb128 .Ltmp27-.Lfunc_begin4          #     jumps to .Ltmp27
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp22-.Lfunc_begin4          # >> Call Site 4 <<
	.uleb128 .Ltmp23-.Ltmp22                #   Call between .Ltmp22 and .Ltmp23
	.uleb128 .Ltmp24-.Lfunc_begin4          #     jumps to .Ltmp24
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp23-.Lfunc_begin4          # >> Call Site 5 <<
	.uleb128 .Lfunc_end5-.Ltmp23            #   Call between .Ltmp23 and .Lfunc_end5
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end4:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE,"axG",@progbits,_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE,comdat
	.weak	_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE # -- Begin function _ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE
	.p2align	4, 0x90
	.type	_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE,@function
_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE: # @_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE
.Lfunc_begin5:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception5
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	r12
	.cfi_def_cfa_offset 32
	push	rbx
	.cfi_def_cfa_offset 40
	sub	rsp, 344
	.cfi_def_cfa_offset 384
	.cfi_offset rbx, -40
	.cfi_offset r12, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	rbx, rdi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 336], rax
	lea	rax, [rsp + 48]
	mov	qword ptr [rsp + 24], rax
	mov	qword ptr [rsp + 32], 256
	mov	qword ptr [rsp + 40], rax
	lea	rax, [rip + _ZTVNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE+16]
	mov	qword ptr [rsp + 16], rax
	lea	r15, [rsp + 320]
	mov	qword ptr [rsp + 304], r15
	mov	qword ptr [rsp + 312], 0
	mov	byte ptr [rsp + 320], 0
	mov	qword ptr [rsp], rcx
	mov	qword ptr [rsp + 8], r8
.Ltmp28:
	lea	rdi, [rsp + 16]
	mov	rcx, rsp
	xor	r8d, r8d
	call	_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale
.Ltmp29:
# %bb.1:
	mov	rcx, qword ptr [rsp + 24]
	mov	rax, qword ptr [rsp + 40]
	mov	r14, rax
	sub	r14, rcx
	mov	rsi, qword ptr [rsp + 312]
	test	rsi, rsi
	je	.LBB6_17
# %bb.2:
	test	r14, r14
	je	.LBB6_16
# %bb.3:
	cmp	rax, rcx
	je	.LBB6_16
# %bb.4:
	movabs	rax, 9223372036854775807
	xor	rax, rsi
	cmp	rax, r14
	jb	.LBB6_5
# %bb.8:
	lea	r12, [r14 + rsi]
	mov	rdi, qword ptr [rsp + 304]
	mov	eax, 15
	cmp	rdi, r15
	je	.LBB6_10
# %bb.9:
	mov	rax, qword ptr [rsp + 320]
.LBB6_10:
	cmp	r12, rax
	jbe	.LBB6_11
# %bb.14:
.Ltmp31:
	lea	rdi, [rsp + 304]
	xor	edx, edx
	mov	r8, r14
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
.Ltmp32:
	jmp	.LBB6_15
.LBB6_11:
	add	rdi, rsi
	cmp	r14, 1
	jne	.LBB6_13
# %bb.12:
	movzx	eax, byte ptr [rcx]
	mov	byte ptr [rdi], al
	jmp	.LBB6_15
.LBB6_13:
	mov	rsi, rcx
	mov	rdx, r14
	call	memcpy@PLT
.LBB6_15:
	mov	qword ptr [rsp + 312], r12
	mov	rax, qword ptr [rsp + 304]
	mov	byte ptr [rax + r12], 0
	mov	rax, qword ptr [rsp + 24]
	mov	rsi, qword ptr [rsp + 312]
	mov	qword ptr [rsp + 40], rax
.LBB6_16:
	mov	rcx, qword ptr [rsp + 304]
	mov	r14, rsi
.LBB6_17:
	mov	esi, 1
	mov	rdi, rcx
	mov	rdx, r14
	mov	rcx, rbx
	call	fwrite@PLT
	cmp	rax, r14
	jne	.LBB6_18
# %bb.22:
	mov	rdi, qword ptr [rsp + 304]
	cmp	rdi, r15
	je	.LBB6_24
# %bb.23:
	call	_ZdlPv@PLT
.LBB6_24:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 336]
	jne	.LBB6_31
# %bb.25:
	add	rsp, 344
	.cfi_def_cfa_offset 40
	pop	rbx
	.cfi_def_cfa_offset 32
	pop	r12
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.LBB6_18:
	.cfi_def_cfa_offset 384
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 336]
	jne	.LBB6_31
# %bb.19:
.Ltmp35:
	mov	edi, 5
	call	_ZSt20__throw_system_errori@PLT
.Ltmp36:
# %bb.20:
.LBB6_5:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 336]
	jne	.LBB6_31
# %bb.6:
.Ltmp33:
	lea	rdi, [rip + .L.str.7]
	call	_ZSt20__throw_length_errorPKc@PLT
.Ltmp34:
# %bb.7:
.LBB6_26:
.Ltmp30:
	jmp	.LBB6_27
.LBB6_21:
.Ltmp37:
.LBB6_27:
	mov	rbx, rax
	mov	rdi, qword ptr [rsp + 304]
	cmp	rdi, r15
	je	.LBB6_29
# %bb.28:
	call	_ZdlPv@PLT
.LBB6_29:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 336]
	jne	.LBB6_31
# %bb.30:
	mov	rdi, rbx
	call	_Unwind_Resume@PLT
.LBB6_31:
	call	__stack_chk_fail@PLT
.Lfunc_end6:
	.size	_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE, .Lfunc_end6-_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE
	.cfi_endproc
	.section	.gcc_except_table._ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE,"aG",@progbits,_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE,comdat
	.p2align	2, 0x0
GCC_except_table6:
.Lexception5:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end5-.Lcst_begin5
.Lcst_begin5:
	.uleb128 .Ltmp28-.Lfunc_begin5          # >> Call Site 1 <<
	.uleb128 .Ltmp29-.Ltmp28                #   Call between .Ltmp28 and .Ltmp29
	.uleb128 .Ltmp30-.Lfunc_begin5          #     jumps to .Ltmp30
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp31-.Lfunc_begin5          # >> Call Site 2 <<
	.uleb128 .Ltmp32-.Ltmp31                #   Call between .Ltmp31 and .Ltmp32
	.uleb128 .Ltmp37-.Lfunc_begin5          #     jumps to .Ltmp37
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp32-.Lfunc_begin5          # >> Call Site 3 <<
	.uleb128 .Ltmp35-.Ltmp32                #   Call between .Ltmp32 and .Ltmp35
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp35-.Lfunc_begin5          # >> Call Site 4 <<
	.uleb128 .Ltmp34-.Ltmp35                #   Call between .Ltmp35 and .Ltmp34
	.uleb128 .Ltmp37-.Lfunc_begin5          #     jumps to .Ltmp37
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp34-.Lfunc_begin5          # >> Call Site 5 <<
	.uleb128 .Lfunc_end6-.Ltmp34            #   Call between .Ltmp34 and .Lfunc_end6
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end5:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv,"axG",@progbits,_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv,comdat
	.weak	_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv # -- Begin function _ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv
	.p2align	4, 0x90
	.type	_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv,@function
_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv: # @_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv
	.cfi_startproc
# %bb.0:
	push	r14
	.cfi_def_cfa_offset 16
	push	rbx
	.cfi_def_cfa_offset 24
	push	rax
	.cfi_def_cfa_offset 32
	.cfi_offset rbx, -24
	.cfi_offset r14, -16
	mov	rcx, qword ptr [rdi + 8]
	mov	r8, qword ptr [rdi + 24]
	sub	r8, rcx
	je	.LBB7_10
# %bb.1:
	mov	rbx, rdi
	mov	rsi, qword ptr [rdi + 296]
	movabs	rax, 9223372036854775807
	xor	rax, rsi
	cmp	rax, r8
	jb	.LBB7_11
# %bb.2:
	lea	r14, [rsi + r8]
	mov	rdi, qword ptr [rbx + 288]
	lea	rdx, [rbx + 304]
	mov	eax, 15
	cmp	rdi, rdx
	je	.LBB7_4
# %bb.3:
	mov	rax, qword ptr [rbx + 304]
.LBB7_4:
	cmp	r14, rax
	jbe	.LBB7_5
# %bb.8:
	lea	rdi, [rbx + 288]
	xor	edx, edx
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
	jmp	.LBB7_9
.LBB7_5:
	add	rdi, rsi
	cmp	r8, 1
	jne	.LBB7_7
# %bb.6:
	movzx	eax, byte ptr [rcx]
	mov	byte ptr [rdi], al
	jmp	.LBB7_9
.LBB7_7:
	mov	rsi, rcx
	mov	rdx, r8
	call	memcpy@PLT
.LBB7_9:
	mov	qword ptr [rbx + 296], r14
	mov	rax, qword ptr [rbx + 288]
	mov	byte ptr [rax + r14], 0
	mov	rax, qword ptr [rbx + 8]
	mov	qword ptr [rbx + 24], rax
.LBB7_10:
	add	rsp, 8
	.cfi_def_cfa_offset 24
	pop	rbx
	.cfi_def_cfa_offset 16
	pop	r14
	.cfi_def_cfa_offset 8
	ret
.LBB7_11:
	.cfi_def_cfa_offset 32
	lea	rdi, [rip + .L.str.7]
	call	_ZSt20__throw_length_errorPKc@PLT
.Lfunc_end7:
	.size	_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv, .Lfunc_end7-_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEm,"axG",@progbits,_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEm,comdat
	.weak	_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEm # -- Begin function _ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEm
	.p2align	4, 0x90
	.type	_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEm,@function
_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEm: # @_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEm
	.cfi_startproc
# %bb.0:
	push	r14
	.cfi_def_cfa_offset 16
	push	rbx
	.cfi_def_cfa_offset 24
	push	rax
	.cfi_def_cfa_offset 32
	.cfi_offset rbx, -24
	.cfi_offset r14, -16
	mov	rbx, rdi
	mov	rax, qword ptr [rdi + 24]
	cmp	rax, qword ptr [rdi + 8]
	jne	.LBB8_1
.LBB8_2:
	lea	rdi, [rbx + 288]
	mov	r14, qword ptr [rbx + 296]
	add	rsi, r14
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_
	mov	rax, qword ptr [rbx + 288]
	mov	rcx, qword ptr [rbx + 296]
	mov	qword ptr [rbx + 8], rax
	mov	qword ptr [rbx + 16], rcx
	add	rax, r14
	mov	qword ptr [rbx + 24], rax
	mov	rax, rbx
	add	rsp, 8
	.cfi_def_cfa_offset 24
	pop	rbx
	.cfi_def_cfa_offset 16
	pop	r14
	.cfi_def_cfa_offset 8
	ret
.LBB8_1:
	.cfi_def_cfa_offset 32
	mov	rdi, rbx
	mov	r14, rsi
	call	_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv
	mov	rsi, r14
	jmp	.LBB8_2
.Lfunc_end8:
	.size	_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEm, .Lfunc_end8-_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEm
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_bumpEm,"axG",@progbits,_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_bumpEm,comdat
	.weak	_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_bumpEm # -- Begin function _ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_bumpEm
	.p2align	4, 0x90
	.type	_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_bumpEm,@function
_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_bumpEm: # @_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_bumpEm
	.cfi_startproc
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	r13
	.cfi_def_cfa_offset 32
	push	r12
	.cfi_def_cfa_offset 40
	push	rbx
	.cfi_def_cfa_offset 48
	.cfi_offset rbx, -48
	.cfi_offset r12, -40
	.cfi_offset r13, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	rbx, rdi
	mov	r13, qword ptr [rdi + 24]
	sub	r13, qword ptr [rdi + 8]
	mov	r15, qword ptr [rdi + 296]
	add	r13, rsi
	mov	r14, r13
	sub	r14, r15
	jbe	.LBB9_9
# %bb.1:
	movabs	rax, 9223372036854775807
	xor	rax, r15
	cmp	rax, r14
	jb	.LBB9_12
# %bb.2:
	mov	rdi, qword ptr [rbx + 288]
	lea	rcx, [rbx + 304]
	mov	eax, 15
	cmp	rdi, rcx
	jne	.LBB9_3
# %bb.4:
	cmp	rax, r13
	jb	.LBB9_5
.LBB9_6:
	add	rdi, r15
	cmp	r14, 1
	jne	.LBB9_8
.LBB9_7:
	mov	byte ptr [rdi], 0
	jmp	.LBB9_10
.LBB9_9:
	jb	.LBB9_10
	jmp	.LBB9_11
.LBB9_3:
	mov	rax, qword ptr [rbx + 304]
	cmp	rax, r13
	jae	.LBB9_6
.LBB9_5:
	lea	r12, [rbx + 288]
	mov	rdi, r12
	mov	rsi, r15
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
	mov	rdi, qword ptr [r12]
	add	rdi, r15
	cmp	r14, 1
	je	.LBB9_7
.LBB9_8:
	xor	esi, esi
	mov	rdx, r14
	call	memset@PLT
.LBB9_10:
	mov	qword ptr [rbx + 296], r13
	mov	rax, qword ptr [rbx + 288]
	mov	byte ptr [rax + r13], 0
.LBB9_11:
	lea	rax, [rbx + 32]
	mov	qword ptr [rbx + 8], rax
	mov	qword ptr [rbx + 16], 256
	mov	qword ptr [rbx + 24], rax
	pop	rbx
	.cfi_def_cfa_offset 40
	pop	r12
	.cfi_def_cfa_offset 32
	pop	r13
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.LBB9_12:
	.cfi_def_cfa_offset 48
	lea	rdi, [rip + .L.str.8]
	call	_ZSt20__throw_length_errorPKc@PLT
.Lfunc_end9:
	.size	_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_bumpEm, .Lfunc_end9-_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_bumpEm
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8__format5_SinkIcE10_M_reserveEm,"axG",@progbits,_ZNSt8__format5_SinkIcE10_M_reserveEm,comdat
	.weak	_ZNSt8__format5_SinkIcE10_M_reserveEm # -- Begin function _ZNSt8__format5_SinkIcE10_M_reserveEm
	.p2align	4, 0x90
	.type	_ZNSt8__format5_SinkIcE10_M_reserveEm,@function
_ZNSt8__format5_SinkIcE10_M_reserveEm:  # @_ZNSt8__format5_SinkIcE10_M_reserveEm
	.cfi_startproc
# %bb.0:
	mov	rax, rdi
	mov	rdx, qword ptr [rdi + 8]
	mov	rcx, qword ptr [rdi + 16]
	sub	rdx, qword ptr [rdi + 24]
	add	rdx, rcx
	cmp	rdx, rsi
	jae	.LBB10_4
# %bb.1:
	cmp	rcx, rsi
	jb	.LBB10_3
# %bb.2:
	push	r14
	.cfi_def_cfa_offset 16
	push	rbx
	.cfi_def_cfa_offset 24
	push	rax
	.cfi_def_cfa_offset 32
	.cfi_offset rbx, -24
	.cfi_offset r14, -16
	mov	rcx, qword ptr [rax]
	mov	rbx, rax
	mov	rdi, rax
	mov	r14, rsi
	call	qword ptr [rcx]
	mov	rax, rbx
	mov	rcx, qword ptr [rbx + 8]
	sub	rcx, qword ptr [rbx + 24]
	add	rcx, qword ptr [rbx + 16]
	cmp	rcx, r14
	lea	rsp, [rsp + 8]
	.cfi_def_cfa_offset 24
	pop	rbx
	.cfi_def_cfa_offset 16
	pop	r14
	.cfi_def_cfa_offset 8
	.cfi_restore rbx
	.cfi_restore r14
	jae	.LBB10_4
.LBB10_3:
	xor	eax, eax
.LBB10_4:
	ret
.Lfunc_end10:
	.size	_ZNSt8__format5_SinkIcE10_M_reserveEm, .Lfunc_end10-_ZNSt8__format5_SinkIcE10_M_reserveEm
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8__format5_SinkIcE7_M_bumpEm,"axG",@progbits,_ZNSt8__format5_SinkIcE7_M_bumpEm,comdat
	.weak	_ZNSt8__format5_SinkIcE7_M_bumpEm # -- Begin function _ZNSt8__format5_SinkIcE7_M_bumpEm
	.p2align	4, 0x90
	.type	_ZNSt8__format5_SinkIcE7_M_bumpEm,@function
_ZNSt8__format5_SinkIcE7_M_bumpEm:      # @_ZNSt8__format5_SinkIcE7_M_bumpEm
	.cfi_startproc
# %bb.0:
	add	qword ptr [rdi + 24], rsi
	ret
.Lfunc_end11:
	.size	_ZNSt8__format5_SinkIcE7_M_bumpEm, .Lfunc_end11-_ZNSt8__format5_SinkIcE7_M_bumpEm
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm,"axG",@progbits,_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm,comdat
	.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm # -- Begin function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
	.p2align	4, 0x90
	.type	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm,@function
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm: # @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 40
	.cfi_def_cfa_offset 96
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	rbp, r8
	mov	qword ptr [rsp + 32], rcx       # 8-byte Spill
	mov	r15, rsi
	mov	rbx, rdi
	mov	r14, qword ptr [rdi]
	mov	r12, qword ptr [rdi + 8]
	mov	qword ptr [rsp], r8             # 8-byte Spill
	mov	qword ptr [rsp + 16], rdx       # 8-byte Spill
	sub	rbp, rdx
	lea	rcx, [rdi + 16]
	mov	eax, 15
	cmp	r14, rcx
	je	.LBB12_2
# %bb.1:
	mov	rax, qword ptr [rbx + 16]
.LBB12_2:
	add	rbp, r12
	js	.LBB12_25
# %bb.3:
	cmp	rbp, rax
	jbe	.LBB12_6
# %bb.4:
	add	rax, rax
	cmp	rbp, rax
	jae	.LBB12_6
# %bb.5:
	movabs	rbp, 9223372036854775807
	cmp	rax, rbp
	cmovb	rbp, rax
.LBB12_6:
	mov	rdi, rbp
	inc	rdi
	js	.LBB12_26
# %bb.7:
	mov	qword ptr [rsp + 24], rcx       # 8-byte Spill
	call	_Znwm@PLT
	mov	r13, rax
	test	r15, r15
	je	.LBB12_11
# %bb.8:
	cmp	r15, 1
	jne	.LBB12_10
# %bb.9:
	movzx	eax, byte ptr [r14]
	mov	byte ptr [r13], al
	jmp	.LBB12_11
.LBB12_10:
	mov	rdi, r13
	mov	rsi, r14
	mov	rdx, r15
	call	memcpy@PLT
.LBB12_11:
	mov	qword ptr [rsp + 8], r14        # 8-byte Spill
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	lea	r14, [rax + r15]
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	test	rsi, rsi
	mov	rdx, qword ptr [rsp]            # 8-byte Reload
	je	.LBB12_17
# %bb.12:
	test	rdx, rdx
	je	.LBB12_17
# %bb.13:
	lea	rdi, [r15 + r13]
	cmp	rdx, 1
	jne	.LBB12_15
# %bb.14:
	movzx	eax, byte ptr [rsi]
	mov	byte ptr [rdi], al
	jmp	.LBB12_16
.LBB12_15:
	call	memcpy@PLT
.LBB12_16:
	mov	rdx, qword ptr [rsp]            # 8-byte Reload
.LBB12_17:
	cmp	r12, r14
	je	.LBB12_22
# %bb.18:
	sub	r12, r14
	je	.LBB12_22
# %bb.19:
	mov	rdi, r13
	add	rdi, r15
	add	rdi, rdx
	add	r15, qword ptr [rsp + 8]        # 8-byte Folded Reload
	add	r15, qword ptr [rsp + 16]       # 8-byte Folded Reload
	cmp	r12, 1
	jne	.LBB12_21
# %bb.20:
	movzx	eax, byte ptr [r15]
	mov	byte ptr [rdi], al
.LBB12_22:
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	cmp	rdi, qword ptr [rsp + 24]       # 8-byte Folded Reload
	je	.LBB12_24
.LBB12_23:
	call	_ZdlPv@PLT
.LBB12_24:
	mov	qword ptr [rbx], r13
	mov	qword ptr [rbx + 16], rbp
	add	rsp, 40
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB12_21:
	.cfi_def_cfa_offset 96
	mov	rsi, r15
	mov	rdx, r12
	call	memcpy@PLT
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	cmp	rdi, qword ptr [rsp + 24]       # 8-byte Folded Reload
	jne	.LBB12_23
	jmp	.LBB12_24
.LBB12_26:
	call	_ZSt17__throw_bad_allocv@PLT
.LBB12_25:
	lea	rdi, [rip + .L.str.3]
	call	_ZSt20__throw_length_errorPKc@PLT
.Lfunc_end12:
	.size	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm, .Lfunc_end12-_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_,"axG",@progbits,_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_,comdat
	.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_ # -- Begin function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_
	.p2align	4, 0x90
	.type	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_,@function
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_: # @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	push	rax
	.cfi_def_cfa_offset 64
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	rbx, rsi
	mov	r14, rdi
	mov	r15, qword ptr [rdi]
	lea	r13, [rdi + 16]
	mov	eax, 15
	cmp	r15, r13
	je	.LBB13_2
# %bb.1:
	mov	rax, qword ptr [r14 + 16]
.LBB13_2:
	cmp	rax, rbx
	jae	.LBB13_3
# %bb.4:
	test	rbx, rbx
	js	.LBB13_14
# %bb.5:
	add	rax, rax
	movabs	rbp, 9223372036854775807
	cmp	rax, rbp
	cmovb	rbp, rax
	cmp	rax, rbx
	cmovbe	rbp, rbx
	mov	rdi, rbp
	inc	rdi
	js	.LBB13_15
# %bb.6:
	call	_Znwm@PLT
	mov	r12, rax
	mov	rdx, qword ptr [r14 + 8]
	cmp	rdx, -1
	je	.LBB13_10
# %bb.7:
	test	rdx, rdx
	jne	.LBB13_9
# %bb.8:
	movzx	eax, byte ptr [r15]
	mov	byte ptr [r12], al
.LBB13_10:
	cmp	r15, r13
	je	.LBB13_12
.LBB13_11:
	mov	rdi, r15
	call	_ZdlPv@PLT
.LBB13_12:
	mov	qword ptr [r14], r12
	mov	qword ptr [r14 + 16], rbp
	jmp	.LBB13_13
.LBB13_3:
	mov	r12, r15
.LBB13_13:
	mov	qword ptr [r14 + 8], rbx
	mov	byte ptr [r12 + rbx], 0
	add	rsp, 8
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB13_9:
	.cfi_def_cfa_offset 64
	inc	rdx
	mov	rdi, r12
	mov	rsi, r15
	call	memcpy@PLT
	cmp	r15, r13
	jne	.LBB13_11
	jmp	.LBB13_12
.LBB13_15:
	call	_ZSt17__throw_bad_allocv@PLT
.LBB13_14:
	lea	rdi, [rip + .L.str.3]
	call	_ZSt20__throw_length_errorPKc@PLT
.Lfunc_end13:
	.size	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_, .Lfunc_end13-_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm,"axG",@progbits,_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm,comdat
	.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm # -- Begin function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm
	.p2align	4, 0x90
	.type	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm,@function
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm: # @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm
	.cfi_startproc
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	r13
	.cfi_def_cfa_offset 32
	push	r12
	.cfi_def_cfa_offset 40
	push	rbx
	.cfi_def_cfa_offset 48
	.cfi_offset rbx, -48
	.cfi_offset r12, -40
	.cfi_offset r13, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	rbx, rdi
	mov	r14, qword ptr [rdi]
	lea	r12, [rdi + 16]
	mov	eax, 15
	cmp	r14, r12
	je	.LBB14_2
# %bb.1:
	mov	rax, qword ptr [rbx + 16]
.LBB14_2:
	cmp	rax, rsi
	jae	.LBB14_12
# %bb.3:
	test	rsi, rsi
	js	.LBB14_13
# %bb.4:
	add	rax, rax
	movabs	r13, 9223372036854775807
	cmp	rax, r13
	cmovb	r13, rax
	cmp	rax, rsi
	cmovbe	r13, rsi
	mov	rdi, r13
	inc	rdi
	js	.LBB14_14
# %bb.5:
	call	_Znwm@PLT
	mov	r15, rax
	mov	rdx, qword ptr [rbx + 8]
	cmp	rdx, -1
	je	.LBB14_9
# %bb.6:
	test	rdx, rdx
	jne	.LBB14_8
# %bb.7:
	movzx	eax, byte ptr [r14]
	mov	byte ptr [r15], al
.LBB14_9:
	cmp	r14, r12
	je	.LBB14_11
.LBB14_10:
	mov	rdi, r14
	call	_ZdlPv@PLT
.LBB14_11:
	mov	qword ptr [rbx], r15
	mov	qword ptr [rbx + 16], r13
.LBB14_12:
	pop	rbx
	.cfi_def_cfa_offset 40
	pop	r12
	.cfi_def_cfa_offset 32
	pop	r13
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.LBB14_8:
	.cfi_def_cfa_offset 48
	inc	rdx
	mov	rdi, r15
	mov	rsi, r14
	call	memcpy@PLT
	cmp	r14, r12
	jne	.LBB14_10
	jmp	.LBB14_11
.LBB14_14:
	call	_ZSt17__throw_bad_allocv@PLT
.LBB14_13:
	lea	rdi, [rip + .L.str.3]
	call	_ZSt20__throw_length_errorPKc@PLT
.Lfunc_end14:
	.size	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm, .Lfunc_end14-_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale,"axG",@progbits,_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale,comdat
	.weak	_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale # -- Begin function _ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale
	.p2align	4, 0x90
	.type	_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale,@function
_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale: # @_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale
.Lfunc_begin6:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception6
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	r13
	.cfi_def_cfa_offset 32
	push	r12
	.cfi_def_cfa_offset 40
	push	rbx
	.cfi_def_cfa_offset 48
	sub	rsp, 464
	.cfi_def_cfa_offset 512
	.cfi_offset rbx, -48
	.cfi_offset r12, -40
	.cfi_offset r13, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	rbx, rdx
	mov	r14, rsi
	mov	r15, rdi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 456], rax
	lea	rax, [rsp + 176]
	mov	qword ptr [rsp + 152], rax
	mov	qword ptr [rsp + 160], 256
	mov	qword ptr [rsp + 168], rax
	lea	rax, [rip + _ZTVNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE+16]
	mov	qword ptr [rsp + 144], rax
	mov	qword ptr [rsp + 432], rdi
	mov	qword ptr [rsp + 440], -1
	mov	qword ptr [rsp + 448], 0
	mov	qword ptr [rsp + 32], rdi
	cmp	rsi, 2
	jne	.LBB15_9
# %bb.1:
	cmp	byte ptr [rbx], 123
	jne	.LBB15_9
# %bb.2:
	cmp	byte ptr [rbx + 1], 125
	jne	.LBB15_9
# %bb.3:
	mov	byte ptr [rsp + 31], 0
	lea	rax, [rsp + 32]
	mov	qword ptr [rsp + 40], rax
	lea	rax, [rsp + 31]
	mov	qword ptr [rsp + 48], rax
	mov	rax, qword ptr [rcx]
	test	al, 15
	je	.LBB15_5
# %bb.4:
	mov	r12, r8
	shr	eax, 4
	and	al, 31
	mov	r13, rcx
	mov	rcx, qword ptr [rcx + 8]
	movaps	xmm0, xmmword ptr [rcx]
	movaps	xmmword ptr [rsp], xmm0
	jmp	.LBB15_8
.LBB15_5:
	test	rax, rax
	je	.LBB15_6
# %bb.7:
	mov	r12, r8
	mov	r13, rcx
	mov	rax, qword ptr [rcx + 8]
	movaps	xmm0, xmmword ptr [rax]
	movaps	xmmword ptr [rsp], xmm0
	movzx	eax, byte ptr [rax + 16]
	jmp	.LBB15_8
.LBB15_6:
	mov	r13, rcx
	mov	r12, r8
	xor	eax, eax
.LBB15_8:
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmmword ptr [rsp + 80], xmm0
	mov	byte ptr [rsp + 96], al
	movzx	edx, al
	lea	rdi, [rsp + 80]
	lea	rsi, [rsp + 40]
	call	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE
	cmp	byte ptr [rsp + 31], 0
	mov	r15, qword ptr [rsp + 32]
	mov	r8, r12
	mov	rcx, r13
	jne	.LBB15_15
.LBB15_9:
	movups	xmm0, xmmword ptr [rcx]
	movups	xmmword ptr [rsp + 40], xmm0
	mov	qword ptr [rsp + 56], r15
	test	r8, r8
	je	.LBB15_10
# %bb.11:
	lea	rdi, [rsp + 64]
	mov	rsi, r8
	call	_ZNSt6localeC1ERKS_@PLT
	mov	al, 1
	jmp	.LBB15_12
.LBB15_10:
	mov	byte ptr [rsp + 64], 0
	xor	eax, eax
.LBB15_12:
	mov	byte ptr [rsp + 72], al
	mov	qword ptr [rsp + 88], rbx
	add	r14, rbx
	mov	qword ptr [rsp + 96], r14
	mov	dword ptr [rsp + 104], 0
	mov	qword ptr [rsp + 112], 0
	mov	qword ptr [rsp + 120], -1
	lea	rax, [rip + _ZTVNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE+16]
	mov	qword ptr [rsp + 80], rax
	lea	rax, [rsp + 40]
	mov	qword ptr [rsp + 128], rax
.Ltmp38:
	lea	rdi, [rsp + 80]
	call	_ZNSt8__format8_ScannerIcE7_M_scanEv
.Ltmp39:
# %bb.13:
	mov	r15, qword ptr [rsp + 56]
	cmp	byte ptr [rsp + 72], 0
	je	.LBB15_15
# %bb.14:
	lea	rdi, [rsp + 64]
	call	_ZNSt6localeD1Ev@PLT
.LBB15_15:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 456]
	jne	.LBB15_21
# %bb.16:
	mov	rax, r15
	add	rsp, 464
	.cfi_def_cfa_offset 48
	pop	rbx
	.cfi_def_cfa_offset 40
	pop	r12
	.cfi_def_cfa_offset 32
	pop	r13
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.LBB15_17:
	.cfi_def_cfa_offset 512
.Ltmp40:
	mov	rbx, rax
	cmp	byte ptr [rsp + 72], 0
	je	.LBB15_19
# %bb.18:
	lea	rdi, [rsp + 64]
	call	_ZNSt6localeD1Ev@PLT
.LBB15_19:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 456]
	jne	.LBB15_21
# %bb.20:
	mov	rdi, rbx
	call	_Unwind_Resume@PLT
.LBB15_21:
	call	__stack_chk_fail@PLT
.Lfunc_end15:
	.size	_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale, .Lfunc_end15-_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale
	.cfi_endproc
	.section	.gcc_except_table._ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale,"aG",@progbits,_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale,comdat
	.p2align	2, 0x0
GCC_except_table15:
.Lexception6:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end6-.Lcst_begin6
.Lcst_begin6:
	.uleb128 .Lfunc_begin6-.Lfunc_begin6    # >> Call Site 1 <<
	.uleb128 .Ltmp38-.Lfunc_begin6          #   Call between .Lfunc_begin6 and .Ltmp38
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp38-.Lfunc_begin6          # >> Call Site 2 <<
	.uleb128 .Ltmp39-.Ltmp38                #   Call between .Ltmp38 and .Ltmp39
	.uleb128 .Ltmp40-.Lfunc_begin6          #     jumps to .Ltmp40
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp39-.Lfunc_begin6          # >> Call Site 3 <<
	.uleb128 .Lfunc_end15-.Ltmp39           #   Call between .Ltmp39 and .Lfunc_end15
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end6:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZNSt8__format8_ScannerIcE7_M_scanEv,"axG",@progbits,_ZNSt8__format8_ScannerIcE7_M_scanEv,comdat
	.weak	_ZNSt8__format8_ScannerIcE7_M_scanEv # -- Begin function _ZNSt8__format8_ScannerIcE7_M_scanEv
	.p2align	4, 0x90
	.type	_ZNSt8__format8_ScannerIcE7_M_scanEv,@function
_ZNSt8__format8_ScannerIcE7_M_scanEv:   # @_ZNSt8__format8_ScannerIcE7_M_scanEv
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	push	rax
	.cfi_def_cfa_offset 64
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	r14, qword ptr [rdi + 8]
	mov	qword ptr [rsp], rdi            # 8-byte Spill
	mov	r12, qword ptr [rdi + 16]
	mov	r15, r12
	sub	r15, r14
	je	.LBB16_10
# %bb.1:
	cmp	r15, 2
	jne	.LBB16_6
# %bb.2:
	cmp	byte ptr [r14], 123
	jne	.LBB16_6
# %bb.3:
	cmp	byte ptr [r14 + 1], 125
	jne	.LBB16_6
# %bb.4:
	inc	r14
	mov	rdi, qword ptr [rsp]            # 8-byte Reload
	mov	qword ptr [rdi + 8], r14
	cmp	dword ptr [rdi + 24], 1
	je	.LBB16_25
# %bb.5:
	mov	dword ptr [rdi + 24], 2
	mov	rax, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 32]
	lea	rcx, [rsi + 1]
	mov	qword ptr [rdi + 32], rcx
	mov	rax, qword ptr [rax + 8]
	add	rsp, 8
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	jmp	rax                             # TAILCALL
.LBB16_6:
	.cfi_def_cfa_offset 64
	mov	rdi, r14
	mov	esi, 123
	mov	rdx, r15
	call	memchr@PLT
	mov	rcx, rax
	sub	rcx, r14
	xor	ebp, ebp
	cmp	rax, 1
	mov	ebx, 0
	sbb	rbx, rbx
	or	rbx, rcx
	mov	rdi, r14
	mov	esi, 125
	mov	rdx, r15
	call	memchr@PLT
	mov	rcx, rax
	sub	rcx, r14
	cmp	rax, 1
	jmp	.LBB16_7
	.p2align	4, 0x90
.LBB16_24:                              #   in Loop: Header=BB16_7 Depth=1
	mov	rdi, r14
	mov	esi, 125
	mov	rdx, r15
	call	memchr@PLT
	mov	rcx, rax
	sub	rcx, r14
	cmp	rax, 1
	mov	ebp, 0
.LBB16_7:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_11 Depth 2
	sbb	rbp, rbp
	or	rbp, rcx
	cmp	rbx, rbp
	je	.LBB16_9
.LBB16_11:                              #   Parent Loop BB16_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	r13, rbx
	sub	r13, rbp
	jae	.LBB16_20
# %bb.12:                               #   in Loop: Header=BB16_11 Depth=2
	lea	rax, [rbx + 1]
	cmp	rax, r15
	mov	r13, qword ptr [rsp]            # 8-byte Reload
	je	.LBB16_26
# %bb.13:                               #   in Loop: Header=BB16_11 Depth=2
	movzx	r15d, byte ptr [r14 + rax]
	cmp	rbp, -1
	jne	.LBB16_15
# %bb.14:                               #   in Loop: Header=BB16_11 Depth=2
	cmp	r15b, 123
	mov	r15b, 123
	jne	.LBB16_26
.LBB16_15:                              #   in Loop: Header=BB16_11 Depth=2
	xor	r12d, r12d
	cmp	r15b, 123
	sete	r12b
	add	r14, rbx
	lea	rsi, [r14 + r12]
	mov	rax, qword ptr [r13]
	mov	rdi, r13
	call	qword ptr [rax]
	add	r14, r12
	inc	r14
	mov	r12, qword ptr [r13 + 16]
	mov	qword ptr [r13 + 8], r14
	cmp	r15b, 123
	jne	.LBB16_18
# %bb.16:                               #   in Loop: Header=BB16_11 Depth=2
	mov	r15, r12
	sub	r15, r14
	je	.LBB16_10
# %bb.17:                               #   in Loop: Header=BB16_11 Depth=2
	mov	rax, rbp
	sub	rax, rbx
	add	rax, -2
	cmp	rbp, -1
	cmovne	rbp, rax
	mov	rdi, r14
	mov	esi, 123
	mov	rdx, r15
	call	memchr@PLT
	mov	rcx, rax
	sub	rcx, r14
	cmp	rax, 1
	mov	ebx, 0
	sbb	rbx, rbx
	or	rbx, rcx
	cmp	rbx, rbp
	jne	.LBB16_11
	jmp	.LBB16_9
	.p2align	4, 0x90
.LBB16_20:                              #   in Loop: Header=BB16_7 Depth=1
	inc	rbp
	cmp	rbp, r15
	je	.LBB16_27
# %bb.21:                               #   in Loop: Header=BB16_7 Depth=1
	cmp	byte ptr [r14 + rbp], 125
	jne	.LBB16_27
# %bb.22:                               #   in Loop: Header=BB16_7 Depth=1
	add	r14, rbp
	mov	r15, qword ptr [rsp]            # 8-byte Reload
	mov	rax, qword ptr [r15]
	mov	rdi, r15
	mov	rsi, r14
	call	qword ptr [rax]
	inc	r14
	mov	qword ptr [r15 + 8], r14
	mov	r12, qword ptr [r15 + 16]
	mov	r15, r12
	sub	r15, r14
	je	.LBB16_10
# %bb.23:                               #   in Loop: Header=BB16_7 Depth=1
	add	r13, -2
	cmp	rbx, -1
	cmovne	rbx, r13
	jmp	.LBB16_24
	.p2align	4, 0x90
.LBB16_18:                              #   in Loop: Header=BB16_7 Depth=1
	mov	rdi, r13
	call	_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv
	mov	r14, qword ptr [r13 + 8]
	mov	r12, qword ptr [r13 + 16]
	mov	r15, r12
	sub	r15, r14
	je	.LBB16_10
# %bb.19:                               #   in Loop: Header=BB16_7 Depth=1
	mov	rdi, r14
	mov	esi, 123
	mov	rdx, r15
	call	memchr@PLT
	mov	rcx, rax
	sub	rcx, r14
	cmp	rax, 1
	mov	ebx, 0
	sbb	rbx, rbx
	or	rbx, rcx
	jmp	.LBB16_24
.LBB16_9:
	mov	rbx, qword ptr [rsp]            # 8-byte Reload
	mov	rax, qword ptr [rbx]
	mov	rdi, rbx
	mov	rsi, r12
	call	qword ptr [rax]
	mov	rax, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 8], rax
.LBB16_10:
	add	rsp, 8
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB16_27:
	.cfi_def_cfa_offset 64
	call	_ZNSt8__format40__unmatched_right_brace_in_format_stringEv
.LBB16_26:
	call	_ZNSt8__format39__unmatched_left_brace_in_format_stringEv
.LBB16_25:
	call	_ZNSt8__format39__conflicting_indexing_in_format_stringEv
.Lfunc_end16:
	.size	_ZNSt8__format8_ScannerIcE7_M_scanEv, .Lfunc_end16-_ZNSt8__format8_ScannerIcE7_M_scanEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv,"axG",@progbits,_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv,comdat
	.weak	_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv # -- Begin function _ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv
	.p2align	4, 0x90
	.type	_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv,@function
_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv: # @_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv
	.cfi_startproc
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	r13
	.cfi_def_cfa_offset 32
	push	r12
	.cfi_def_cfa_offset 40
	push	rbx
	.cfi_def_cfa_offset 48
	.cfi_offset rbx, -48
	.cfi_offset r12, -40
	.cfi_offset r13, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	r15, qword ptr [rdi + 8]
	mov	r14, qword ptr [rdi + 24]
	sub	r14, r15
	mov	r12, qword ptr [rdi + 296]
	test	r12, r12
	js	.LBB17_1
# %bb.6:
	sub	r12, qword ptr [rdi + 304]
	jbe	.LBB17_13
# %bb.7:
	cmp	r12, r14
	cmovae	r12, r14
	mov	rbx, qword ptr [rdi + 288]
	test	r12, r12
	jle	.LBB17_12
# %bb.8:
	inc	r12
	.p2align	4, 0x90
.LBB17_9:                               # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [r15]
	mov	rcx, qword ptr [rbx + 24]
	lea	rdx, [rcx + 1]
	mov	qword ptr [rbx + 24], rdx
	mov	byte ptr [rcx], al
	mov	rax, qword ptr [rbx + 24]
	sub	rax, qword ptr [rbx + 8]
	cmp	rax, qword ptr [rbx + 16]
	je	.LBB17_10
# %bb.11:                               #   in Loop: Header=BB17_9 Depth=1
	inc	r15
	dec	r12
	cmp	r12, 1
	jg	.LBB17_9
	jmp	.LBB17_12
.LBB17_10:                              #   in Loop: Header=BB17_9 Depth=1
	mov	rax, qword ptr [rbx]
	mov	r13, rdi
	mov	rdi, rbx
	call	qword ptr [rax]
	mov	rdi, r13
	inc	r15
	dec	r12
	cmp	r12, 1
	jg	.LBB17_9
	jmp	.LBB17_12
.LBB17_1:
	mov	rbx, qword ptr [rdi + 288]
	test	r14, r14
	jle	.LBB17_12
# %bb.2:
	lea	r12, [r14 + 1]
	.p2align	4, 0x90
.LBB17_3:                               # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [r15]
	mov	rcx, qword ptr [rbx + 24]
	lea	rdx, [rcx + 1]
	mov	qword ptr [rbx + 24], rdx
	mov	byte ptr [rcx], al
	mov	rax, qword ptr [rbx + 24]
	sub	rax, qword ptr [rbx + 8]
	cmp	rax, qword ptr [rbx + 16]
	je	.LBB17_4
.LBB17_5:                               #   in Loop: Header=BB17_3 Depth=1
	inc	r15
	dec	r12
	cmp	r12, 1
	jg	.LBB17_3
	jmp	.LBB17_12
.LBB17_4:                               #   in Loop: Header=BB17_3 Depth=1
	mov	rax, qword ptr [rbx]
	mov	r13, rdi
	mov	rdi, rbx
	call	qword ptr [rax]
	mov	rdi, r13
	jmp	.LBB17_5
.LBB17_12:
	mov	qword ptr [rdi + 288], rbx
.LBB17_13:
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rdi + 24], rax
	add	qword ptr [rdi + 304], r14
	pop	rbx
	.cfi_def_cfa_offset 40
	pop	r12
	.cfi_def_cfa_offset 32
	pop	r13
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.Lfunc_end17:
	.size	_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv, .Lfunc_end17-_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE,"axG",@progbits,_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE,comdat
	.weak	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE # -- Begin function _ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE
	.p2align	4, 0x90
	.type	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE,@function
_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE: # @_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	push	rax
	.cfi_def_cfa_offset 64
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	rbx, rsi
	mov	eax, edx
	lea	rcx, [rip + .LJTI18_0]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB18_1:
	movzx	r14d, byte ptr [rdi]
	xor	r14, 5
	mov	rax, qword ptr [rbx]
	mov	rax, qword ptr [rax]
	mov	rcx, qword ptr [rax]
	mov	r15, rdi
	mov	rdi, rax
	mov	rsi, r14
	call	qword ptr [rcx + 8]
	test	rax, rax
	je	.LBB18_86
# %bb.2:
	mov	rcx, r15
	mov	rdi, qword ptr [rax + 24]
	movzx	ecx, byte ptr [r15]
	lea	rdx, [rip + .Lreltable._ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE]
	movsxd	rsi, dword ptr [rdx + 4*rcx]
	add	rsi, rdx
	jmp	.LBB18_23
.LBB18_3:
	mov	r15, qword ptr [rdi]
	mov	rdi, r15
	call	strlen@PLT
	mov	r14, rax
	jmp	.LBB18_21
.LBB18_4:
	mov	ebp, dword ptr [rdi]
	mov	eax, 1
	cmp	ebp, 10
	jb	.LBB18_43
# %bb.5:
	mov	eax, 4
	mov	ecx, 3518437209
	mov	edx, ebp
	.p2align	4, 0x90
.LBB18_6:                               # =>This Inner Loop Header: Depth=1
	cmp	edx, 99
	jbe	.LBB18_38
# %bb.7:                                #   in Loop: Header=BB18_6 Depth=1
	cmp	edx, 999
	jbe	.LBB18_42
# %bb.8:                                #   in Loop: Header=BB18_6 Depth=1
	cmp	edx, 10000
	jb	.LBB18_43
# %bb.9:                                #   in Loop: Header=BB18_6 Depth=1
	mov	esi, edx
	imul	rsi, rcx
	shr	rsi, 45
	add	eax, 4
	cmp	edx, 99999
	mov	edx, esi
	ja	.LBB18_6
# %bb.10:
	add	eax, -3
	jmp	.LBB18_43
.LBB18_11:
	mov	r15, qword ptr [rdi]
	mov	r12, r15
	neg	r12
	cmovs	r12, r15
	mov	r13d, 1
	cmp	r12, 10
	jb	.LBB18_52
# %bb.12:
	mov	r13d, 4
	movabs	rsi, 3777893186295716171
	mov	rcx, r12
	.p2align	4, 0x90
.LBB18_13:                              # =>This Inner Loop Header: Depth=1
	cmp	rcx, 99
	jbe	.LBB18_39
# %bb.14:                               #   in Loop: Header=BB18_13 Depth=1
	cmp	rcx, 999
	jbe	.LBB18_51
# %bb.15:                               #   in Loop: Header=BB18_13 Depth=1
	cmp	rcx, 10000
	jb	.LBB18_52
# %bb.16:                               #   in Loop: Header=BB18_13 Depth=1
	mov	rax, rcx
	mul	rsi
	shr	rdx, 11
	add	r13d, 4
	cmp	rcx, 99999
	mov	rcx, rdx
	ja	.LBB18_13
# %bb.17:
	add	r13d, -3
	jmp	.LBB18_52
.LBB18_18:
	mov	rax, qword ptr [rbx]
	mov	rax, qword ptr [rax]
	mov	rcx, qword ptr [rax]
	mov	esi, 1
	mov	r14, rdi
	mov	rdi, rax
	call	qword ptr [rcx + 8]
	test	rax, rax
	je	.LBB18_86
# %bb.19:
	movzx	ecx, byte ptr [r14]
	mov	rdx, qword ptr [rax + 24]
	mov	byte ptr [rdx], cl
	mov	rcx, qword ptr [rax]
	mov	esi, 1
	mov	rdi, rax
	jmp	.LBB18_84
.LBB18_20:
	mov	r14, qword ptr [rdi]
	mov	r15, qword ptr [rdi + 8]
.LBB18_21:
	mov	rax, qword ptr [rbx]
	mov	rdi, qword ptr [rax]
	mov	rax, qword ptr [rdi]
	mov	rsi, r14
	call	qword ptr [rax + 8]
	test	rax, rax
	je	.LBB18_86
# %bb.22:
	mov	rdi, qword ptr [rax + 24]
	mov	rsi, r15
.LBB18_23:
	mov	rdx, r14
	mov	r15, rax
	call	memcpy@PLT
	mov	rax, qword ptr [r15]
	mov	rdi, r15
	jmp	.LBB18_72
.LBB18_24:
	mov	r15, qword ptr [rdi]
	mov	esi, 1
	cmp	r15, 10
	jb	.LBB18_62
# %bb.25:
	mov	esi, 4
	movabs	rdi, 3777893186295716171
	mov	rcx, r15
	.p2align	4, 0x90
.LBB18_26:                              # =>This Inner Loop Header: Depth=1
	cmp	rcx, 99
	jbe	.LBB18_40
# %bb.27:                               #   in Loop: Header=BB18_26 Depth=1
	cmp	rcx, 999
	jbe	.LBB18_61
# %bb.28:                               #   in Loop: Header=BB18_26 Depth=1
	cmp	rcx, 10000
	jb	.LBB18_62
# %bb.29:                               #   in Loop: Header=BB18_26 Depth=1
	mov	rax, rcx
	mul	rdi
	shr	rdx, 11
	add	esi, 4
	cmp	rcx, 99999
	mov	rcx, rdx
	ja	.LBB18_26
# %bb.30:
	add	esi, -3
	jmp	.LBB18_62
.LBB18_31:
	mov	r15d, dword ptr [rdi]
	mov	ebp, r15d
	neg	ebp
	cmovs	ebp, r15d
	mov	r12d, 1
	cmp	ebp, 10
	jb	.LBB18_74
# %bb.32:
	mov	r12d, 4
	mov	eax, 3518437209
	mov	ecx, ebp
	.p2align	4, 0x90
.LBB18_33:                              # =>This Inner Loop Header: Depth=1
	cmp	ecx, 99
	jbe	.LBB18_41
# %bb.34:                               #   in Loop: Header=BB18_33 Depth=1
	cmp	ecx, 999
	jbe	.LBB18_73
# %bb.35:                               #   in Loop: Header=BB18_33 Depth=1
	cmp	ecx, 10000
	jb	.LBB18_74
# %bb.36:                               #   in Loop: Header=BB18_33 Depth=1
	mov	edx, ecx
	imul	rdx, rax
	shr	rdx, 45
	add	r12d, 4
	cmp	ecx, 99999
	mov	ecx, edx
	ja	.LBB18_33
# %bb.37:
	add	r12d, -3
	jmp	.LBB18_74
.LBB18_38:
	add	eax, -2
	jmp	.LBB18_43
.LBB18_39:
	add	r13d, -2
	jmp	.LBB18_52
.LBB18_40:
	add	esi, -2
	jmp	.LBB18_62
.LBB18_41:
	add	r12d, -2
	jmp	.LBB18_74
.LBB18_42:
	dec	eax
.LBB18_43:
	mov	rcx, qword ptr [rbx]
	mov	r14d, eax
	mov	rdi, qword ptr [rcx]
	mov	rax, qword ptr [rdi]
	mov	rsi, r14
	call	qword ptr [rax + 8]
	test	rax, rax
	je	.LBB18_86
# %bb.44:
	mov	rcx, qword ptr [rax + 24]
	cmp	ebp, 100
	jb	.LBB18_47
# %bb.45:
	lea	esi, [r14 - 2]
	lea	rdi, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	.p2align	4, 0x90
.LBB18_46:                              # =>This Inner Loop Header: Depth=1
	lea	r8d, [rsi + 1]
	mov	edx, ebp
	imul	rdx, rdx, 1374389535
	shr	rdx, 37
	imul	r9d, edx, 100
	mov	r10d, ebp
	sub	r10d, r9d
	movzx	r9d, byte ptr [rdi + 2*r10]
	movzx	r10d, byte ptr [rdi + 2*r10 + 1]
	mov	byte ptr [rcx + r8], r10b
	mov	r8d, esi
	mov	byte ptr [rcx + r8], r9b
	add	esi, -2
	cmp	ebp, 9999
	mov	ebp, edx
	ja	.LBB18_46
	jmp	.LBB18_48
.LBB18_47:
	mov	edx, ebp
.LBB18_48:
	cmp	edx, 10
	jb	.LBB18_50
# %bb.49:
	mov	edx, edx
	lea	rsi, [rdx + rdx]
	mov	esi, esi
	lea	rdi, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	movzx	esi, byte ptr [rsi + rdi + 1]
	mov	byte ptr [rcx + 1], sil
	movzx	edx, byte ptr [rdi + 2*rdx]
	mov	byte ptr [rcx], dl
	jmp	.LBB18_83
.LBB18_50:
	or	dl, 48
	mov	byte ptr [rcx], dl
	jmp	.LBB18_83
.LBB18_51:
	dec	r13d
.LBB18_52:
	mov	rax, qword ptr [rbx]
	shr	r15, 63
	lea	r14d, [r15 + r13]
	mov	rdi, qword ptr [rax]
	mov	rax, qword ptr [rdi]
	mov	rsi, r14
	call	qword ptr [rax + 8]
	test	rax, rax
	je	.LBB18_86
# %bb.53:
	mov	rdi, rax
	mov	rax, qword ptr [rax + 24]
	mov	byte ptr [rax], 45
	add	r15, rax
	cmp	r12, 100
	jb	.LBB18_56
# %bb.54:
	add	r13d, -2
	movabs	rcx, 2951479051793528259
	lea	rsi, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	.p2align	4, 0x90
.LBB18_55:                              # =>This Inner Loop Header: Depth=1
	lea	r8d, [r13 + 1]
	mov	rax, r12
	shr	rax, 2
	mul	rcx
	shr	rdx, 2
	imul	eax, edx, 100
	mov	r9d, r12d
	sub	r9d, eax
	movzx	eax, byte ptr [rsi + 2*r9]
	movzx	r9d, byte ptr [rsi + 2*r9 + 1]
	mov	byte ptr [r15 + r8], r9b
	mov	r8d, r13d
	mov	byte ptr [r15 + r8], al
	add	r13d, -2
	cmp	r12, 9999
	mov	r12, rdx
	ja	.LBB18_55
	jmp	.LBB18_57
.LBB18_56:
	mov	rdx, r12
.LBB18_57:
	cmp	rdx, 10
	jb	.LBB18_59
# %bb.58:
	lea	rcx, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	movzx	eax, byte ptr [rcx + 2*rdx]
	movzx	ecx, byte ptr [rcx + 2*rdx + 1]
	mov	byte ptr [r15 + 1], cl
	jmp	.LBB18_60
.LBB18_59:
	or	dl, 48
	mov	eax, edx
.LBB18_60:
	mov	byte ptr [r15], al
	jmp	.LBB18_71
.LBB18_61:
	dec	esi
.LBB18_62:
	mov	rax, qword ptr [rbx]
	mov	r14d, esi
	mov	rdi, qword ptr [rax]
	mov	rax, qword ptr [rdi]
	mov	rsi, r14
	call	qword ptr [rax + 8]
	test	rax, rax
	je	.LBB18_86
# %bb.63:
	mov	rdi, rax
	mov	rcx, qword ptr [rax + 24]
	lea	rsi, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	cmp	r15, 100
	jb	.LBB18_66
# %bb.64:
	lea	r8d, [r14 - 2]
	movabs	r9, 2951479051793528259
	.p2align	4, 0x90
.LBB18_65:                              # =>This Inner Loop Header: Depth=1
	lea	r10d, [r8 + 1]
	mov	rax, r15
	shr	rax, 2
	mul	r9
	shr	rdx, 2
	imul	eax, edx, 100
	mov	r11d, r15d
	sub	r11d, eax
	movzx	eax, byte ptr [rsi + 2*r11]
	movzx	r11d, byte ptr [rsi + 2*r11 + 1]
	mov	byte ptr [rcx + r10], r11b
	mov	r10d, r8d
	mov	byte ptr [rcx + r10], al
	add	r8d, -2
	cmp	r15, 9999
	mov	r15, rdx
	ja	.LBB18_65
	jmp	.LBB18_67
.LBB18_66:
	mov	rdx, r15
.LBB18_67:
	cmp	rdx, 10
	jb	.LBB18_69
# %bb.68:
	movzx	eax, byte ptr [rsi + 2*rdx]
	movzx	edx, byte ptr [rsi + 2*rdx + 1]
	mov	byte ptr [rcx + 1], dl
	jmp	.LBB18_70
.LBB18_69:
	or	dl, 48
	mov	eax, edx
.LBB18_70:
	mov	byte ptr [rcx], al
.LBB18_71:
	mov	rax, qword ptr [rdi]
.LBB18_72:
	mov	rsi, r14
	call	qword ptr [rax + 16]
	jmp	.LBB18_85
.LBB18_73:
	dec	r12d
.LBB18_74:
	mov	rax, qword ptr [rbx]
	shr	r15d, 31
	lea	r14d, [r12 + r15]
	mov	rdi, qword ptr [rax]
	mov	rax, qword ptr [rdi]
	mov	rsi, r14
	call	qword ptr [rax + 8]
	test	rax, rax
	je	.LBB18_86
# %bb.75:
	mov	rcx, qword ptr [rax + 24]
	mov	byte ptr [rcx], 45
	add	r15, rcx
	cmp	ebp, 100
	jb	.LBB18_78
# %bb.76:
	add	r12d, -2
	lea	rdx, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	.p2align	4, 0x90
.LBB18_77:                              # =>This Inner Loop Header: Depth=1
	lea	esi, [r12 + 1]
	mov	ecx, ebp
	imul	rcx, rcx, 1374389535
	shr	rcx, 37
	imul	edi, ecx, 100
	mov	r8d, ebp
	sub	r8d, edi
	movzx	edi, byte ptr [rdx + 2*r8]
	movzx	r8d, byte ptr [rdx + 2*r8 + 1]
	mov	byte ptr [r15 + rsi], r8b
	mov	esi, r12d
	mov	byte ptr [r15 + rsi], dil
	add	r12d, -2
	cmp	ebp, 9999
	mov	ebp, ecx
	ja	.LBB18_77
	jmp	.LBB18_79
.LBB18_78:
	mov	ecx, ebp
.LBB18_79:
	cmp	ecx, 10
	jb	.LBB18_81
# %bb.80:
	mov	ecx, ecx
	lea	rdx, [rcx + rcx]
	mov	edx, edx
	lea	rsi, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	movzx	edx, byte ptr [rdx + rsi + 1]
	mov	byte ptr [r15 + 1], dl
	movzx	ecx, byte ptr [rsi + 2*rcx]
	jmp	.LBB18_82
.LBB18_81:
	or	cl, 48
.LBB18_82:
	mov	byte ptr [r15], cl
.LBB18_83:
	mov	rcx, qword ptr [rax]
	mov	rdi, rax
	mov	rsi, r14
.LBB18_84:
	call	qword ptr [rcx + 16]
.LBB18_85:
	mov	rax, qword ptr [rbx + 8]
	mov	byte ptr [rax], 1
.LBB18_86:
	add	rsp, 8
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.Lfunc_end18:
	.size	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE, .Lfunc_end18-_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE
	.cfi_endproc
	.section	.rodata._ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE,"aG",@progbits,_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE,comdat
	.p2align	2, 0x0
.LJTI18_0:
	.long	.LBB18_86-.LJTI18_0
	.long	.LBB18_1-.LJTI18_0
	.long	.LBB18_18-.LJTI18_0
	.long	.LBB18_31-.LJTI18_0
	.long	.LBB18_4-.LJTI18_0
	.long	.LBB18_11-.LJTI18_0
	.long	.LBB18_24-.LJTI18_0
	.long	.LBB18_86-.LJTI18_0
	.long	.LBB18_86-.LJTI18_0
	.long	.LBB18_86-.LJTI18_0
	.long	.LBB18_3-.LJTI18_0
	.long	.LBB18_20-.LJTI18_0
	.long	.LBB18_86-.LJTI18_0
	.long	.LBB18_86-.LJTI18_0
	.long	.LBB18_86-.LJTI18_0
	.long	.LBB18_86-.LJTI18_0
                                        # -- End function
	.section	.text._ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE11_M_on_charsEPKc,"axG",@progbits,_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE11_M_on_charsEPKc,comdat
	.weak	_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE11_M_on_charsEPKc # -- Begin function _ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE11_M_on_charsEPKc
	.p2align	4, 0x90
	.type	_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE11_M_on_charsEPKc,@function
_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE11_M_on_charsEPKc: # @_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE11_M_on_charsEPKc
	.cfi_startproc
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	r13
	.cfi_def_cfa_offset 32
	push	r12
	.cfi_def_cfa_offset 40
	push	rbx
	.cfi_def_cfa_offset 48
	.cfi_offset rbx, -48
	.cfi_offset r12, -40
	.cfi_offset r13, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	rbx, rsi
	mov	r15, qword ptr [rdi + 8]
	mov	r13, qword ptr [rdi + 48]
	mov	r14, qword ptr [r13 + 16]
	sub	rbx, r15
	je	.LBB19_7
# %bb.1:
	mov	r12, qword ptr [r14 + 8]
	mov	rdi, qword ptr [r14 + 24]
	sub	r12, rdi
	add	r12, qword ptr [r14 + 16]
	cmp	r12, rbx
	jbe	.LBB19_2
	jmp	.LBB19_6
	.p2align	4, 0x90
.LBB19_4:                               #   in Loop: Header=BB19_2 Depth=1
	add	rdi, r12
	mov	qword ptr [r14 + 24], rdi
	add	r15, r12
	sub	rbx, r12
	mov	rax, qword ptr [r14]
	mov	rdi, r14
	call	qword ptr [rax]
	mov	r12, qword ptr [r14 + 8]
	mov	rdi, qword ptr [r14 + 24]
	sub	r12, rdi
	add	r12, qword ptr [r14 + 16]
	cmp	r12, rbx
	ja	.LBB19_5
.LBB19_2:                               # =>This Inner Loop Header: Depth=1
	test	r12, r12
	je	.LBB19_4
# %bb.3:                                #   in Loop: Header=BB19_2 Depth=1
	mov	rsi, r15
	mov	rdx, r12
	call	memcpy@PLT
	mov	rdi, qword ptr [r14 + 24]
	jmp	.LBB19_4
.LBB19_5:
	test	rbx, rbx
	je	.LBB19_7
.LBB19_6:
	mov	rsi, r15
	mov	rdx, rbx
	call	memcpy@PLT
	add	qword ptr [r14 + 24], rbx
.LBB19_7:
	mov	qword ptr [r13 + 16], r14
	pop	rbx
	.cfi_def_cfa_offset 40
	pop	r12
	.cfi_def_cfa_offset 32
	pop	r13
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.Lfunc_end19:
	.size	_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE11_M_on_charsEPKc, .Lfunc_end19-_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE11_M_on_charsEPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEm,"axG",@progbits,_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEm,comdat
	.weak	_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEm # -- Begin function _ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEm
	.p2align	4, 0x90
	.type	_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEm,@function
_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEm: # @_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEm
	.cfi_startproc
# %bb.0:
	sub	rsp, 72
	.cfi_def_cfa_offset 80
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 64], rax
	mov	qword ptr [rsp + 24], rdi
	mov	rax, qword ptr [rdi + 48]
	mov	rdx, qword ptr [rax]
	mov	edi, edx
	and	edi, 15
	cmp	rdi, rsi
	jbe	.LBB20_2
# %bb.1:
	shr	rdx, 4
	lea	ecx, [rsi + 4*rsi]
                                        # kill: def $cl killed $cl killed $ecx
	shr	rdx, cl
	and	dl, 31
	mov	rax, qword ptr [rax + 8]
	shl	rsi, 4
	movaps	xmm0, xmmword ptr [rax + rsi]
	movaps	xmmword ptr [rsp], xmm0
	mov	ecx, edx
	jmp	.LBB20_5
.LBB20_2:
	xor	ecx, ecx
	test	rdi, rdi
	jne	.LBB20_5
# %bb.3:
	shr	rdx, 4
	cmp	rdx, rsi
	jbe	.LBB20_5
# %bb.4:
	mov	rax, qword ptr [rax + 8]
	shl	rsi, 5
	movaps	xmm0, xmmword ptr [rax + rsi]
	movaps	xmmword ptr [rsp], xmm0
	movzx	ecx, byte ptr [rax + rsi + 16]
.LBB20_5:
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmmword ptr [rsp + 32], xmm0
	mov	byte ptr [rsp + 48], cl
	movzx	edx, cl
	lea	rdi, [rsp + 32]
	lea	rsi, [rsp + 24]
	call	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 64]
	jne	.LBB20_7
# %bb.6:
	add	rsp, 72
	.cfi_def_cfa_offset 8
	ret
.LBB20_7:
	.cfi_def_cfa_offset 80
	call	__stack_chk_fail@PLT
.Lfunc_end20:
	.size	_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEm, .Lfunc_end20-_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEm
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8__format7__writeINS_10_Sink_iterIcEEcQ15output_iteratorIT_RKT0_EEES3_S3_St17basic_string_viewIS4_St11char_traitsIS4_EE,"axG",@progbits,_ZNSt8__format7__writeINS_10_Sink_iterIcEEcQ15output_iteratorIT_RKT0_EEES3_S3_St17basic_string_viewIS4_St11char_traitsIS4_EE,comdat
	.weak	_ZNSt8__format7__writeINS_10_Sink_iterIcEEcQ15output_iteratorIT_RKT0_EEES3_S3_St17basic_string_viewIS4_St11char_traitsIS4_EE # -- Begin function _ZNSt8__format7__writeINS_10_Sink_iterIcEEcQ15output_iteratorIT_RKT0_EEES3_S3_St17basic_string_viewIS4_St11char_traitsIS4_EE
	.p2align	4, 0x90
	.type	_ZNSt8__format7__writeINS_10_Sink_iterIcEEcQ15output_iteratorIT_RKT0_EEES3_S3_St17basic_string_viewIS4_St11char_traitsIS4_EE,@function
_ZNSt8__format7__writeINS_10_Sink_iterIcEEcQ15output_iteratorIT_RKT0_EEES3_S3_St17basic_string_viewIS4_St11char_traitsIS4_EE: # @_ZNSt8__format7__writeINS_10_Sink_iterIcEEcQ15output_iteratorIT_RKT0_EEES3_S3_St17basic_string_viewIS4_St11char_traitsIS4_EE
	.cfi_startproc
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	r12
	.cfi_def_cfa_offset 32
	push	rbx
	.cfi_def_cfa_offset 40
	push	rax
	.cfi_def_cfa_offset 48
	.cfi_offset rbx, -40
	.cfi_offset r12, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	rbx, rdi
	test	rsi, rsi
	je	.LBB21_7
# %bb.1:
	mov	r15, rdx
	mov	r14, rsi
	mov	r12, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	sub	r12, rdi
	add	r12, qword ptr [rbx + 16]
	cmp	r12, rsi
	jbe	.LBB21_2
	jmp	.LBB21_6
	.p2align	4, 0x90
.LBB21_4:                               #   in Loop: Header=BB21_2 Depth=1
	add	rdi, r12
	mov	qword ptr [rbx + 24], rdi
	add	r15, r12
	sub	r14, r12
	mov	rax, qword ptr [rbx]
	mov	rdi, rbx
	call	qword ptr [rax]
	mov	r12, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	sub	r12, rdi
	add	r12, qword ptr [rbx + 16]
	cmp	r12, r14
	ja	.LBB21_5
.LBB21_2:                               # =>This Inner Loop Header: Depth=1
	test	r12, r12
	je	.LBB21_4
# %bb.3:                                #   in Loop: Header=BB21_2 Depth=1
	mov	rsi, r15
	mov	rdx, r12
	call	memcpy@PLT
	mov	rdi, qword ptr [rbx + 24]
	jmp	.LBB21_4
.LBB21_5:
	test	r14, r14
	je	.LBB21_7
.LBB21_6:
	mov	rsi, r15
	mov	rdx, r14
	call	memcpy@PLT
	add	qword ptr [rbx + 24], r14
.LBB21_7:
	mov	rax, rbx
	add	rsp, 8
	.cfi_def_cfa_offset 40
	pop	rbx
	.cfi_def_cfa_offset 32
	pop	r12
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.Lfunc_end21:
	.size	_ZNSt8__format7__writeINS_10_Sink_iterIcEEcQ15output_iteratorIT_RKT0_EEES3_S3_St17basic_string_viewIS4_St11char_traitsIS4_EE, .Lfunc_end21-_ZNSt8__format7__writeINS_10_Sink_iterIcEEcQ15output_iteratorIT_RKT0_EEES3_S3_St17basic_string_viewIS4_St11char_traitsIS4_EE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE,"axG",@progbits,_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE,comdat
	.weak	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE # -- Begin function _ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE
	.p2align	4, 0x90
	.type	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE,@function
_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE: # @_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE
	.cfi_startproc
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	rbx
	.cfi_def_cfa_offset 32
	sub	rsp, 64
	.cfi_def_cfa_offset 96
	.cfi_offset rbx, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	rbx, rdi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 56], rax
	mov	eax, edx
	lea	rcx, [rip + .LJTI22_0]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB22_3:
	mov	r14, qword ptr [rsi]
	mov	qword ptr [rsp + 32], 0
	mov	dword ptr [rsp + 40], 32
	lea	rsi, [r14 + 8]
	lea	rdi, [rsp + 32]
	xor	edx, edx
	call	_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE
	mov	ecx, dword ptr [rsp + 32]
	test	ecx, 30720
	jne	.LBB22_7
# %bb.4:
	and	ecx, 92
	jne	.LBB22_5
.LBB22_7:
	mov	qword ptr [r14 + 8], rax
	mov	r14, qword ptr [r14 + 48]
	movzx	esi, byte ptr [rbx]
	lea	rdi, [rsp + 32]
	mov	rdx, r14
	call	_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_
	mov	qword ptr [r14 + 16], rax
	jmp	.LBB22_43
.LBB22_40:
	mov	r15, qword ptr [rsi]
	mov	qword ptr [rsp + 32], 0
	mov	dword ptr [rsp + 40], 32
	lea	rsi, [r15 + 8]
	lea	r14, [rsp + 32]
	mov	rdi, r14
	mov	edx, 1
	call	_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE
	mov	qword ptr [r15 + 8], rax
	mov	r15, qword ptr [r15 + 48]
	mov	rsi, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rdi, r14
	mov	rcx, r15
	call	_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	jmp	.LBB22_42
.LBB22_38:
	mov	rdi, qword ptr [rsi]
	mov	rsi, qword ptr [rdi + 48]
	mov	rdx, qword ptr [rbx]
	mov	rax, qword ptr [rbx + 8]
	mov	rcx, qword ptr fs:[40]
	cmp	rcx, qword ptr [rsp + 56]
	jne	.LBB22_45
# %bb.39:
	add	rdi, 8
	add	rsp, 64
	.cfi_def_cfa_offset 32
	pop	rbx
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	jmp	rax                             # TAILCALL
.LBB22_20:
	.cfi_def_cfa_offset 96
	mov	r15, qword ptr [rsi]
	mov	qword ptr [rsp + 32], 0
	mov	dword ptr [rsp + 40], 32
	lea	rsi, [r15 + 8]
	lea	r14, [rsp + 32]
	mov	rdi, r14
	mov	edx, 1
	call	_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE
	mov	qword ptr [r15 + 8], rax
	mov	r15, qword ptr [r15 + 48]
	mov	esi, dword ptr [rbx]
	mov	rdi, r14
	mov	rdx, r15
	call	_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	jmp	.LBB22_42
.LBB22_25:
	mov	r15, qword ptr [rsi]
	mov	qword ptr [rsp + 32], 0
	mov	dword ptr [rsp + 40], 32
	lea	rsi, [r15 + 8]
	lea	r14, [rsp + 32]
	mov	rdi, r14
	call	_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE
	mov	qword ptr [r15 + 8], rax
	mov	r15, qword ptr [r15 + 48]
	fld	tbyte ptr [rbx]
	fstp	tbyte ptr [rsp]
	mov	rdi, r14
	mov	rsi, r15
	call	_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	jmp	.LBB22_42
.LBB22_24:
	mov	r15, qword ptr [rsi]
	mov	qword ptr [rsp + 32], 0
	mov	dword ptr [rsp + 40], 32
	lea	rsi, [r15 + 8]
	lea	r14, [rsp + 32]
	mov	rdi, r14
	call	_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE
	mov	qword ptr [r15 + 8], rax
	mov	r15, qword ptr [r15 + 48]
	movsd	xmm0, qword ptr [rbx]           # xmm0 = mem[0],zero
	mov	rdi, r14
	mov	rsi, r15
	call	_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	jmp	.LBB22_42
.LBB22_8:
	mov	r14, qword ptr [rsi]
	mov	qword ptr [rsp + 32], 0
	mov	dword ptr [rsp + 40], 32
	lea	rsi, [r14 + 8]
	lea	rdi, [rsp + 32]
	mov	edx, 7
	call	_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE
	mov	edx, dword ptr [rsp + 32]
	mov	ecx, edx
	shr	ecx, 11
	and	ecx, 15
	mov	esi, ecx
	or	esi, 8
	cmp	esi, 15
	jne	.LBB22_12
# %bb.9:
	test	dl, 92
	jne	.LBB22_10
.LBB22_12:
	mov	qword ptr [r14 + 8], rax
	mov	r14, qword ptr [r14 + 48]
	movzx	eax, byte ptr [rbx]
	test	ecx, ecx
	je	.LBB22_15
# %bb.13:
	cmp	ecx, 15
	je	.LBB22_17
# %bb.14:
	cmp	ecx, 7
	jne	.LBB22_18
.LBB22_15:
	mov	byte ptr [rsp + 16], al
	lea	rsi, [rsp + 16]
	lea	r8, [rsp + 32]
	mov	edi, 1
	mov	edx, 1
	mov	rcx, r14
	mov	r9d, 1
	jmp	.LBB22_16
.LBB22_19:
	mov	r15, qword ptr [rsi]
	mov	qword ptr [rsp + 32], 0
	mov	dword ptr [rsp + 40], 32
	lea	rsi, [r15 + 8]
	lea	r14, [rsp + 32]
	mov	rdi, r14
	mov	edx, 1
	call	_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE
	mov	qword ptr [r15 + 8], rax
	mov	r15, qword ptr [r15 + 48]
	mov	esi, dword ptr [rbx]
	mov	rdi, r14
	mov	rdx, r15
	call	_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	jmp	.LBB22_42
.LBB22_22:
	mov	r15, qword ptr [rsi]
	mov	qword ptr [rsp + 32], 0
	mov	dword ptr [rsp + 40], 32
	lea	rsi, [r15 + 8]
	lea	r14, [rsp + 32]
	mov	rdi, r14
	mov	edx, 1
	call	_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE
	mov	qword ptr [r15 + 8], rax
	mov	r15, qword ptr [r15 + 48]
	mov	rsi, qword ptr [rbx]
	mov	rdi, r14
	mov	rdx, r15
	call	_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	jmp	.LBB22_42
.LBB22_21:
	mov	r15, qword ptr [rsi]
	mov	qword ptr [rsp + 32], 0
	mov	dword ptr [rsp + 40], 32
	lea	rsi, [r15 + 8]
	lea	r14, [rsp + 32]
	mov	rdi, r14
	mov	edx, 1
	call	_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE
	mov	qword ptr [r15 + 8], rax
	mov	r15, qword ptr [r15 + 48]
	mov	rsi, qword ptr [rbx]
	mov	rdi, r14
	mov	rdx, r15
	call	_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	jmp	.LBB22_42
.LBB22_27:
	mov	r15, qword ptr [rsi]
	mov	qword ptr [rsp + 32], 0
	mov	dword ptr [rsp + 40], 32
	lea	rsi, [r15 + 8]
	lea	r14, [rsp + 32]
	mov	rdi, r14
	call	_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE
	mov	qword ptr [r15 + 8], rax
	mov	r15, qword ptr [r15 + 48]
	mov	rsi, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rdi, r14
	jmp	.LBB22_28
.LBB22_23:
	mov	r15, qword ptr [rsi]
	mov	qword ptr [rsp + 32], 0
	mov	dword ptr [rsp + 40], 32
	lea	rsi, [r15 + 8]
	lea	r14, [rsp + 32]
	mov	rdi, r14
	call	_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE
	mov	qword ptr [r15 + 8], rax
	mov	r15, qword ptr [r15 + 48]
	movss	xmm0, dword ptr [rbx]           # xmm0 = mem[0],zero,zero,zero
	mov	rdi, r14
	mov	rsi, r15
	call	_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	jmp	.LBB22_42
.LBB22_26:
	mov	r15, qword ptr [rsi]
	mov	qword ptr [rsp + 32], 0
	mov	dword ptr [rsp + 40], 32
	lea	rsi, [r15 + 8]
	lea	r14, [rsp + 32]
	mov	rdi, r14
	call	_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE
	mov	qword ptr [r15 + 8], rax
	mov	r15, qword ptr [r15 + 48]
	mov	rbx, qword ptr [rbx]
	mov	rdi, rbx
	call	strlen@PLT
	mov	rdi, r14
	mov	rsi, rax
	mov	rdx, rbx
.LBB22_28:
	mov	rcx, r15
	call	_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE
	jmp	.LBB22_42
.LBB22_29:
	mov	r14, qword ptr [rsi]
	mov	qword ptr [rsp + 16], 0
	mov	dword ptr [rsp + 24], 32
	lea	rsi, [r14 + 8]
	lea	rdi, [rsp + 16]
	call	_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE
	mov	qword ptr [r14 + 8], rax
	mov	r14, qword ptr [r14 + 48]
	mov	rdx, qword ptr [rbx]
	lea	rax, [rsp + 34]
	test	rdx, rdx
	je	.LBB22_30
# %bb.31:
	bsr	rcx, rdx
	xor	ecx, -64
	add	ecx, 68
	shr	ecx, 2
	lea	rsi, [rip + .L__const._ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_.__digits]
	cmp	rdx, 256
	jb	.LBB22_34
# %bb.32:
	lea	edi, [rcx - 2]
	mov	r8, rdx
	.p2align	4, 0x90
.LBB22_33:                              # =>This Inner Loop Header: Depth=1
	lea	r9d, [rdi + 1]
	mov	r10d, r8d
	and	r10d, 15
	mov	r11d, r8d
	shr	r11d, 4
	movzx	r10d, byte ptr [r10 + rsi]
	mov	byte ptr [rsp + r9 + 34], r10b
	and	r11d, 15
	shr	rdx, 8
	movzx	r9d, byte ptr [r11 + rsi]
	mov	r10d, edi
	mov	byte ptr [rsp + r10 + 34], r9b
	add	edi, -2
	cmp	r8, 65535
	mov	r8, rdx
	ja	.LBB22_33
.LBB22_34:
	cmp	rdx, 16
	jb	.LBB22_36
# %bb.35:
	mov	edi, edx
	and	edi, 15
	shr	rdx, 4
	movzx	edi, byte ptr [rdi + rsi]
	mov	byte ptr [rsp + 35], dil
.LBB22_36:
	movzx	edx, byte ptr [rdx + rsi]
	jmp	.LBB22_37
.LBB22_41:
	mov	r15, qword ptr [rsi]
	mov	qword ptr [rsp + 32], 0
	mov	dword ptr [rsp + 40], 32
	lea	rsi, [r15 + 8]
	lea	r14, [rsp + 32]
	mov	rdi, r14
	mov	edx, 1
	call	_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE
	mov	qword ptr [r15 + 8], rax
	mov	r15, qword ptr [r15 + 48]
	mov	rsi, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rdi, r14
	mov	rcx, r15
	call	_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
.LBB22_42:
	mov	qword ptr [r15 + 16], rax
.LBB22_43:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 56]
	jne	.LBB22_45
# %bb.44:
	add	rsp, 64
	.cfi_def_cfa_offset 32
	pop	rbx
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.LBB22_30:
	.cfi_def_cfa_offset 96
	mov	ecx, 1
	mov	dl, 48
.LBB22_37:
	mov	byte ptr [rsp + 34], dl
	add	eax, ecx
	lea	rsi, [rsp + 32]
	sub	eax, esi
	mov	word ptr [rsp + 32], 30768
	movsxd	rdi, eax
	lea	r8, [rsp + 16]
	mov	rdx, rdi
	mov	rcx, r14
	mov	r9d, 2
.LBB22_16:
	call	_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE
	mov	qword ptr [r14 + 16], rax
	jmp	.LBB22_43
.LBB22_17:
	mov	rax, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], rax
	jmp	.LBB22_43
.LBB22_18:
	movzx	esi, al
	lea	rdi, [rsp + 32]
	mov	rdx, r14
	call	_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	mov	qword ptr [r14 + 16], rax
	jmp	.LBB22_43
.LBB22_1:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 56]
	jne	.LBB22_45
# %bb.2:
	call	_ZNSt8__format33__invalid_arg_id_in_format_stringEv
.LBB22_5:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 56]
	jne	.LBB22_45
# %bb.6:
	lea	rdi, [rip + .L.str.14]
	call	_ZSt20__throw_format_errorPKc
.LBB22_10:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 56]
	jne	.LBB22_45
# %bb.11:
	lea	rdi, [rip + .L.str.30]
	call	_ZSt20__throw_format_errorPKc
.LBB22_45:
	call	__stack_chk_fail@PLT
.Lfunc_end22:
	.size	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE, .Lfunc_end22-_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE
	.cfi_endproc
	.section	.rodata._ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE,"aG",@progbits,_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE,comdat
	.p2align	2, 0x0
.LJTI22_0:
	.long	.LBB22_1-.LJTI22_0
	.long	.LBB22_3-.LJTI22_0
	.long	.LBB22_8-.LJTI22_0
	.long	.LBB22_19-.LJTI22_0
	.long	.LBB22_20-.LJTI22_0
	.long	.LBB22_21-.LJTI22_0
	.long	.LBB22_22-.LJTI22_0
	.long	.LBB22_23-.LJTI22_0
	.long	.LBB22_24-.LJTI22_0
	.long	.LBB22_25-.LJTI22_0
	.long	.LBB22_26-.LJTI22_0
	.long	.LBB22_27-.LJTI22_0
	.long	.LBB22_29-.LJTI22_0
	.long	.LBB22_38-.LJTI22_0
	.long	.LBB22_40-.LJTI22_0
	.long	.LBB22_41-.LJTI22_0
                                        # -- End function
	.section	.text._ZNSt8__format33__invalid_arg_id_in_format_stringEv,"axG",@progbits,_ZNSt8__format33__invalid_arg_id_in_format_stringEv,comdat
	.weak	_ZNSt8__format33__invalid_arg_id_in_format_stringEv # -- Begin function _ZNSt8__format33__invalid_arg_id_in_format_stringEv
	.p2align	4, 0x90
	.type	_ZNSt8__format33__invalid_arg_id_in_format_stringEv,@function
_ZNSt8__format33__invalid_arg_id_in_format_stringEv: # @_ZNSt8__format33__invalid_arg_id_in_format_stringEv
	.cfi_startproc
# %bb.0:
	push	rax
	.cfi_def_cfa_offset 16
	lea	rdi, [rip + .L.str.13]
	call	_ZSt20__throw_format_errorPKc
.Lfunc_end23:
	.size	_ZNSt8__format33__invalid_arg_id_in_format_stringEv, .Lfunc_end23-_ZNSt8__format33__invalid_arg_id_in_format_stringEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZSt20__throw_format_errorPKc,"axG",@progbits,_ZSt20__throw_format_errorPKc,comdat
	.weak	_ZSt20__throw_format_errorPKc   # -- Begin function _ZSt20__throw_format_errorPKc
	.p2align	4, 0x90
	.type	_ZSt20__throw_format_errorPKc,@function
_ZSt20__throw_format_errorPKc:          # @_ZSt20__throw_format_errorPKc
.Lfunc_begin7:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception7
# %bb.0:
	push	r14
	.cfi_def_cfa_offset 16
	push	rbx
	.cfi_def_cfa_offset 24
	push	rax
	.cfi_def_cfa_offset 32
	.cfi_offset rbx, -24
	.cfi_offset r14, -16
	mov	r14, rdi
	mov	edi, 16
	call	__cxa_allocate_exception@PLT
	mov	rbx, rax
.Ltmp41:
	mov	rdi, rax
	mov	rsi, r14
	call	_ZNSt12format_errorC2EPKc
.Ltmp42:
# %bb.1:
	lea	rsi, [rip + _ZTISt12format_error]
	mov	rdx, qword ptr [rip + _ZNSt13runtime_errorD2Ev@GOTPCREL]
	mov	rdi, rbx
	call	__cxa_throw@PLT
.LBB24_2:
.Ltmp43:
	mov	r14, rax
	mov	rdi, rbx
	call	__cxa_free_exception@PLT
	mov	rdi, r14
	call	_Unwind_Resume@PLT
.Lfunc_end24:
	.size	_ZSt20__throw_format_errorPKc, .Lfunc_end24-_ZSt20__throw_format_errorPKc
	.cfi_endproc
	.section	.gcc_except_table._ZSt20__throw_format_errorPKc,"aG",@progbits,_ZSt20__throw_format_errorPKc,comdat
	.p2align	2, 0x0
GCC_except_table24:
.Lexception7:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end7-.Lcst_begin7
.Lcst_begin7:
	.uleb128 .Lfunc_begin7-.Lfunc_begin7    # >> Call Site 1 <<
	.uleb128 .Ltmp41-.Lfunc_begin7          #   Call between .Lfunc_begin7 and .Ltmp41
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp41-.Lfunc_begin7          # >> Call Site 2 <<
	.uleb128 .Ltmp42-.Ltmp41                #   Call between .Ltmp41 and .Ltmp42
	.uleb128 .Ltmp43-.Lfunc_begin7          #     jumps to .Ltmp43
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp42-.Lfunc_begin7          # >> Call Site 3 <<
	.uleb128 .Lfunc_end24-.Ltmp42           #   Call between .Ltmp42 and .Lfunc_end24
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end7:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZNSt12format_errorC2EPKc,"axG",@progbits,_ZNSt12format_errorC2EPKc,comdat
	.weak	_ZNSt12format_errorC2EPKc       # -- Begin function _ZNSt12format_errorC2EPKc
	.p2align	4, 0x90
	.type	_ZNSt12format_errorC2EPKc,@function
_ZNSt12format_errorC2EPKc:              # @_ZNSt12format_errorC2EPKc
	.cfi_startproc
# %bb.0:
	push	rbx
	.cfi_def_cfa_offset 16
	.cfi_offset rbx, -16
	mov	rbx, rdi
	call	_ZNSt13runtime_errorC2EPKc@PLT
	lea	rax, [rip + _ZTVSt12format_error+16]
	mov	qword ptr [rbx], rax
	pop	rbx
	.cfi_def_cfa_offset 8
	ret
.Lfunc_end25:
	.size	_ZNSt12format_errorC2EPKc, .Lfunc_end25-_ZNSt12format_errorC2EPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt12format_errorD0Ev,"axG",@progbits,_ZNSt12format_errorD0Ev,comdat
	.weak	_ZNSt12format_errorD0Ev         # -- Begin function _ZNSt12format_errorD0Ev
	.p2align	4, 0x90
	.type	_ZNSt12format_errorD0Ev,@function
_ZNSt12format_errorD0Ev:                # @_ZNSt12format_errorD0Ev
	.cfi_startproc
# %bb.0:
	push	rbx
	.cfi_def_cfa_offset 16
	.cfi_offset rbx, -16
	mov	rbx, rdi
	call	_ZNSt13runtime_errorD2Ev@PLT
	mov	rdi, rbx
	pop	rbx
	.cfi_def_cfa_offset 8
	jmp	_ZdlPv@PLT                      # TAILCALL
.Lfunc_end26:
	.size	_ZNSt12format_errorD0Ev, .Lfunc_end26-_ZNSt12format_errorD0Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE,"axG",@progbits,_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE,comdat
	.weak	_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE # -- Begin function _ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE
	.p2align	4, 0x90
	.type	_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE,@function
_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE: # @_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	rbx
	.cfi_def_cfa_offset 40
	sub	rsp, 24
	.cfi_def_cfa_offset 64
	.cfi_offset rbx, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 16], rax
	movabs	rax, 137438953472
	mov	qword ptr [rsp + 4], rax
	mov	eax, edx
	and	eax, 15
	shl	eax, 11
	mov	dword ptr [rsp], eax
	mov	rax, qword ptr [rsi]
	mov	rbx, qword ptr [rsi + 8]
	cmp	rax, rbx
	je	.LBB27_46
# %bb.1:
	cmp	byte ptr [rax], 125
	je	.LBB27_46
# %bb.2:
	mov	r14, rsi
	mov	ebp, edx
	mov	r15, rdi
	mov	rdi, rsp
	mov	rsi, rax
	mov	rdx, rbx
	call	_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_
	cmp	rax, rbx
	je	.LBB27_6
# %bb.3:
	movzx	edx, byte ptr [rax]
	cmp	edx, 44
	mov	rdi, r15
	jg	.LBB27_7
# %bb.4:
	cmp	edx, 32
	je	.LBB27_10
# %bb.5:
	mov	ecx, 4
	cmp	edx, 43
	je	.LBB27_11
	jmp	.LBB27_12
.LBB27_6:
	mov	rdi, r15
	jmp	.LBB27_46
.LBB27_7:
	cmp	edx, 125
	je	.LBB27_46
# %bb.8:
	cmp	edx, 45
	jne	.LBB27_12
# %bb.9:
	mov	ecx, 8
	jmp	.LBB27_11
.LBB27_10:
	mov	ecx, 12
.LBB27_11:
	mov	edx, dword ptr [rsp]
	and	edx, -13
	or	edx, ecx
	mov	dword ptr [rsp], edx
	inc	rax
.LBB27_12:
	cmp	rax, rbx
	je	.LBB27_46
# %bb.13:
	movzx	ecx, byte ptr [rax]
	cmp	ecx, 125
	je	.LBB27_46
# %bb.14:
	cmp	ecx, 35
	jne	.LBB27_16
# %bb.15:
	or	byte ptr [rsp], 16
	inc	rax
.LBB27_16:
	cmp	rax, rbx
	je	.LBB27_46
# %bb.17:
	movzx	ecx, byte ptr [rax]
	cmp	ecx, 125
	je	.LBB27_46
# %bb.18:
	cmp	ecx, 48
	jne	.LBB27_20
# %bb.19:
	or	byte ptr [rsp], 64
	inc	rax
.LBB27_20:
	cmp	rax, rbx
	je	.LBB27_46
# %bb.21:
	cmp	byte ptr [rax], 125
	je	.LBB27_46
# %bb.22:
	mov	byte ptr [rsp + 15], 0
	cmp	byte ptr [rax], 48
	je	.LBB27_48
# %bb.23:
	lea	rdx, [rsp + 4]
	lea	rcx, [rsp + 15]
	mov	rdi, rax
	mov	rsi, rbx
	mov	r8, r14
	mov	r14, rax
	call	_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE
	cmp	rax, r14
	je	.LBB27_25
# %bb.24:
	movzx	ecx, byte ptr [rsp + 15]
	shl	ecx, 7
	mov	edx, -385
	and	edx, dword ptr [rsp]
	add	ecx, edx
	add	ecx, 128
	mov	dword ptr [rsp], ecx
.LBB27_25:
	cmp	rax, rbx
	mov	rdi, r15
	je	.LBB27_46
# %bb.26:
	movzx	ecx, byte ptr [rax]
	cmp	ecx, 125
	je	.LBB27_46
# %bb.27:
	cmp	ecx, 76
	jne	.LBB27_29
# %bb.28:
	or	byte ptr [rsp], 32
	inc	rax
.LBB27_29:
	cmp	rax, rbx
	je	.LBB27_46
# %bb.30:
	movzx	ecx, byte ptr [rax]
	add	ecx, -66
	cmp	ecx, 59
	ja	.LBB27_44
# %bb.31:
	lea	rdx, [rip + .LJTI27_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB27_32:
	mov	ecx, -30721
	and	ecx, dword ptr [rsp]
	or	ecx, 6144
	jmp	.LBB27_42
.LBB27_33:
	mov	ecx, -30721
	and	ecx, dword ptr [rsp]
	or	ecx, 12288
	jmp	.LBB27_42
.LBB27_34:
	mov	ecx, -30721
	and	ecx, dword ptr [rsp]
	or	ecx, 2048
	jmp	.LBB27_42
.LBB27_35:
	mov	ecx, -30721
	and	ecx, dword ptr [rsp]
	or	ecx, 8192
	jmp	.LBB27_42
.LBB27_36:
	test	ebp, ebp
	jne	.LBB27_44
# %bb.37:
	and	byte ptr [rsp + 1], -121
	jmp	.LBB27_43
.LBB27_38:
	mov	ecx, -30721
	and	ecx, dword ptr [rsp]
	or	ecx, 4096
	jmp	.LBB27_42
.LBB27_39:
	test	ebp, ebp
	je	.LBB27_44
# %bb.40:
	mov	ecx, -30721
	and	ecx, dword ptr [rsp]
	or	ecx, 14336
	jmp	.LBB27_42
.LBB27_41:
	mov	ecx, -30721
	and	ecx, dword ptr [rsp]
	or	ecx, 10240
.LBB27_42:
	mov	dword ptr [rsp], ecx
.LBB27_43:
	inc	rax
.LBB27_44:
	cmp	rax, rbx
	je	.LBB27_46
# %bb.45:
	cmp	byte ptr [rax], 125
	jne	.LBB27_50
.LBB27_46:
	mov	ecx, dword ptr [rsp + 8]
	mov	dword ptr [rdi + 8], ecx
	mov	rcx, qword ptr [rsp]
	mov	qword ptr [rdi], rcx
	mov	rcx, qword ptr fs:[40]
	cmp	rcx, qword ptr [rsp + 16]
	jne	.LBB27_52
# %bb.47:
	add	rsp, 24
	.cfi_def_cfa_offset 40
	pop	rbx
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB27_48:
	.cfi_def_cfa_offset 64
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 16]
	jne	.LBB27_52
# %bb.49:
	lea	rdi, [rip + .L.str.15]
	call	_ZSt20__throw_format_errorPKc
.LBB27_50:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 16]
	jne	.LBB27_52
# %bb.51:
	call	_ZNSt8__format29__failed_to_parse_format_specEv
.LBB27_52:
	call	__stack_chk_fail@PLT
.Lfunc_end27:
	.size	_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE, .Lfunc_end27-_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE
	.cfi_endproc
	.section	.rodata._ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE,"aG",@progbits,_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE,comdat
	.p2align	2, 0x0
.LJTI27_0:
	.long	.LBB27_32-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_33-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_38-.LJTI27_0
	.long	.LBB27_39-.LJTI27_0
	.long	.LBB27_34-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_35-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_36-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_41-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_44-.LJTI27_0
	.long	.LBB27_46-.LJTI27_0
                                        # -- End function
	.section	.text._ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_,"axG",@progbits,_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_,comdat
	.weak	_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_ # -- Begin function _ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_
	.p2align	4, 0x90
	.type	_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_,@function
_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_: # @_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_
.Lfunc_begin8:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception8
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	rbx
	.cfi_def_cfa_offset 32
	sub	rsp, 96
	.cfi_def_cfa_offset 128
	.cfi_offset rbx, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 88], rax
	movzx	eax, byte ptr [rsi]
	cmp	al, 123
	je	.LBB28_29
# %bb.1:
	cmp	rsi, rdx
	je	.LBB28_22
# %bb.2:
	mov	r14, rdi
	mov	qword ptr [rsp + 56], rsi
	mov	r15, rsi
	mov	qword ptr [rsp + 64], rsi
	mov	word ptr [rsp + 72], 0
	mov	byte ptr [rsp + 74], 0
	mov	rbx, rdx
	mov	qword ptr [rsp + 80], rdx
.Ltmp44:
	lea	rdi, [rsp + 48]
	call	_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev
.Ltmp45:
# %bb.3:
	mov	rax, qword ptr [rsp + 80]
	mov	qword ptr [rsp + 32], rax
	movups	xmm0, xmmword ptr [rsp + 48]
	movups	xmm1, xmmword ptr [rsp + 64]
	movaps	xmmword ptr [rsp + 16], xmm1
	movaps	xmmword ptr [rsp], xmm0
	movzx	eax, byte ptr [rsp + 72]
	lea	ecx, [rax + 1]
	movzx	edx, byte ptr [rsp + 73]
	cmp	ecx, edx
	jne	.LBB28_8
# %bb.4:
	mov	rsi, qword ptr [rsp + 64]
	mov	rdi, qword ptr [rsp + 80]
	cmp	rsi, rdi
	je	.LBB28_8
# %bb.5:
	movzx	eax, byte ptr [rsp + 74]
	add	rsi, rax
	mov	qword ptr [rsp + 64], rsi
	cmp	rsi, rdi
	je	.LBB28_6
# %bb.7:
.Ltmp46:
	lea	rdi, [rsp + 48]
	call	_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev
.Ltmp47:
	jmp	.LBB28_11
.LBB28_8:
	cmp	ecx, edx
	jae	.LBB28_11
# %bb.9:
	inc	al
	jmp	.LBB28_10
.LBB28_6:
	xor	eax, eax
.LBB28_10:
	mov	byte ptr [rsp + 72], al
.LBB28_11:
	movzx	eax, byte ptr [rsp + 24]
	mov	eax, dword ptr [rsp + 4*rax]
	cmp	eax, 55296
	mov	rdi, r14
	mov	rsi, r15
	jae	.LBB28_12
.LBB28_13:
	mov	rcx, qword ptr [rsp + 64]
	cmp	rcx, rbx
	je	.LBB28_21
# %bb.14:
	movzx	edx, byte ptr [rcx]
	cmp	edx, 60
	je	.LBB28_15
# %bb.16:
	cmp	edx, 94
	je	.LBB28_19
# %bb.17:
	cmp	edx, 62
	jne	.LBB28_21
# %bb.18:
	mov	edx, 2
	jmp	.LBB28_20
.LBB28_19:
	mov	edx, 3
	jmp	.LBB28_20
.LBB28_15:
	mov	edx, 1
.LBB28_20:
	mov	dword ptr [rdi + 8], eax
	mov	eax, dword ptr [rdi]
	and	eax, -4
	or	eax, edx
	mov	dword ptr [rdi], eax
	inc	rcx
	mov	rsi, rcx
	jmp	.LBB28_29
.LBB28_12:
	lea	ecx, [rax - 57344]
	cmp	ecx, 1056767
	jbe	.LBB28_13
.LBB28_21:
	movzx	eax, byte ptr [rsi]
.LBB28_22:
	cmp	al, 60
	je	.LBB28_23
# %bb.24:
	movzx	eax, al
	cmp	eax, 94
	je	.LBB28_27
# %bb.25:
	cmp	eax, 62
	jne	.LBB28_29
# %bb.26:
	mov	eax, 2
	jmp	.LBB28_28
.LBB28_27:
	mov	eax, 3
	jmp	.LBB28_28
.LBB28_23:
	mov	eax, 1
.LBB28_28:
	mov	dword ptr [rdi + 8], 32
	mov	ecx, dword ptr [rdi]
	and	ecx, -4
	or	ecx, eax
	mov	dword ptr [rdi], ecx
	inc	rsi
.LBB28_29:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 88]
	jne	.LBB28_32
# %bb.30:
	mov	rax, rsi
	add	rsp, 96
	.cfi_def_cfa_offset 32
	pop	rbx
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.LBB28_32:
	.cfi_def_cfa_offset 128
	call	__stack_chk_fail@PLT
.LBB28_31:
.Ltmp48:
	mov	rdi, rax
	call	__clang_call_terminate
.Lfunc_end28:
	.size	_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_, .Lfunc_end28-_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_
	.cfi_endproc
	.section	.gcc_except_table._ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_,"aG",@progbits,_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_,comdat
	.p2align	2, 0x0
GCC_except_table28:
.Lexception8:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase1-.Lttbaseref1
.Lttbaseref1:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end8-.Lcst_begin8
.Lcst_begin8:
	.uleb128 .Ltmp44-.Lfunc_begin8          # >> Call Site 1 <<
	.uleb128 .Ltmp47-.Ltmp44                #   Call between .Ltmp44 and .Ltmp47
	.uleb128 .Ltmp48-.Lfunc_begin8          #     jumps to .Ltmp48
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp47-.Lfunc_begin8          # >> Call Site 2 <<
	.uleb128 .Lfunc_end28-.Ltmp47           #   Call between .Ltmp47 and .Lfunc_end28
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end8:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.long	0                               # TypeInfo 1
.Lttbase1:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE,"axG",@progbits,_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE,comdat
	.weak	_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE # -- Begin function _ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE
	.p2align	4, 0x90
	.type	_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE,@function
_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE: # @_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE
	.cfi_startproc
# %bb.0:
	push	r14
	.cfi_def_cfa_offset 16
	push	rbx
	.cfi_def_cfa_offset 24
	sub	rsp, 24
	.cfi_def_cfa_offset 48
	.cfi_offset rbx, -24
	.cfi_offset r14, -16
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 16], rax
	mov	byte ptr [rsp + 15], 0
	cmp	byte ptr [rsi], 48
	je	.LBB29_1
# %bb.3:
	mov	r8, rcx
	mov	r14, rsi
	mov	rbx, rdi
	lea	rax, [rdi + 4]
	lea	rcx, [rsp + 15]
	mov	rdi, rsi
	mov	rsi, rdx
	mov	rdx, rax
	call	_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE
	cmp	rax, r14
	je	.LBB29_5
# %bb.4:
	movzx	ecx, byte ptr [rsp + 15]
	shl	ecx, 7
	mov	edx, -385
	and	edx, dword ptr [rbx]
	add	ecx, edx
	add	ecx, 128
	mov	dword ptr [rbx], ecx
.LBB29_5:
	mov	rcx, qword ptr fs:[40]
	cmp	rcx, qword ptr [rsp + 16]
	jne	.LBB29_7
# %bb.6:
	add	rsp, 24
	.cfi_def_cfa_offset 24
	pop	rbx
	.cfi_def_cfa_offset 16
	pop	r14
	.cfi_def_cfa_offset 8
	ret
.LBB29_1:
	.cfi_def_cfa_offset 48
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 16]
	jne	.LBB29_7
# %bb.2:
	lea	rdi, [rip + .L.str.15]
	call	_ZSt20__throw_format_errorPKc
.LBB29_7:
	call	__stack_chk_fail@PLT
.Lfunc_end29:
	.size	_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE, .Lfunc_end29-_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8__format29__failed_to_parse_format_specEv,"axG",@progbits,_ZNSt8__format29__failed_to_parse_format_specEv,comdat
	.weak	_ZNSt8__format29__failed_to_parse_format_specEv # -- Begin function _ZNSt8__format29__failed_to_parse_format_specEv
	.p2align	4, 0x90
	.type	_ZNSt8__format29__failed_to_parse_format_specEv,@function
_ZNSt8__format29__failed_to_parse_format_specEv: # @_ZNSt8__format29__failed_to_parse_format_specEv
	.cfi_startproc
# %bb.0:
	push	rax
	.cfi_def_cfa_offset 16
	lea	rdi, [rip + .L.str.19]
	call	_ZSt20__throw_format_errorPKc
.Lfunc_end30:
	.size	_ZNSt8__format29__failed_to_parse_format_specEv, .Lfunc_end30-_ZNSt8__format29__failed_to_parse_format_specEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev,"axG",@progbits,_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev,comdat
	.weak	_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev # -- Begin function _ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev
	.p2align	4, 0x90
	.type	_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev,@function
_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev: # @_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev
	.cfi_startproc
# %bb.0:
	mov	rax, qword ptr [rdi + 16]
	lea	r9, [rax + 1]
	mov	qword ptr [rdi + 16], r9
	movzx	esi, byte ptr [rax]
	mov	cl, 1
	test	sil, sil
	js	.LBB31_2
# %bb.1:
	mov	edx, esi
.LBB31_22:
	mov	byte ptr [rdi + 26], cl
	mov	word ptr [rdi + 24], 256
	mov	dword ptr [rdi], edx
	mov	qword ptr [rdi + 16], rax
	ret
.LBB31_2:
	mov	edx, 65533
	cmp	sil, -62
	jb	.LBB31_22
# %bb.3:
	mov	r8, qword ptr [rdi + 32]
	cmp	r9, r8
	je	.LBB31_22
# %bb.4:
	cmp	sil, -33
	ja	.LBB31_7
# %bb.5:
	movzx	r8d, byte ptr [r9]
	cmp	r8b, -65
	jg	.LBB31_22
# %bb.6:
	and	esi, 31
	shl	esi, 6
	and	r8d, 63
	or	r8d, esi
	mov	cl, 2
	jmp	.LBB31_21
.LBB31_7:
	cmp	sil, -17
	ja	.LBB31_13
# %bb.8:
	xor	r10d, r10d
	cmp	esi, 224
	sete	r10b
	or	r10d, 4
	shl	r10d, 5
	movzx	r9d, byte ptr [r9]
	cmp	r10d, r9d
	ja	.LBB31_22
# %bb.9:
	xor	r10d, r10d
	cmp	esi, 237
	setne	r10b
	shl	r10d, 5
	or	r10d, 159
	cmp	r10d, r9d
	jb	.LBB31_22
# %bb.10:
	lea	r10, [rax + 2]
	mov	qword ptr [rdi + 16], r10
	mov	cl, 2
	cmp	r10, r8
	je	.LBB31_22
# %bb.11:
	movzx	r8d, byte ptr [r10]
	cmp	r8b, -65
	jg	.LBB31_22
# %bb.12:
	and	esi, 15
	shl	esi, 6
	and	r9d, 63
	or	r9d, esi
	shl	r9d, 6
	and	r8d, 63
	or	r8d, r9d
	mov	cl, 3
	jmp	.LBB31_21
.LBB31_13:
	cmp	sil, -12
	ja	.LBB31_22
# %bb.14:
	xor	r10d, r10d
	cmp	esi, 240
	sete	r10b
	or	r10d, 8
	shl	r10d, 4
	movzx	r9d, byte ptr [r9]
	cmp	r10d, r9d
	ja	.LBB31_22
# %bb.15:
	cmp	esi, 244
	mov	r10d, 143
	mov	r11d, 191
	cmove	r11d, r10d
	cmp	r11d, r9d
	jb	.LBB31_22
# %bb.16:
	lea	r10, [rax + 2]
	mov	qword ptr [rdi + 16], r10
	mov	cl, 2
	cmp	r10, r8
	je	.LBB31_22
# %bb.17:
	movzx	r10d, byte ptr [r10]
	cmp	r10b, -65
	jg	.LBB31_22
# %bb.18:
	lea	r11, [rax + 3]
	mov	qword ptr [rdi + 16], r11
	mov	cl, 3
	cmp	r11, r8
	je	.LBB31_22
# %bb.19:
	movzx	r8d, byte ptr [r11]
	cmp	r8b, -65
	jg	.LBB31_22
# %bb.20:
	and	esi, 7
	shl	esi, 6
	and	r9d, 63
	or	r9d, esi
	and	r10d, 63
	shl	r9d, 12
	shl	r10d, 6
	or	r10d, r9d
	and	r8d, 63
	or	r8d, r10d
	mov	cl, 4
.LBB31_21:
	mov	edx, r8d
	jmp	.LBB31_22
.Lfunc_end31:
	.size	_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev, .Lfunc_end31-_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv,"axG",@progbits,_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv,comdat
	.weak	_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv # -- Begin function _ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv
	.p2align	4, 0x90
	.type	_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv,@function
_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv: # @_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv
	.cfi_startproc
# %bb.0:
	mov	rax, rdi
	movzx	ecx, byte ptr [rdi + 24]
	lea	edx, [rcx + 1]
	movzx	esi, byte ptr [rdi + 25]
	cmp	edx, esi
	jne	.LBB32_5
# %bb.1:
	mov	rdi, qword ptr [rax + 16]
	mov	r8, qword ptr [rax + 32]
	cmp	rdi, r8
	je	.LBB32_5
# %bb.2:
	movzx	ecx, byte ptr [rax + 26]
	add	rdi, rcx
	mov	qword ptr [rax + 16], rdi
	cmp	rdi, r8
	je	.LBB32_3
# %bb.4:
	push	rbx
	.cfi_def_cfa_offset 16
	.cfi_offset rbx, -16
	mov	rbx, rax
	mov	rdi, rax
	call	_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev
	mov	rax, rbx
	pop	rbx
	.cfi_def_cfa_offset 8
	.cfi_restore rbx
	ret
.LBB32_5:
	cmp	edx, esi
	jae	.LBB32_7
# %bb.6:
	inc	cl
	mov	byte ptr [rax + 24], cl
.LBB32_7:
	ret
.LBB32_3:
	mov	byte ptr [rax + 24], 0
	ret
.Lfunc_end32:
	.size	_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv, .Lfunc_end32-_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE,"axG",@progbits,_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE,comdat
	.weak	_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE # -- Begin function _ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE
	.p2align	4, 0x90
	.type	_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE,@function
_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE: # @_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE
	.cfi_startproc
# %bb.0:
	push	rax
	.cfi_def_cfa_offset 16
	movzx	eax, byte ptr [rdi]
	lea	r9, [rip + _ZNSt8__detail31__from_chars_alnum_to_val_tableILb0EE5valueE]
	cmp	byte ptr [rax + r9], 9
	ja	.LBB33_12
# %bb.1:
	mov	r8d, 12
	xor	ecx, ecx
	mov	rax, rdi
	.p2align	4, 0x90
.LBB33_2:                               # =>This Inner Loop Header: Depth=1
	movzx	r9d, byte ptr [rax]
	add	r9b, -48
	cmp	r9b, 9
	ja	.LBB33_9
# %bb.3:                                #   in Loop: Header=BB33_2 Depth=1
	movzx	r9d, r9b
	test	r8d, r8d
	js	.LBB33_5
# %bb.4:                                #   in Loop: Header=BB33_2 Depth=1
	add	ecx, ecx
	lea	r10d, [rcx + 4*rcx]
	movzx	ecx, r9w
	add	ecx, r10d
.LBB33_7:                               #   in Loop: Header=BB33_2 Depth=1
	inc	rax
	add	r8d, -4
	cmp	rax, rsi
	jne	.LBB33_2
	jmp	.LBB33_8
.LBB33_5:                               #   in Loop: Header=BB33_2 Depth=1
	movzx	r10d, cx
	cmp	r10d, 6553
	ja	.LBB33_40
# %bb.6:                                #   in Loop: Header=BB33_2 Depth=1
	add	ecx, ecx
	lea	ecx, [rcx + 4*rcx]
	add	cx, r9w
	jae	.LBB33_7
	jmp	.LBB33_40
.LBB33_12:
	cmp	al, 123
	jne	.LBB33_13
# %bb.14:
	mov	byte ptr [rcx], 1
	lea	rax, [rdi + 1]
	cmp	rax, rsi
	je	.LBB33_41
# %bb.15:
	movzx	ecx, byte ptr [rax]
	cmp	ecx, 48
	je	.LBB33_19
# %bb.16:
	cmp	ecx, 125
	jne	.LBB33_20
# %bb.17:
	cmp	dword ptr [r8 + 16], 1
	je	.LBB33_42
# %bb.18:
	mov	dword ptr [r8 + 16], 2
	mov	rcx, qword ptr [r8 + 24]
	lea	rsi, [rcx + 1]
	mov	qword ptr [r8 + 24], rsi
	mov	word ptr [rdx], cx
	inc	rax
	pop	rcx
	.cfi_def_cfa_offset 8
	ret
.LBB33_13:
	.cfi_def_cfa_offset 16
	mov	rax, rdi
	pop	rcx
	.cfi_def_cfa_offset 8
	ret
.LBB33_8:
	.cfi_def_cfa_offset 16
	mov	rax, rsi
.LBB33_9:
	cmp	rax, rdi
	je	.LBB33_40
# %bb.10:
	test	rax, rax
	je	.LBB33_40
# %bb.11:
	mov	word ptr [rdx], cx
	pop	rcx
	.cfi_def_cfa_offset 8
	ret
.LBB33_40:
	.cfi_def_cfa_offset 16
	lea	rdi, [rip + .L.str.16]
	call	_ZSt20__throw_format_errorPKc
.LBB33_19:
	add	rdi, 2
	xor	ecx, ecx
	jmp	.LBB33_33
.LBB33_20:
	lea	r9d, [rcx - 49]
	cmp	r9b, 8
	ja	.LBB33_43
# %bb.21:
	add	rdi, 2
	cmp	rdi, rsi
	je	.LBB33_43
# %bb.22:
	movzx	r9d, byte ptr [rdi]
	add	r9b, -48
	cmp	r9b, 9
	ja	.LBB33_23
# %bb.24:
	mov	r9d, 12
	xor	ecx, ecx
	mov	rdi, rax
	.p2align	4, 0x90
.LBB33_25:                              # =>This Inner Loop Header: Depth=1
	movzx	r10d, byte ptr [rdi]
	add	r10b, -48
	cmp	r10b, 9
	ja	.LBB33_32
# %bb.26:                               #   in Loop: Header=BB33_25 Depth=1
	movzx	r10d, r10b
	test	r9d, r9d
	js	.LBB33_28
# %bb.27:                               #   in Loop: Header=BB33_25 Depth=1
	add	ecx, ecx
	lea	r11d, [rcx + 4*rcx]
	movzx	ecx, r10w
	add	ecx, r11d
.LBB33_30:                              #   in Loop: Header=BB33_25 Depth=1
	inc	rdi
	add	r9d, -4
	cmp	rdi, rsi
	jne	.LBB33_25
	jmp	.LBB33_31
.LBB33_28:                              #   in Loop: Header=BB33_25 Depth=1
	movzx	r11d, cx
	cmp	r11d, 6553
	ja	.LBB33_43
# %bb.29:                               #   in Loop: Header=BB33_25 Depth=1
	add	ecx, ecx
	lea	ecx, [rcx + 4*rcx]
	add	cx, r10w
	jae	.LBB33_30
	jmp	.LBB33_43
.LBB33_23:
	movzx	ecx, cx
	add	ecx, -48
	jmp	.LBB33_33
.LBB33_31:
	mov	rdi, rsi
.LBB33_32:
	cmp	rdi, rax
	je	.LBB33_43
.LBB33_33:
	test	rdi, rdi
	je	.LBB33_43
# %bb.34:
	cmp	rdi, rsi
	je	.LBB33_43
# %bb.35:
	cmp	byte ptr [rdi], 125
	jne	.LBB33_43
# %bb.36:
	cmp	dword ptr [r8 + 16], 2
	je	.LBB33_42
# %bb.37:
	mov	dword ptr [r8 + 16], 1
	mov	rax, rdi
	mov	word ptr [rdx], cx
	inc	rax
	pop	rcx
	.cfi_def_cfa_offset 8
	ret
.LBB33_43:
	.cfi_def_cfa_offset 16
	call	_ZNSt8__format33__invalid_arg_id_in_format_stringEv
.LBB33_41:
	call	_ZNSt8__format39__unmatched_left_brace_in_format_stringEv
.LBB33_42:
	call	_ZNSt8__format39__conflicting_indexing_in_format_stringEv
.Lfunc_end33:
	.size	_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE, .Lfunc_end33-_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8__format39__unmatched_left_brace_in_format_stringEv,"axG",@progbits,_ZNSt8__format39__unmatched_left_brace_in_format_stringEv,comdat
	.weak	_ZNSt8__format39__unmatched_left_brace_in_format_stringEv # -- Begin function _ZNSt8__format39__unmatched_left_brace_in_format_stringEv
	.p2align	4, 0x90
	.type	_ZNSt8__format39__unmatched_left_brace_in_format_stringEv,@function
_ZNSt8__format39__unmatched_left_brace_in_format_stringEv: # @_ZNSt8__format39__unmatched_left_brace_in_format_stringEv
	.cfi_startproc
# %bb.0:
	push	rax
	.cfi_def_cfa_offset 16
	lea	rdi, [rip + .L.str.17]
	call	_ZSt20__throw_format_errorPKc
.Lfunc_end34:
	.size	_ZNSt8__format39__unmatched_left_brace_in_format_stringEv, .Lfunc_end34-_ZNSt8__format39__unmatched_left_brace_in_format_stringEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8__format39__conflicting_indexing_in_format_stringEv,"axG",@progbits,_ZNSt8__format39__conflicting_indexing_in_format_stringEv,comdat
	.weak	_ZNSt8__format39__conflicting_indexing_in_format_stringEv # -- Begin function _ZNSt8__format39__conflicting_indexing_in_format_stringEv
	.p2align	4, 0x90
	.type	_ZNSt8__format39__conflicting_indexing_in_format_stringEv,@function
_ZNSt8__format39__conflicting_indexing_in_format_stringEv: # @_ZNSt8__format39__conflicting_indexing_in_format_stringEv
	.cfi_startproc
# %bb.0:
	push	rax
	.cfi_def_cfa_offset 16
	lea	rdi, [rip + .L.str.18]
	call	_ZSt20__throw_format_errorPKc
.Lfunc_end35:
	.size	_ZNSt8__format39__conflicting_indexing_in_format_stringEv, .Lfunc_end35-_ZNSt8__format39__conflicting_indexing_in_format_stringEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_,"axG",@progbits,_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_,comdat
	.weak	_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_ # -- Begin function _ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_
	.p2align	4, 0x90
	.type	_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_,@function
_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_: # @_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_
.Lfunc_begin9:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception9
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r12
	.cfi_def_cfa_offset 40
	push	rbx
	.cfi_def_cfa_offset 48
	sub	rsp, 80
	.cfi_def_cfa_offset 128
	.cfi_offset rbx, -48
	.cfi_offset r12, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	rbx, rdx
	mov	r14, rdi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 72], rax
	mov	eax, dword ptr [rdi]
	mov	ecx, eax
	shr	ecx, 11
	and	ecx, 15
	je	.LBB36_3
# %bb.1:
	cmp	ecx, 7
	jne	.LBB36_10
# %bb.2:
	mov	byte ptr [rsp + 40], sil
	lea	rsi, [rsp + 40]
	mov	edi, 1
	mov	edx, 1
	mov	rcx, rbx
	mov	r8, r14
	mov	r9d, 1
	call	_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE
	jmp	.LBB36_8
.LBB36_3:
	lea	r12, [rsp + 56]
	mov	qword ptr [rsp + 40], r12
	mov	qword ptr [rsp + 48], 0
	mov	byte ptr [rsp + 56], 0
	test	al, 32
	jne	.LBB36_12
# %bb.4:
	lea	rax, [rip + .L.str.10]
	lea	rcx, [rip + .L.str.9]
	test	sil, sil
	cmovne	rcx, rax
	movzx	r8d, sil
	xor	r8, 5
.Ltmp55:
	lea	rdi, [rsp + 40]
	xor	esi, esi
	xor	edx, edx
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm
.Ltmp56:
.LBB36_5:
	mov	rsi, qword ptr [rsp + 40]
	mov	rdi, qword ptr [rsp + 48]
.Ltmp57:
	mov	rdx, rdi
	mov	rcx, rbx
	mov	r8, r14
	mov	r9d, 1
	call	_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE
.Ltmp58:
# %bb.6:
	mov	rdi, qword ptr [rsp + 40]
	cmp	rdi, r12
	je	.LBB36_8
# %bb.7:
	mov	rbx, rax
	call	_ZdlPv@PLT
	mov	rax, rbx
.LBB36_8:
	mov	rcx, qword ptr fs:[40]
	cmp	rcx, qword ptr [rsp + 72]
	jne	.LBB36_24
# %bb.9:
	add	rsp, 80
	.cfi_def_cfa_offset 48
	pop	rbx
	.cfi_def_cfa_offset 40
	pop	r12
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB36_10:
	.cfi_def_cfa_offset 128
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 72]
	jne	.LBB36_24
# %bb.11:
	movzx	esi, sil
	mov	rdi, r14
	mov	rdx, rbx
	add	rsp, 80
	.cfi_def_cfa_offset 48
	pop	rbx
	.cfi_def_cfa_offset 40
	pop	r12
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	jmp	_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ # TAILCALL
.LBB36_12:
	.cfi_def_cfa_offset 128
	mov	ebp, esi
	lea	r15, [rsp + 8]
	mov	rdi, r15
	mov	rsi, rbx
	call	_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv
.Ltmp49:
	mov	rdi, r15
	call	_ZSt9use_facetINSt7__cxx118numpunctIcEEERKT_RKSt6locale@PLT
.Ltmp50:
# %bb.13:
	mov	r15, rax
	lea	rdi, [rsp + 8]
	call	_ZNSt6localeD1Ev@PLT
	mov	rax, qword ptr [r15]
	movzx	ecx, bpl
	mov	edx, 6
	sub	edx, ecx
.Ltmp52:
	lea	rdi, [rsp + 8]
	mov	rsi, r15
	call	qword ptr [rax + 8*rdx]
.Ltmp53:
# %bb.14:
	lea	rdi, [rsp + 40]
	lea	rsi, [rsp + 8]
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_
	mov	rdi, qword ptr [rsp + 8]
	lea	rax, [rsp + 24]
	cmp	rdi, rax
	je	.LBB36_5
# %bb.15:
	call	_ZdlPv@PLT
	jmp	.LBB36_5
.LBB36_16:
.Ltmp54:
	jmp	.LBB36_19
.LBB36_17:
.Ltmp51:
	mov	rbx, rax
	lea	rdi, [rsp + 8]
	call	_ZNSt6localeD1Ev@PLT
	jmp	.LBB36_20
.LBB36_18:
.Ltmp59:
.LBB36_19:
	mov	rbx, rax
.LBB36_20:
	mov	rdi, qword ptr [rsp + 40]
	cmp	rdi, r12
	je	.LBB36_22
# %bb.21:
	call	_ZdlPv@PLT
.LBB36_22:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 72]
	jne	.LBB36_24
# %bb.23:
	mov	rdi, rbx
	call	_Unwind_Resume@PLT
.LBB36_24:
	call	__stack_chk_fail@PLT
.Lfunc_end36:
	.size	_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_, .Lfunc_end36-_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_
	.cfi_endproc
	.section	.gcc_except_table._ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_,"aG",@progbits,_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_,comdat
	.p2align	2, 0x0
GCC_except_table36:
.Lexception9:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end9-.Lcst_begin9
.Lcst_begin9:
	.uleb128 .Lfunc_begin9-.Lfunc_begin9    # >> Call Site 1 <<
	.uleb128 .Ltmp55-.Lfunc_begin9          #   Call between .Lfunc_begin9 and .Ltmp55
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp55-.Lfunc_begin9          # >> Call Site 2 <<
	.uleb128 .Ltmp58-.Ltmp55                #   Call between .Ltmp55 and .Ltmp58
	.uleb128 .Ltmp59-.Lfunc_begin9          #     jumps to .Ltmp59
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp58-.Lfunc_begin9          # >> Call Site 3 <<
	.uleb128 .Ltmp49-.Ltmp58                #   Call between .Ltmp58 and .Ltmp49
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp49-.Lfunc_begin9          # >> Call Site 4 <<
	.uleb128 .Ltmp50-.Ltmp49                #   Call between .Ltmp49 and .Ltmp50
	.uleb128 .Ltmp51-.Lfunc_begin9          #     jumps to .Ltmp51
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp52-.Lfunc_begin9          # >> Call Site 5 <<
	.uleb128 .Ltmp53-.Ltmp52                #   Call between .Ltmp52 and .Ltmp53
	.uleb128 .Ltmp54-.Lfunc_begin9          #     jumps to .Ltmp54
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp53-.Lfunc_begin9          # >> Call Site 6 <<
	.uleb128 .Lfunc_end36-.Ltmp53           #   Call between .Ltmp53 and .Lfunc_end36
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end9:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"axG",@progbits,_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.weak	_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ # -- Begin function _ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.p2align	4, 0x90
	.type	_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,@function
_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_: # @_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 40
	.cfi_def_cfa_offset 96
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	rbp, rdx
	mov	r14, rdi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 32], rax
	mov	r13d, dword ptr [rdi]
	mov	eax, r13d
	and	eax, 30720
	cmp	eax, 14336
	jne	.LBB37_5
# %bb.1:
	test	sil, sil
	js	.LBB37_2
# %bb.4:
	mov	byte ptr [rsp + 21], sil
	lea	rsi, [rsp + 21]
	mov	edi, 1
	mov	edx, 1
	mov	rcx, rbp
	mov	r8, r14
	mov	r9d, 1
	call	_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE
	jmp	.LBB37_49
.LBB37_5:
	lea	rbx, [rsp + 24]
	mov	ecx, r13d
	shr	ecx, 11
	and	ecx, 15
	lea	rdx, [rip + .LJTI37_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB37_14:
	test	sil, sil
	je	.LBB37_15
# %bb.16:
	cmp	sil, 100
	mov	eax, 3
	sbb	rax, 0
	cmp	sil, 10
	mov	r12d, 1
	cmovae	r12, rax
	cmp	sil, 100
	jb	.LBB37_19
# %bb.17:
	movzx	eax, sil
	lea	ecx, [rax + 4*rax]
	lea	eax, [rax + 8*rcx]
	shr	eax, 12
	imul	ecx, eax, 100
	sub	sil, cl
	movzx	ecx, sil
	lea	rdx, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	movzx	ecx, word ptr [rdx + 2*rcx]
	mov	word ptr [rsp + 25], cx
	mov	esi, eax
	jmp	.LBB37_18
.LBB37_31:
	cmp	eax, 10240
	lea	rcx, [rip + .L.str.23]
	lea	r11, [rip + .L.str.24]
	cmove	r11, rcx
	test	sil, sil
	je	.LBB37_32
# %bb.33:
	movzx	ecx, sil
	bsr	r15d, ecx
	xor	r15d, -32
	add	r15d, 36
	shr	r15d, 2
	lea	rdx, [rip + .L__const._ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_.__digits]
	cmp	sil, 16
	jb	.LBB37_35
# %bb.34:
	mov	esi, ecx
	and	esi, 15
	shr	ecx, 4
	movzx	esi, byte ptr [rsi + rdx]
	mov	byte ptr [rsp + 25], sil
.LBB37_35:
	mov	ecx, ecx
	movzx	ecx, byte ptr [rcx + rdx]
	jmp	.LBB37_36
.LBB37_6:
	cmp	eax, 4096
	lea	rax, [rip + .L.str.20]
	lea	r11, [rip + .L.str.21]
	cmove	r11, rax
	mov	edx, 2
	mov	r12d, 1
	test	sil, sil
	je	.LBB37_7
# %bb.8:
	movzx	eax, sil
	bsr	edi, eax
	xor	edi, 31
	mov	al, 49
	cmp	edi, 31
	je	.LBB37_30
# %bb.9:
	mov	ecx, 32
	mov	edx, edi
	xor	edx, 31
	mov	r8d, edx
	and	r8d, 3
	je	.LBB37_11
	.p2align	4, 0x90
.LBB37_10:                              # =>This Inner Loop Header: Depth=1
	mov	r9d, esi
	and	r9b, 1
	or	r9b, 48
	mov	r10d, edx
	mov	byte ptr [rsp + r10 + 24], r9b
	shr	sil
	dec	edx
	dec	r8d
	jne	.LBB37_10
.LBB37_11:
	sub	ecx, edi
	add	edi, -28
	cmp	edi, 3
	jb	.LBB37_13
	.p2align	4, 0x90
.LBB37_12:                              # =>This Inner Loop Header: Depth=1
	mov	edi, esi
	and	dil, 1
	or	dil, 48
	mov	r8d, edx
	mov	byte ptr [rsp + r8 + 24], dil
	mov	edi, esi
	shr	dil
	lea	r8d, [rdx - 1]
	and	dil, 1
	or	dil, 48
	mov	byte ptr [rsp + r8 + 24], dil
	mov	edi, esi
	shr	dil, 2
	lea	r8d, [rdx - 2]
	and	dil, 1
	or	dil, 48
	mov	byte ptr [rsp + r8 + 24], dil
	mov	edi, esi
	shr	dil, 3
	lea	r8d, [rdx - 3]
	and	dil, 1
	or	dil, 48
	mov	byte ptr [rsp + r8 + 24], dil
	shr	sil, 4
	add	edx, -4
	jne	.LBB37_12
.LBB37_13:
	mov	r12d, ecx
	mov	edx, 2
	jmp	.LBB37_30
.LBB37_22:
	test	sil, sil
	je	.LBB37_23
# %bb.24:
	movzx	eax, sil
	bsr	eax, eax
	xor	eax, 7
	mov	cl, 10
	sub	cl, al
	movzx	eax, cl
	imul	r12d, eax, 171
	shr	r12d, 9
	cmp	sil, 64
	jb	.LBB37_26
# %bb.25:
	mov	eax, esi
	and	al, 7
	or	al, 48
	mov	byte ptr [rsp + r12 + 23], al
	mov	eax, esi
	shr	al, 6
	shr	sil, 3
	lea	ecx, [r12 - 2]
	jmp	.LBB37_28
.LBB37_32:
	mov	r15d, 1
	mov	cl, 48
.LBB37_36:
	mov	byte ptr [rsp + 24], cl
	lea	r12, [rsp + r15]
	add	r12, 24
	mov	edx, 2
	cmp	eax, 12288
	jne	.LBB37_40
# %bb.37:
	mov	qword ptr [rsp], r11            # 8-byte Spill
	mov	qword ptr [rsp + 8], rbp        # 8-byte Spill
	xor	ebp, ebp
	.p2align	4, 0x90
.LBB37_38:                              # =>This Inner Loop Header: Depth=1
	movsx	edi, byte ptr [rsp + rbp + 24]
	call	toupper@PLT
	mov	byte ptr [rsp + rbp + 24], al
	inc	rbp
	cmp	r15, rbp
	jne	.LBB37_38
# %bb.39:
	mov	rbp, qword ptr [rsp + 8]        # 8-byte Reload
	mov	r11, qword ptr [rsp]            # 8-byte Reload
	mov	edx, 2
	jmp	.LBB37_40
.LBB37_15:
	mov	r12d, 1
	mov	sil, 48
	jmp	.LBB37_21
.LBB37_7:
	mov	al, 48
	jmp	.LBB37_30
.LBB37_19:
	cmp	sil, 10
	jb	.LBB37_18
# %bb.20:
	movzx	eax, sil
	lea	rcx, [rax + rax]
	movzx	ecx, cl
	lea	rdx, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	movzx	ecx, byte ptr [rcx + rdx + 1]
	mov	byte ptr [rsp + 25], cl
	movzx	esi, byte ptr [rdx + 2*rax]
	jmp	.LBB37_21
.LBB37_18:
	or	sil, 48
.LBB37_21:
	mov	byte ptr [rsp + 24], sil
	add	r12, rbx
	mov	r15, rbx
	jmp	.LBB37_43
.LBB37_23:
	mov	r12d, 1
	mov	al, 48
	xor	r11d, r11d
	xor	edx, edx
	jmp	.LBB37_30
.LBB37_26:
	cmp	sil, 8
	jb	.LBB37_29
# %bb.27:
	mov	eax, esi
	shr	al, 3
	mov	ecx, 1
.LBB37_28:
	and	sil, 7
	or	sil, 48
	mov	byte ptr [rsp + rcx + 24], sil
	mov	esi, eax
.LBB37_29:
	or	sil, 48
	mov	edx, 1
	lea	r11, [rip + .L.str.22]
	mov	eax, esi
.LBB37_30:
	mov	byte ptr [rsp + 24], al
	add	r12, rbx
.LBB37_40:
	mov	r15, rbx
	test	r13b, 16
	je	.LBB37_43
# %bb.41:
	test	rdx, rdx
	je	.LBB37_43
# %bb.42:
	sub	r15, rdx
	mov	rdi, r15
	mov	rsi, r11
	call	memcpy@PLT
.LBB37_43:
	shr	r13d, 2
	and	r13d, 3
	cmp	r13d, 1
	je	.LBB37_44
# %bb.45:
	cmp	r13d, 3
	jne	.LBB37_48
# %bb.46:
	mov	al, 32
	jmp	.LBB37_47
.LBB37_44:
	mov	al, 43
.LBB37_47:
	dec	r15
	mov	byte ptr [r15], al
.LBB37_48:
	sub	r12, r15
	sub	rbx, r15
	mov	rdi, r14
	mov	rsi, r12
	mov	rdx, r15
	mov	rcx, rbx
	mov	r8, rbp
	call	_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_
.LBB37_49:
	mov	rcx, qword ptr fs:[40]
	cmp	rcx, qword ptr [rsp + 32]
	jne	.LBB37_51
# %bb.50:
	add	rsp, 40
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB37_2:
	.cfi_def_cfa_offset 96
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 32]
	jne	.LBB37_51
# %bb.3:
	lea	rdi, [rip + .L.str.25]
	call	_ZSt20__throw_format_errorPKc
.LBB37_51:
	call	__stack_chk_fail@PLT
.Lfunc_end37:
	.size	_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_, .Lfunc_end37-_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.cfi_endproc
	.section	.rodata._ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"aG",@progbits,_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.p2align	2, 0x0
.LJTI37_0:
	.long	.LBB37_14-.LJTI37_0
	.long	.LBB37_14-.LJTI37_0
	.long	.LBB37_6-.LJTI37_0
	.long	.LBB37_6-.LJTI37_0
	.long	.LBB37_22-.LJTI37_0
	.long	.LBB37_31-.LJTI37_0
	.long	.LBB37_31-.LJTI37_0
                                        # -- End function
	.section	.text._ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv,"axG",@progbits,_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv,comdat
	.weak	_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv # -- Begin function _ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv
	.p2align	4, 0x90
	.type	_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv,@function
_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv: # @_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv
	.cfi_startproc
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	rbx
	.cfi_def_cfa_offset 32
	.cfi_offset rbx, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	rbx, rdi
	lea	r14, [rsi + 24]
	cmp	byte ptr [rsi + 32], 0
	jne	.LBB38_2
# %bb.1:
	mov	r15, rsi
	mov	rdi, r14
	call	_ZNSt6localeC1Ev@PLT
	mov	byte ptr [r15 + 32], 1
.LBB38_2:
	mov	rdi, rbx
	mov	rsi, r14
	call	_ZNSt6localeC1ERKS_@PLT
	mov	rax, rbx
	pop	rbx
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.Lfunc_end38:
	.size	_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv, .Lfunc_end38-_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_,"axG",@progbits,_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_,comdat
	.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_ # -- Begin function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_
	.p2align	4, 0x90
	.type	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_,@function
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_: # @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_
	.cfi_startproc
# %bb.0:
	push	r14
	.cfi_def_cfa_offset 16
	push	rbx
	.cfi_def_cfa_offset 24
	push	rax
	.cfi_def_cfa_offset 32
	.cfi_offset rbx, -24
	.cfi_offset r14, -16
	mov	rax, rdi
	mov	rdi, qword ptr [rdi]
	lea	rcx, [rax + 16]
	cmp	rdi, rcx
	je	.LBB39_1
# %bb.3:
	mov	rcx, qword ptr [rsi]
	lea	rdx, [rsi + 16]
	cmp	rcx, rdx
	je	.LBB39_4
# %bb.11:
	mov	r8, qword ptr [rax + 16]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rsi + 8]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rsi + 16]
	mov	qword ptr [rax + 16], rcx
	test	rdi, rdi
	je	.LBB39_14
# %bb.12:
	mov	qword ptr [rsi], rdi
	mov	qword ptr [rsi + 16], r8
	jmp	.LBB39_15
.LBB39_1:
	mov	rcx, qword ptr [rsi]
	lea	rdx, [rsi + 16]
	cmp	rcx, rdx
	je	.LBB39_2
# %bb.13:
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rsi + 8]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rsi + 16]
	mov	qword ptr [rdi], rcx
.LBB39_14:
	mov	qword ptr [rsi], rdx
	mov	rdi, rdx
	jmp	.LBB39_15
.LBB39_2:
	mov	rcx, rdx
.LBB39_4:
	cmp	rsi, rax
	je	.LBB39_5
# %bb.6:
	mov	rdx, qword ptr [rsi + 8]
	test	rdx, rdx
	je	.LBB39_10
# %bb.7:
	cmp	rdx, 1
	jne	.LBB39_9
# %bb.8:
	movzx	ecx, byte ptr [rcx]
	mov	byte ptr [rdi], cl
	jmp	.LBB39_10
.LBB39_9:
	mov	rbx, rsi
	mov	rsi, rcx
	mov	r14, rax
	call	memcpy@PLT
	mov	rsi, rbx
	mov	rax, r14
.LBB39_10:
	mov	rcx, qword ptr [rsi + 8]
	mov	qword ptr [rax + 8], rcx
	mov	rdx, qword ptr [rax]
	mov	byte ptr [rdx + rcx], 0
	mov	rdi, qword ptr [rsi]
.LBB39_15:
	mov	qword ptr [rsi + 8], 0
	mov	byte ptr [rdi], 0
	add	rsp, 8
	.cfi_def_cfa_offset 24
	pop	rbx
	.cfi_def_cfa_offset 16
	pop	r14
	.cfi_def_cfa_offset 8
	ret
.LBB39_5:
	.cfi_def_cfa_offset 32
	mov	rdi, rcx
	jmp	.LBB39_15
.Lfunc_end39:
	.size	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_, .Lfunc_end39-_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE,"axG",@progbits,_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE,comdat
	.weak	_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE # -- Begin function _ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE
	.p2align	4, 0x90
	.type	_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE,@function
_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE: # @_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 72
	.cfi_def_cfa_offset 128
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	r15, rcx
	mov	r14, rsi
	mov	rbx, rdi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 64], rax
	mov	eax, dword ptr [r8]
	shr	eax, 7
	and	eax, 3
	cmp	eax, 2
	je	.LBB40_3
# %bb.1:
	cmp	eax, 1
	jne	.LBB40_10
# %bb.2:
	movzx	eax, word ptr [r8 + 4]
	sub	rax, rdx
	jbe	.LBB40_10
.LBB40_17:
	mov	ecx, dword ptr [r8]
	mov	r10d, dword ptr [r8 + 8]
	and	ecx, 3
	cmove	ecx, r9d
	mov	rdi, qword ptr [r15 + 16]
	mov	rsi, rbx
	mov	rdx, r14
	mov	r8, rax
	mov	r9d, r10d
	call	_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi
	mov	r15, rax
	jmp	.LBB40_18
.LBB40_3:
	movzx	eax, word ptr [r8 + 4]
	mov	rsi, qword ptr [r15]
	mov	edi, esi
	and	edi, 15
	cmp	rdi, rax
	jbe	.LBB40_5
# %bb.4:
	mov	r13, rdx
	mov	r12, r8
	mov	ebp, r9d
	shr	rsi, 4
	lea	ecx, [rax + 4*rax]
                                        # kill: def $cl killed $cl killed $ecx
	shr	rsi, cl
	and	sil, 31
	mov	rcx, qword ptr [r15 + 8]
	shl	eax, 4
	movaps	xmm0, xmmword ptr [rcx + rax]
	movaps	xmmword ptr [rsp], xmm0
	mov	ecx, esi
	jmp	.LBB40_8
.LBB40_5:
	xor	ecx, ecx
	mov	r13, rdx
	mov	r12, r8
	mov	ebp, r9d
	test	rdi, rdi
	jne	.LBB40_8
# %bb.6:
	shr	rsi, 4
	cmp	rsi, rax
	jbe	.LBB40_8
# %bb.7:
	mov	rcx, qword ptr [r15 + 8]
	shl	eax, 5
	movaps	xmm0, xmmword ptr [rcx + rax]
	movaps	xmmword ptr [rsp], xmm0
	movzx	ecx, byte ptr [rcx + rax + 16]
.LBB40_8:
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmmword ptr [rsp + 32], xmm0
	mov	byte ptr [rsp + 48], cl
	movzx	edx, cl
	lea	rdi, [rsp + 32]
	lea	rsi, [rsp + 31]
	call	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE
	mov	r9d, ebp
	mov	r8, r12
	mov	rdx, r13
	sub	rax, rdx
	ja	.LBB40_17
.LBB40_10:
	mov	r15, qword ptr [r15 + 16]
	test	rbx, rbx
	je	.LBB40_18
# %bb.11:
	mov	r12, qword ptr [r15 + 8]
	mov	rdi, qword ptr [r15 + 24]
	sub	r12, rdi
	add	r12, qword ptr [r15 + 16]
	cmp	r12, rbx
	jbe	.LBB40_12
	jmp	.LBB40_16
	.p2align	4, 0x90
.LBB40_14:                              #   in Loop: Header=BB40_12 Depth=1
	add	rdi, r12
	mov	qword ptr [r15 + 24], rdi
	add	r14, r12
	sub	rbx, r12
	mov	rax, qword ptr [r15]
	mov	rdi, r15
	call	qword ptr [rax]
	mov	r12, qword ptr [r15 + 8]
	mov	rdi, qword ptr [r15 + 24]
	sub	r12, rdi
	add	r12, qword ptr [r15 + 16]
	cmp	r12, rbx
	ja	.LBB40_15
.LBB40_12:                              # =>This Inner Loop Header: Depth=1
	test	r12, r12
	je	.LBB40_14
# %bb.13:                               #   in Loop: Header=BB40_12 Depth=1
	mov	rsi, r14
	mov	rdx, r12
	call	memcpy@PLT
	mov	rdi, qword ptr [r15 + 24]
	jmp	.LBB40_14
.LBB40_15:
	test	rbx, rbx
	je	.LBB40_18
.LBB40_16:
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy@PLT
	add	qword ptr [r15 + 24], rbx
.LBB40_18:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 64]
	jne	.LBB40_20
# %bb.19:
	mov	rax, r15
	add	rsp, 72
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB40_20:
	.cfi_def_cfa_offset 128
	call	__stack_chk_fail@PLT
.Lfunc_end40:
	.size	_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE, .Lfunc_end40-_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_,"axG",@progbits,_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_,comdat
	.weak	_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_ # -- Begin function _ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_
	.p2align	4, 0x90
	.type	_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_,@function
_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_: # @_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_
.Lfunc_begin10:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception10
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset rbp, -16
	mov	rbp, rsp
	.cfi_def_cfa_register rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 120
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	mov	r15, r8
	mov	qword ptr [rbp - 136], rcx      # 8-byte Spill
	mov	r14, rdx
	mov	rbx, rsi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rbp - 48], rax
	mov	eax, dword ptr [rdi]
	mov	ecx, eax
	shr	ecx, 7
	and	ecx, 3
	cmp	ecx, 2
	je	.LBB41_4
# %bb.1:
	cmp	ecx, 1
	jne	.LBB41_2
# %bb.3:
	movzx	r13d, word ptr [rdi + 4]
	test	al, 32
	je	.LBB41_22
	jmp	.LBB41_11
.LBB41_4:
	movzx	eax, word ptr [rdi + 4]
	mov	rdx, qword ptr [r15]
	mov	esi, edx
	and	esi, 15
	cmp	rsi, rax
	jbe	.LBB41_6
# %bb.5:
	mov	r12, rdi
	shr	rdx, 4
	lea	ecx, [rax + 4*rax]
                                        # kill: def $cl killed $cl killed $ecx
	shr	rdx, cl
	and	dl, 31
	mov	rcx, qword ptr [r15 + 8]
	shl	eax, 4
	movaps	xmm0, xmmword ptr [rcx + rax]
	movaps	xmmword ptr [rbp - 112], xmm0
	mov	ecx, edx
	jmp	.LBB41_9
.LBB41_2:
	xor	r13d, r13d
	test	al, 32
	jne	.LBB41_11
.LBB41_22:
	sub	r13, rbx
	jbe	.LBB41_23
.LBB41_87:
	mov	eax, dword ptr [rdi]
	mov	ecx, eax
	mov	rdx, qword ptr [r15 + 16]
	and	ecx, 3
	je	.LBB41_89
# %bb.88:
	mov	r9d, dword ptr [rdi + 8]
	jmp	.LBB41_99
.LBB41_89:
	mov	r9d, 32
	mov	ecx, 2
	test	al, 64
	je	.LBB41_99
# %bb.90:
	mov	r9d, 48
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	test	rax, rax
	je	.LBB41_99
# %bb.91:
	mov	qword ptr [rbp - 144], r13      # 8-byte Spill
	test	rbx, rbx
	je	.LBB41_98
# %bb.92:
	mov	r12, qword ptr [rbp - 136]      # 8-byte Reload
	cmp	rbx, r12
	cmovb	r12, rbx
	mov	r15, qword ptr [rdx + 8]
	mov	rdi, qword ptr [rdx + 24]
	sub	r15, rdi
	add	r15, qword ptr [rdx + 16]
	cmp	r15, r12
	mov	qword ptr [rbp - 128], rdx      # 8-byte Spill
	mov	r13, r14
	jbe	.LBB41_93
	jmp	.LBB41_97
	.p2align	4, 0x90
.LBB41_95:                              #   in Loop: Header=BB41_93 Depth=1
	add	rdi, r15
	mov	qword ptr [rdx + 24], rdi
	add	r13, r15
	sub	r12, r15
	mov	rax, qword ptr [rdx]
	mov	rdi, rdx
	call	qword ptr [rax]
	mov	rdx, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r15, qword ptr [rdx + 8]
	mov	rdi, qword ptr [rdx + 24]
	sub	r15, rdi
	add	r15, qword ptr [rdx + 16]
	cmp	r15, r12
	ja	.LBB41_96
.LBB41_93:                              # =>This Inner Loop Header: Depth=1
	test	r15, r15
	je	.LBB41_95
# %bb.94:                               #   in Loop: Header=BB41_93 Depth=1
	mov	rsi, r13
	mov	rdx, r15
	call	memcpy@PLT
	mov	rdx, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rdi, qword ptr [rdx + 24]
	jmp	.LBB41_95
.LBB41_6:
	xor	ecx, ecx
	mov	r12, rdi
	test	rsi, rsi
	jne	.LBB41_9
# %bb.7:
	shr	rdx, 4
	cmp	rdx, rax
	jbe	.LBB41_9
# %bb.8:
	mov	rcx, qword ptr [r15 + 8]
	shl	eax, 5
	movaps	xmm0, xmmword ptr [rcx + rax]
	movaps	xmmword ptr [rbp - 112], xmm0
	movzx	ecx, byte ptr [rcx + rax + 16]
.LBB41_9:
	movaps	xmm0, xmmword ptr [rbp - 112]
	movaps	xmmword ptr [rbp - 80], xmm0
	mov	byte ptr [rbp - 64], cl
	movzx	edx, cl
	lea	rdi, [rbp - 80]
	lea	rsi, [rbp - 81]
	call	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE
	mov	r13, rax
	mov	rdi, r12
	mov	eax, dword ptr [r12]
	test	al, 32
	je	.LBB41_22
.LBB41_11:
	mov	qword ptr [rbp - 160], rdi      # 8-byte Spill
	lea	rsi, [r15 + 24]
	mov	qword ptr [rbp - 128], r15      # 8-byte Spill
	cmp	byte ptr [r15 + 32], 0
	jne	.LBB41_13
# %bb.12:
	mov	rdi, rsi
	mov	r15, rsi
	call	_ZNSt6localeC1Ev@PLT
	mov	rsi, r15
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	byte ptr [rax + 32], 1
.LBB41_13:
	lea	r15, [rbp - 112]
	mov	rdi, r15
	call	_ZNSt6localeC1ERKS_@PLT
.Ltmp60:
	lea	rdi, [rbp - 80]
	mov	rsi, r15
	call	_ZNKSt6locale4nameB5cxx11Ev@PLT
.Ltmp61:
# %bb.14:
	mov	rdi, qword ptr [rbp - 80]
	cmp	qword ptr [rbp - 72], 1
	jne	.LBB41_15
# %bb.16:
	cmp	byte ptr [rdi], 67
	sete	r15b
	lea	r12, [rbp - 64]
	cmp	rdi, r12
	jne	.LBB41_18
	jmp	.LBB41_19
.LBB41_15:
	xor	r15d, r15d
	lea	r12, [rbp - 64]
	cmp	rdi, r12
	je	.LBB41_19
.LBB41_18:
	call	_ZdlPv@PLT
.LBB41_19:
	test	r15b, r15b
	je	.LBB41_30
# %bb.20:
	mov	r15, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB41_21
.LBB41_30:
	mov	rdi, qword ptr [rip + _ZNSt7__cxx118numpunctIcE2idE@GOTPCREL]
	call	_ZNKSt6locale2id5_M_idEv@PLT
	mov	rcx, qword ptr [rbp - 112]
	mov	rcx, qword ptr [rcx + 8]
	mov	r15, qword ptr [rcx + 8*rax]
	test	r15, r15
	je	.LBB41_31
# %bb.34:
	mov	rax, qword ptr [r15]
.Ltmp63:
	lea	rdi, [rbp - 80]
	mov	rsi, r15
	call	qword ptr [rax + 32]
.Ltmp64:
# %bb.35:
	cmp	qword ptr [rbp - 72], 0
	je	.LBB41_36
# %bb.37:
	mov	rax, rbx
	mov	rdx, qword ptr [rbp - 136]      # 8-byte Reload
	sub	rax, rdx
	lea	rax, [rdx + 2*rax]
	add	rax, 15
	and	rax, -16
	mov	r12, rsp
	sub	r12, rax
	mov	rsp, r12
	test	rdx, rdx
	je	.LBB41_39
# %bb.38:
	mov	rdi, r12
	mov	rsi, r14
	call	memcpy@PLT
.LBB41_39:
	mov	qword ptr [rbp - 152], r12      # 8-byte Spill
	mov	qword ptr [rbp - 144], r13      # 8-byte Spill
	mov	rax, qword ptr [r15]
.Ltmp66:
	mov	rdi, r15
	call	qword ptr [rax + 24]
.Ltmp67:
# %bb.40:
	mov	r8d, eax
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	lea	rsi, [r14 + rax]
	mov	r12, qword ptr [rbp - 80]
	add	rbx, r14
	mov	rcx, rbx
	sub	rcx, rsi
	movsx	rax, byte ptr [r12]
	xor	r13d, r13d
	cmp	rcx, rax
	jle	.LBB41_42
# %bb.41:
	lea	ecx, [rax - 127]
	cmp	cl, -126
	jb	.LBB41_42
# %bb.45:
	mov	rcx, qword ptr [rbp - 72]
	dec	rcx
	xor	r15d, r15d
	xor	r13d, r13d
	.p2align	4, 0x90
.LBB41_46:                              # =>This Inner Loop Header: Depth=1
	mov	rdx, rbx
	mov	rdi, r13
	cmp	r13, rcx
	adc	r13, 0
	cmp	rdi, rcx
	sbb	r15, -1
	neg	al
	movsx	rbx, al
	add	rbx, rdx
	movzx	eax, byte ptr [r12 + r13]
	lea	edx, [rax - 127]
	cmp	dl, -126
	jb	.LBB41_43
# %bb.47:                               #   in Loop: Header=BB41_46 Depth=1
	mov	rdx, rbx
	sub	rdx, rsi
	movsx	rdi, al
	cmp	rdx, rdi
	jg	.LBB41_46
	jmp	.LBB41_43
.LBB41_36:
	mov	r15, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rdi, qword ptr [rbp - 80]
	cmp	rdi, r12
	jne	.LBB41_56
	jmp	.LBB41_21
.LBB41_42:
	xor	r15d, r15d
.LBB41_43:
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 152]      # 8-byte Reload
	lea	rdi, [rcx + rax]
	cmp	rbx, rsi
	je	.LBB41_44
# %bb.48:
	mov	rdx, rbx
	sub	rdx, rsi
	mov	byte ptr [rbp - 113], r8b       # 1-byte Spill
	call	memcpy@PLT
	movzx	r8d, byte ptr [rbp - 113]       # 1-byte Folded Reload
	mov	rdi, rbx
	sub	rdi, r14
	mov	r14, qword ptr [rbp - 152]      # 8-byte Reload
	add	rdi, r14
	test	r15, r15
	jne	.LBB41_58
	jmp	.LBB41_50
.LBB41_44:
	mov	rbx, rsi
	mov	r14, rcx
	test	r15, r15
	jne	.LBB41_58
.LBB41_50:
	mov	rax, rdi
.LBB41_52:
	test	r13, r13
	je	.LBB41_53
# %bb.57:
	mov	r15, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB41_69
	.p2align	4, 0x90
.LBB41_51:                              #   in Loop: Header=BB41_58 Depth=1
	mov	rdi, rax
	dec	r15
	je	.LBB41_52
.LBB41_58:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_67 Depth 2
	mov	byte ptr [rdi], r8b
	movzx	ecx, byte ptr [r12 + r13]
	lea	rax, [rdi + 1]
	test	cl, cl
	jle	.LBB41_51
# %bb.59:                               #   in Loop: Header=BB41_58 Depth=1
	cmp	cl, 32
	jb	.LBB41_66
# %bb.60:                               #   in Loop: Header=BB41_58 Depth=1
	mov	rdx, rdi
	sub	rdx, rbx
	inc	rdx
	cmp	rdx, 32
	jb	.LBB41_66
# %bb.61:                               #   in Loop: Header=BB41_58 Depth=1
	movzx	esi, cl
	mov	edx, esi
	and	edx, 96
	movups	xmm0, xmmword ptr [rbx]
	movups	xmm1, xmmword ptr [rbx + 16]
	movups	xmmword ptr [rdi + 1], xmm0
	movups	xmmword ptr [rdi + 17], xmm1
	cmp	rdx, 32
	je	.LBB41_64
# %bb.62:                               #   in Loop: Header=BB41_58 Depth=1
	movups	xmm0, xmmword ptr [rbx + 32]
	movups	xmm1, xmmword ptr [rbx + 48]
	movups	xmmword ptr [rdi + 33], xmm0
	movups	xmmword ptr [rdi + 49], xmm1
	cmp	edx, 64
	je	.LBB41_64
# %bb.63:                               #   in Loop: Header=BB41_58 Depth=1
	movups	xmm0, xmmword ptr [rbx + 64]
	movups	xmm1, xmmword ptr [rbx + 80]
	movups	xmmword ptr [rdi + 65], xmm0
	movups	xmmword ptr [rdi + 81], xmm1
.LBB41_64:                              #   in Loop: Header=BB41_58 Depth=1
	add	rax, rdx
	add	rbx, rdx
	cmp	rdx, rsi
	je	.LBB41_51
# %bb.65:                               #   in Loop: Header=BB41_58 Depth=1
	sub	cl, dl
	.p2align	4, 0x90
.LBB41_66:                              #   in Loop: Header=BB41_58 Depth=1
	inc	cl
	.p2align	4, 0x90
.LBB41_67:                              #   Parent Loop BB41_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	edx, byte ptr [rbx]
	inc	rbx
	mov	byte ptr [rax], dl
	inc	rax
	dec	cl
	cmp	cl, 1
	ja	.LBB41_67
	jmp	.LBB41_51
	.p2align	4, 0x90
.LBB41_68:                              #   in Loop: Header=BB41_69 Depth=1
	mov	rax, rcx
	dec	r13
	je	.LBB41_54
.LBB41_69:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_78 Depth 2
	mov	byte ptr [rax], r8b
	movzx	edx, byte ptr [r12 + r13 - 1]
	lea	rcx, [rax + 1]
	test	dl, dl
	jle	.LBB41_68
# %bb.70:                               #   in Loop: Header=BB41_69 Depth=1
	cmp	dl, 32
	jb	.LBB41_77
# %bb.71:                               #   in Loop: Header=BB41_69 Depth=1
	mov	rsi, rax
	sub	rsi, rbx
	inc	rsi
	cmp	rsi, 32
	jb	.LBB41_77
# %bb.72:                               #   in Loop: Header=BB41_69 Depth=1
	movzx	edi, dl
	mov	esi, edi
	and	esi, 96
	movups	xmm0, xmmword ptr [rbx]
	movups	xmm1, xmmword ptr [rbx + 16]
	movups	xmmword ptr [rax + 1], xmm0
	movups	xmmword ptr [rax + 17], xmm1
	cmp	rsi, 32
	je	.LBB41_75
# %bb.73:                               #   in Loop: Header=BB41_69 Depth=1
	movups	xmm0, xmmword ptr [rbx + 32]
	movups	xmm1, xmmword ptr [rbx + 48]
	movups	xmmword ptr [rax + 33], xmm0
	movups	xmmword ptr [rax + 49], xmm1
	cmp	esi, 64
	je	.LBB41_75
# %bb.74:                               #   in Loop: Header=BB41_69 Depth=1
	movups	xmm0, xmmword ptr [rbx + 64]
	movups	xmm1, xmmword ptr [rbx + 80]
	movups	xmmword ptr [rax + 65], xmm0
	movups	xmmword ptr [rax + 81], xmm1
.LBB41_75:                              #   in Loop: Header=BB41_69 Depth=1
	add	rcx, rsi
	add	rbx, rsi
	cmp	rsi, rdi
	je	.LBB41_68
# %bb.76:                               #   in Loop: Header=BB41_69 Depth=1
	sub	dl, sil
	.p2align	4, 0x90
.LBB41_77:                              #   in Loop: Header=BB41_69 Depth=1
	inc	dl
	.p2align	4, 0x90
.LBB41_78:                              #   Parent Loop BB41_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	eax, byte ptr [rbx]
	inc	rbx
	mov	byte ptr [rcx], al
	inc	rcx
	dec	dl
	cmp	dl, 1
	ja	.LBB41_78
	jmp	.LBB41_68
.LBB41_53:
	mov	rcx, rax
	mov	r15, qword ptr [rbp - 128]      # 8-byte Reload
.LBB41_54:
	sub	rcx, r14
	mov	rbx, rcx
	mov	r13, qword ptr [rbp - 144]      # 8-byte Reload
	lea	r12, [rbp - 64]
	mov	rdi, qword ptr [rbp - 80]
	cmp	rdi, r12
	je	.LBB41_21
.LBB41_56:
	call	_ZdlPv@PLT
.LBB41_21:
	lea	rdi, [rbp - 112]
	call	_ZNSt6localeD1Ev@PLT
	mov	rdi, qword ptr [rbp - 160]      # 8-byte Reload
	sub	r13, rbx
	ja	.LBB41_87
.LBB41_23:
	mov	r15, qword ptr [r15 + 16]
	test	rbx, rbx
	je	.LBB41_100
# %bb.24:
	mov	r12, qword ptr [r15 + 8]
	mov	rdi, qword ptr [r15 + 24]
	sub	r12, rdi
	add	r12, qword ptr [r15 + 16]
	cmp	r12, rbx
	jbe	.LBB41_25
	jmp	.LBB41_29
	.p2align	4, 0x90
.LBB41_27:                              #   in Loop: Header=BB41_25 Depth=1
	add	rdi, r12
	mov	qword ptr [r15 + 24], rdi
	add	r14, r12
	sub	rbx, r12
	mov	rax, qword ptr [r15]
	mov	rdi, r15
	call	qword ptr [rax]
	mov	r12, qword ptr [r15 + 8]
	mov	rdi, qword ptr [r15 + 24]
	sub	r12, rdi
	add	r12, qword ptr [r15 + 16]
	cmp	r12, rbx
	ja	.LBB41_28
.LBB41_25:                              # =>This Inner Loop Header: Depth=1
	test	r12, r12
	je	.LBB41_27
# %bb.26:                               #   in Loop: Header=BB41_25 Depth=1
	mov	rsi, r14
	mov	rdx, r12
	call	memcpy@PLT
	mov	rdi, qword ptr [r15 + 24]
	jmp	.LBB41_27
.LBB41_28:
	test	rbx, rbx
	je	.LBB41_100
.LBB41_29:
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy@PLT
	add	qword ptr [r15 + 24], rbx
	jmp	.LBB41_100
.LBB41_96:
	test	r12, r12
	mov	ecx, 2
	mov	r9d, 48
	je	.LBB41_98
.LBB41_97:
	mov	rsi, r13
	mov	rdx, r12
	call	memcpy@PLT
	mov	rdx, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9d, 48
	mov	ecx, 2
	add	qword ptr [rdx + 24], r12
.LBB41_98:
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	add	r14, rax
	sub	rbx, rax
	mov	r13, qword ptr [rbp - 144]      # 8-byte Reload
.LBB41_99:
	mov	rdi, rdx
	mov	rsi, rbx
	mov	rdx, r14
	mov	r8, r13
	call	_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi
	mov	r15, rax
.LBB41_100:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rbp - 48]
	jne	.LBB41_102
# %bb.101:
	mov	rax, r15
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	.cfi_def_cfa rsp, 8
	ret
.LBB41_31:
	.cfi_def_cfa rbp, 16
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rbp - 48]
	jne	.LBB41_102
# %bb.32:
.Ltmp69:
	call	_ZSt16__throw_bad_castv@PLT
.Ltmp70:
# %bb.33:
.LBB41_80:
.Ltmp68:
	mov	rbx, rax
	mov	rdi, qword ptr [rbp - 80]
	lea	rax, [rbp - 64]
	cmp	rdi, rax
	je	.LBB41_85
# %bb.81:
	call	_ZdlPv@PLT
	jmp	.LBB41_85
.LBB41_79:
.Ltmp71:
	jmp	.LBB41_84
.LBB41_82:
.Ltmp65:
	jmp	.LBB41_84
.LBB41_83:
.Ltmp62:
.LBB41_84:
	mov	rbx, rax
.LBB41_85:
	lea	rdi, [rbp - 112]
	call	_ZNSt6localeD1Ev@PLT
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rbp - 48]
	jne	.LBB41_102
# %bb.86:
	mov	rdi, rbx
	call	_Unwind_Resume@PLT
.LBB41_102:
	call	__stack_chk_fail@PLT
.Lfunc_end41:
	.size	_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_, .Lfunc_end41-_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_
	.cfi_endproc
	.section	.gcc_except_table._ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_,"aG",@progbits,_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_,comdat
	.p2align	2, 0x0
GCC_except_table41:
.Lexception10:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end10-.Lcst_begin10
.Lcst_begin10:
	.uleb128 .Lfunc_begin10-.Lfunc_begin10  # >> Call Site 1 <<
	.uleb128 .Ltmp60-.Lfunc_begin10         #   Call between .Lfunc_begin10 and .Ltmp60
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp60-.Lfunc_begin10         # >> Call Site 2 <<
	.uleb128 .Ltmp61-.Ltmp60                #   Call between .Ltmp60 and .Ltmp61
	.uleb128 .Ltmp62-.Lfunc_begin10         #     jumps to .Ltmp62
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp63-.Lfunc_begin10         # >> Call Site 3 <<
	.uleb128 .Ltmp64-.Ltmp63                #   Call between .Ltmp63 and .Ltmp64
	.uleb128 .Ltmp65-.Lfunc_begin10         #     jumps to .Ltmp65
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp64-.Lfunc_begin10         # >> Call Site 4 <<
	.uleb128 .Ltmp66-.Ltmp64                #   Call between .Ltmp64 and .Ltmp66
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp66-.Lfunc_begin10         # >> Call Site 5 <<
	.uleb128 .Ltmp67-.Ltmp66                #   Call between .Ltmp66 and .Ltmp67
	.uleb128 .Ltmp68-.Lfunc_begin10         #     jumps to .Ltmp68
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp67-.Lfunc_begin10         # >> Call Site 6 <<
	.uleb128 .Ltmp69-.Ltmp67                #   Call between .Ltmp67 and .Ltmp69
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp69-.Lfunc_begin10         # >> Call Site 7 <<
	.uleb128 .Ltmp70-.Ltmp69                #   Call between .Ltmp69 and .Ltmp70
	.uleb128 .Ltmp71-.Lfunc_begin10         #     jumps to .Ltmp71
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp70-.Lfunc_begin10         # >> Call Site 8 <<
	.uleb128 .Lfunc_end41-.Ltmp70           #   Call between .Ltmp70 and .Lfunc_end41
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end10:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi,"axG",@progbits,_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi,comdat
	.weak	_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi # -- Begin function _ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi
	.p2align	4, 0x90
	.type	_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi,@function
_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi: # @_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi
.Lfunc_begin11:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception11
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 280
	.cfi_def_cfa_offset 336
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	r15, rdx
	mov	r14, rsi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 272], rax
	mov	qword ptr [rsp + 112], rdi
	mov	byte ptr [rsp + 240], 0
	mov	qword ptr [rsp + 96], 32
	lea	rax, [rsp + 240]
	mov	qword ptr [rsp + 104], rax
	lea	rax, [rsp + 96]
	mov	qword ptr [rsp + 88], rax
	cmp	ecx, 2
	je	.LBB42_1
# %bb.2:
	cmp	ecx, 3
	jne	.LBB42_4
# %bb.3:
	mov	r12, r8
	shr	r12
	and	r8d, 1
	add	r8, r12
	jmp	.LBB42_5
.LBB42_1:
	xor	ebx, ebx
	mov	r12, r8
	jmp	.LBB42_6
.LBB42_4:
	xor	r12d, r12d
.LBB42_5:
	mov	rbx, r8
.LBB42_6:
	cmp	r9d, 127
	jae	.LBB42_7
# %bb.23:
	mov	edx, 32
	cmp	r8, 31
	ja	.LBB42_25
# %bb.24:
	mov	qword ptr [rsp + 96], r8
	mov	rdx, r8
	test	r8, r8
	je	.LBB42_26
.LBB42_25:
	lea	rdi, [rsp + 240]
	mov	esi, r9d
	call	memset@PLT
.LBB42_26:
	lea	rdi, [rsp + 88]
	lea	rdx, [rsp + 112]
	mov	rsi, r12
	call	_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_
	mov	r12, qword ptr [rsp + 112]
	test	r14, r14
	je	.LBB42_33
# %bb.27:
	mov	r13, qword ptr [r12 + 8]
	mov	rdi, qword ptr [r12 + 24]
	sub	r13, rdi
	add	r13, qword ptr [r12 + 16]
	cmp	r13, r14
	jbe	.LBB42_28
	jmp	.LBB42_32
	.p2align	4, 0x90
.LBB42_30:                              #   in Loop: Header=BB42_28 Depth=1
	add	rdi, r13
	mov	qword ptr [r12 + 24], rdi
	add	r15, r13
	sub	r14, r13
	mov	rax, qword ptr [r12]
	mov	rdi, r12
	call	qword ptr [rax]
	mov	r13, qword ptr [r12 + 8]
	mov	rdi, qword ptr [r12 + 24]
	sub	r13, rdi
	add	r13, qword ptr [r12 + 16]
	cmp	r13, r14
	ja	.LBB42_31
.LBB42_28:                              # =>This Inner Loop Header: Depth=1
	test	r13, r13
	je	.LBB42_30
# %bb.29:                               #   in Loop: Header=BB42_28 Depth=1
	mov	rsi, r15
	mov	rdx, r13
	call	memcpy@PLT
	mov	rdi, qword ptr [r12 + 24]
	jmp	.LBB42_30
.LBB42_31:
	test	r14, r14
	je	.LBB42_33
.LBB42_32:
	mov	rsi, r15
	mov	rdx, r14
	call	memcpy@PLT
	add	qword ptr [r12 + 24], r14
.LBB42_33:
	mov	qword ptr [rsp + 112], r12
	lea	rdi, [rsp + 88]
	lea	rdx, [rsp + 112]
	mov	rsi, rbx
	call	_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_
	mov	rax, qword ptr [rsp + 112]
.LBB42_34:
	mov	rcx, qword ptr fs:[40]
	cmp	rcx, qword ptr [rsp + 272]
	jne	.LBB42_36
# %bb.35:
	add	rsp, 280
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB42_7:
	.cfi_def_cfa_offset 336
	mov	rbp, rdi
	mov	dword ptr [rsp + 164], r9d
	lea	rax, [rsp + 164]
	mov	qword ptr [rsp + 80], rax
	lea	rdi, [rsp + 120]
	lea	rsi, [rsp + 80]
	call	_ZNSt9__unicode9_Utf_viewIcRA1_KDiE5beginEv
	mov	rax, qword ptr [rsp + 80]
	mov	dword ptr [rsp + 168], 0
	mov	qword ptr [rsp + 176], rax
	add	rax, 4
	mov	qword ptr [rsp + 184], rax
	mov	word ptr [rsp + 192], 0
	mov	byte ptr [rsp + 194], 0
	mov	qword ptr [rsp + 200], rax
	lea	r13, [rsp + 224]
	mov	qword ptr [rsp + 208], r13
	mov	qword ptr [rsp + 216], 0
	mov	rax, qword ptr [rsp + 200]
	mov	qword ptr [rsp + 72], rax
	movups	xmm0, xmmword ptr [rsp + 168]
	movups	xmm1, xmmword ptr [rsp + 184]
	movups	xmmword ptr [rsp + 56], xmm1
	movups	xmmword ptr [rsp + 40], xmm0
	mov	rax, qword ptr [rsp + 152]
	mov	qword ptr [rsp + 32], rax
	movups	xmm0, xmmword ptr [rsp + 120]
	movups	xmm1, xmmword ptr [rsp + 136]
	movups	xmmword ptr [rsp + 16], xmm1
	movups	xmmword ptr [rsp], xmm0
	lea	rdi, [rsp + 208]
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag
	mov	rax, qword ptr [rsp + 208]
	mov	rcx, qword ptr [rsp + 216]
	mov	qword ptr [rsp + 96], rcx
	mov	qword ptr [rsp + 104], rax
	mov	rax, rbp
	test	r12, r12
	je	.LBB42_10
.LBB42_8:                               # =>This Inner Loop Header: Depth=1
	mov	rsi, qword ptr [rsp + 96]
	mov	rdx, qword ptr [rsp + 104]
.Ltmp72:
	mov	rdi, rax
	call	_ZNSt8__format7__writeINS_10_Sink_iterIcEEcQ15output_iteratorIT_RKT0_EEES3_S3_St17basic_string_viewIS4_St11char_traitsIS4_EE
.Ltmp73:
# %bb.9:                                #   in Loop: Header=BB42_8 Depth=1
	dec	r12
	jne	.LBB42_8
.LBB42_10:
.Ltmp75:
	mov	rdi, rax
	mov	rsi, r14
	mov	rdx, r15
	call	_ZNSt8__format7__writeINS_10_Sink_iterIcEEcQ15output_iteratorIT_RKT0_EEES3_S3_St17basic_string_viewIS4_St11char_traitsIS4_EE
.Ltmp76:
# %bb.11:
	inc	rbx
.LBB42_12:                              # =>This Inner Loop Header: Depth=1
	dec	rbx
	je	.LBB42_16
# %bb.13:                               #   in Loop: Header=BB42_12 Depth=1
	mov	rsi, qword ptr [rsp + 96]
	mov	rdx, qword ptr [rsp + 104]
.Ltmp78:
	mov	rdi, rax
	call	_ZNSt8__format7__writeINS_10_Sink_iterIcEEcQ15output_iteratorIT_RKT0_EEES3_S3_St17basic_string_viewIS4_St11char_traitsIS4_EE
.Ltmp79:
	jmp	.LBB42_12
.LBB42_16:
	mov	rdi, qword ptr [rsp + 208]
	cmp	rdi, r13
	je	.LBB42_34
# %bb.17:
	mov	rbx, rax
	call	_ZdlPv@PLT
	mov	rax, rbx
	jmp	.LBB42_34
.LBB42_14:
.Ltmp77:
	jmp	.LBB42_19
.LBB42_18:
.Ltmp74:
	jmp	.LBB42_19
.LBB42_15:
.Ltmp80:
.LBB42_19:
	mov	rbx, rax
	mov	rdi, qword ptr [rsp + 208]
	cmp	rdi, r13
	je	.LBB42_21
# %bb.20:
	call	_ZdlPv@PLT
.LBB42_21:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 272]
	jne	.LBB42_36
# %bb.22:
	mov	rdi, rbx
	call	_Unwind_Resume@PLT
.LBB42_36:
	call	__stack_chk_fail@PLT
.Lfunc_end42:
	.size	_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi, .Lfunc_end42-_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi
	.cfi_endproc
	.section	.gcc_except_table._ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi,"aG",@progbits,_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi,comdat
	.p2align	2, 0x0
GCC_except_table42:
.Lexception11:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end11-.Lcst_begin11
.Lcst_begin11:
	.uleb128 .Lfunc_begin11-.Lfunc_begin11  # >> Call Site 1 <<
	.uleb128 .Ltmp72-.Lfunc_begin11         #   Call between .Lfunc_begin11 and .Ltmp72
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp72-.Lfunc_begin11         # >> Call Site 2 <<
	.uleb128 .Ltmp73-.Ltmp72                #   Call between .Ltmp72 and .Ltmp73
	.uleb128 .Ltmp74-.Lfunc_begin11         #     jumps to .Ltmp74
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp75-.Lfunc_begin11         # >> Call Site 3 <<
	.uleb128 .Ltmp76-.Ltmp75                #   Call between .Ltmp75 and .Ltmp76
	.uleb128 .Ltmp77-.Lfunc_begin11         #     jumps to .Ltmp77
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp78-.Lfunc_begin11         # >> Call Site 4 <<
	.uleb128 .Ltmp79-.Ltmp78                #   Call between .Ltmp78 and .Ltmp79
	.uleb128 .Ltmp80-.Lfunc_begin11         #     jumps to .Ltmp80
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp79-.Lfunc_begin11         # >> Call Site 5 <<
	.uleb128 .Lfunc_end42-.Ltmp79           #   Call between .Ltmp79 and .Lfunc_end42
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end11:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE,"axG",@progbits,_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE,comdat
	.weak	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE # -- Begin function _ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE
	.p2align	4, 0x90
	.type	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE,@function
_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE: # @_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE
	.cfi_startproc
# %bb.0:
	push	rax
	.cfi_def_cfa_offset 16
	mov	eax, edx
	lea	rcx, [rip + .LJTI43_0]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB43_2:
	mov	eax, dword ptr [rdi]
	test	eax, eax
	js	.LBB43_3
.LBB43_7:
	pop	rcx
	.cfi_def_cfa_offset 8
	ret
.LBB43_5:
	.cfi_def_cfa_offset 16
	mov	rax, qword ptr [rdi]
	pop	rcx
	.cfi_def_cfa_offset 8
	ret
.LBB43_4:
	.cfi_def_cfa_offset 16
	mov	rax, qword ptr [rdi]
	test	rax, rax
	jns	.LBB43_7
.LBB43_3:
	lea	rdi, [rip + .L.str.27]
	call	_ZSt20__throw_format_errorPKc
.LBB43_6:
	mov	eax, dword ptr [rdi]
	pop	rcx
	.cfi_def_cfa_offset 8
	ret
.LBB43_1:
	.cfi_def_cfa_offset 16
	call	_ZNSt8__format33__invalid_arg_id_in_format_stringEv
.Lfunc_end43:
	.size	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE, .Lfunc_end43-_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE
	.cfi_endproc
	.section	.rodata._ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE,"aG",@progbits,_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE,comdat
	.p2align	2, 0x0
.LJTI43_0:
	.long	.LBB43_1-.LJTI43_0
	.long	.LBB43_3-.LJTI43_0
	.long	.LBB43_3-.LJTI43_0
	.long	.LBB43_2-.LJTI43_0
	.long	.LBB43_6-.LJTI43_0
	.long	.LBB43_4-.LJTI43_0
	.long	.LBB43_5-.LJTI43_0
	.long	.LBB43_3-.LJTI43_0
	.long	.LBB43_3-.LJTI43_0
	.long	.LBB43_3-.LJTI43_0
	.long	.LBB43_3-.LJTI43_0
	.long	.LBB43_3-.LJTI43_0
	.long	.LBB43_3-.LJTI43_0
	.long	.LBB43_3-.LJTI43_0
	.long	.LBB43_3-.LJTI43_0
	.long	.LBB43_3-.LJTI43_0
                                        # -- End function
	.section	.text._ZNSt9__unicode9_Utf_viewIcRA1_KDiE5beginEv,"axG",@progbits,_ZNSt9__unicode9_Utf_viewIcRA1_KDiE5beginEv,comdat
	.weak	_ZNSt9__unicode9_Utf_viewIcRA1_KDiE5beginEv # -- Begin function _ZNSt9__unicode9_Utf_viewIcRA1_KDiE5beginEv
	.p2align	4, 0x90
	.type	_ZNSt9__unicode9_Utf_viewIcRA1_KDiE5beginEv,@function
_ZNSt9__unicode9_Utf_viewIcRA1_KDiE5beginEv: # @_ZNSt9__unicode9_Utf_viewIcRA1_KDiE5beginEv
	.cfi_startproc
# %bb.0:
	mov	rax, rdi
	mov	rcx, qword ptr [rsi]
	lea	rdx, [rcx + 4]
	mov	qword ptr [rdi + 8], rcx
	mov	qword ptr [rdi + 16], rcx
	mov	byte ptr [rdi + 24], 0
	mov	qword ptr [rdi + 32], rdx
	mov	ecx, dword ptr [rcx]
	cmp	ecx, 55296
	jae	.LBB44_1
# %bb.5:
	mov	byte ptr [rax + 26], 1
	cmp	ecx, 127
	ja	.LBB44_7
# %bb.6:
	mov	byte ptr [rax], cl
	mov	word ptr [rax + 2], 0
	mov	dl, 1
	mov	esi, 1
	xor	ecx, ecx
	mov	byte ptr [rax + rsi], cl
	mov	byte ptr [rax + 25], dl
	ret
.LBB44_1:
	lea	esi, [rcx - 57344]
	mov	byte ptr [rax + 26], 1
	mov	edx, 65533
	cmp	esi, 1056768
	jb	.LBB44_2
.LBB44_4:
	mov	ecx, edx
	shr	ecx, 12
	or	cl, -32
	mov	byte ptr [rax], cl
	mov	ecx, edx
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rax + 1], cl
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rax + 2], dl
	mov	dl, 3
	mov	esi, 3
	xor	ecx, ecx
	mov	byte ptr [rax + rsi], cl
	mov	byte ptr [rax + 25], dl
	ret
.LBB44_7:
	cmp	ecx, 2047
	ja	.LBB44_3
# %bb.8:
	mov	edx, ecx
	shr	edx, 6
	or	dl, -64
	mov	byte ptr [rax], dl
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rax + 1], cl
	mov	byte ptr [rax + 3], 0
	mov	dl, 2
	mov	esi, 2
	xor	ecx, ecx
	mov	byte ptr [rax + rsi], cl
	mov	byte ptr [rax + 25], dl
	ret
.LBB44_2:
	cmp	ecx, 65535
	ja	.LBB44_9
.LBB44_3:
	mov	edx, ecx
	jmp	.LBB44_4
.LBB44_9:
	mov	edx, ecx
	shr	edx, 18
	or	dl, -16
	mov	byte ptr [rax], dl
	mov	edx, ecx
	shr	edx, 12
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rax + 1], dl
	mov	edx, ecx
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rax + 2], dl
	and	cl, 63
	or	cl, -128
	mov	dl, 4
	mov	esi, 3
	mov	byte ptr [rax + rsi], cl
	mov	byte ptr [rax + 25], dl
	ret
.Lfunc_end44:
	.size	_ZNSt9__unicode9_Utf_viewIcRA1_KDiE5beginEv, .Lfunc_end44-_ZNSt9__unicode9_Utf_viewIcRA1_KDiE5beginEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_,"axG",@progbits,_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_,comdat
	.weak	_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_ # -- Begin function _ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_
	.p2align	4, 0x90
	.type	_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_,@function
_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_: # @_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	push	rax
	.cfi_def_cfa_offset 64
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	qword ptr [rsp], rdx            # 8-byte Spill
	test	rsi, rsi
	je	.LBB45_19
# %bb.1:
	mov	r14, rsi
	mov	r12, rdi
	mov	rax, qword ptr [rdi]
	mov	r15, qword ptr [rax]
	cmp	r15, rsi
	jae	.LBB45_12
# %bb.2:
	mov	rcx, qword ptr [rsp]            # 8-byte Reload
	mov	r13, qword ptr [rcx]
	jmp	.LBB45_3
	.p2align	4, 0x90
.LBB45_8:                               #   in Loop: Header=BB45_3 Depth=1
	test	r15, r15
	je	.LBB45_10
.LBB45_9:                               #   in Loop: Header=BB45_3 Depth=1
	mov	rsi, rbp
	mov	rdx, r15
	call	memcpy@PLT
	add	qword ptr [r13 + 24], r15
.LBB45_10:                              #   in Loop: Header=BB45_3 Depth=1
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	mov	qword ptr [rax], r13
	mov	rax, qword ptr [r12]
	mov	r15, qword ptr [rax]
	sub	r14, r15
	cmp	r14, r15
	jbe	.LBB45_11
.LBB45_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_5 Depth 2
	test	r15, r15
	je	.LBB45_10
# %bb.4:                                #   in Loop: Header=BB45_3 Depth=1
	mov	rbp, qword ptr [rax + 8]
	mov	rbx, qword ptr [r13 + 8]
	mov	rdi, qword ptr [r13 + 24]
	sub	rbx, rdi
	add	rbx, qword ptr [r13 + 16]
	cmp	rbx, r15
	jbe	.LBB45_5
	jmp	.LBB45_9
	.p2align	4, 0x90
.LBB45_7:                               #   in Loop: Header=BB45_5 Depth=2
	add	rdi, rbx
	mov	qword ptr [r13 + 24], rdi
	add	rbp, rbx
	sub	r15, rbx
	mov	rax, qword ptr [r13]
	mov	rdi, r13
	call	qword ptr [rax]
	mov	rbx, qword ptr [r13 + 8]
	mov	rdi, qword ptr [r13 + 24]
	sub	rbx, rdi
	add	rbx, qword ptr [r13 + 16]
	cmp	rbx, r15
	ja	.LBB45_8
.LBB45_5:                               #   Parent Loop BB45_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	test	rbx, rbx
	je	.LBB45_7
# %bb.6:                                #   in Loop: Header=BB45_5 Depth=2
	mov	rsi, rbp
	mov	rdx, rbx
	call	memcpy@PLT
	mov	rdi, qword ptr [r13 + 24]
	jmp	.LBB45_7
.LBB45_11:
	test	r14, r14
	je	.LBB45_19
.LBB45_12:
	cmp	r15, r14
	cmovb	r14, r15
	mov	rcx, qword ptr [rsp]            # 8-byte Reload
	mov	r15, qword ptr [rcx]
	mov	r12, qword ptr [rax + 8]
	mov	rbx, qword ptr [r15 + 8]
	mov	rdi, qword ptr [r15 + 24]
	sub	rbx, rdi
	add	rbx, qword ptr [r15 + 16]
	cmp	rbx, r14
	jbe	.LBB45_13
	jmp	.LBB45_17
	.p2align	4, 0x90
.LBB45_15:                              #   in Loop: Header=BB45_13 Depth=1
	add	rdi, rbx
	mov	qword ptr [r15 + 24], rdi
	add	r12, rbx
	sub	r14, rbx
	mov	rax, qword ptr [r15]
	mov	rdi, r15
	call	qword ptr [rax]
	mov	rbx, qword ptr [r15 + 8]
	mov	rdi, qword ptr [r15 + 24]
	sub	rbx, rdi
	add	rbx, qword ptr [r15 + 16]
	cmp	rbx, r14
	ja	.LBB45_16
.LBB45_13:                              # =>This Inner Loop Header: Depth=1
	test	rbx, rbx
	je	.LBB45_15
# %bb.14:                               #   in Loop: Header=BB45_13 Depth=1
	mov	rsi, r12
	mov	rdx, rbx
	call	memcpy@PLT
	mov	rdi, qword ptr [r15 + 24]
	jmp	.LBB45_15
.LBB45_16:
	test	r14, r14
	je	.LBB45_18
.LBB45_17:
	mov	rsi, r12
	mov	rdx, r14
	call	memcpy@PLT
	add	qword ptr [r15 + 24], r14
.LBB45_18:
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	mov	qword ptr [rax], r15
.LBB45_19:
	add	rsp, 8
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.Lfunc_end45:
	.size	_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_, .Lfunc_end45-_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag,"axG",@progbits,_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag,comdat
	.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag # -- Begin function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag
	.p2align	4, 0x90
	.type	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag,@function
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag: # @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag
.Lfunc_begin12:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception12
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 40
	.cfi_def_cfa_offset 96
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	r13, rdi
	lea	r15, [rsp + 96]
	mov	rcx, qword ptr [rsp + 152]
	movzx	r14d, byte ptr [rsp + 160]
	movzx	eax, byte ptr [rsp + 120]
	mov	qword ptr [rsp + 24], rcx       # 8-byte Spill
	cmp	qword ptr [rsp + 112], rcx
	jne	.LBB46_9
# %bb.1:
	cmp	al, r14b
	jne	.LBB46_9
# %bb.2:
	xor	ebp, ebp
	jmp	.LBB46_3
.LBB46_9:
	xor	ebx, ebx
	.p2align	4, 0x90
.LBB46_10:                              # =>This Inner Loop Header: Depth=1
	movzx	eax, al
	movzx	eax, byte ptr [r15 + rax]
	lea	rbp, [rbx + 1]
	mov	byte ptr [r13 + rbx + 16], al
	mov	rdi, r15
	call	_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv
	movzx	eax, byte ptr [r15 + 24]
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	cmp	qword ptr [r15 + 16], rcx
	setne	cl
	cmp	al, r14b
	setne	dl
	or	dl, cl
	cmp	dl, 1
	jne	.LBB46_3
# %bb.11:                               #   in Loop: Header=BB46_10 Depth=1
	cmp	rbx, 14
	mov	rbx, rbp
	jb	.LBB46_10
.LBB46_3:
	mov	byte ptr [rsp + 15], r14b       # 1-byte Spill
	lea	rax, [r13 + 16]
	mov	qword ptr [rsp + 16], rax       # 8-byte Spill
	mov	r14d, 15
	mov	qword ptr [rsp + 32], r13       # 8-byte Spill
	jmp	.LBB46_4
	.p2align	4, 0x90
.LBB46_7:                               #   in Loop: Header=BB46_4 Depth=1
	mov	r12, qword ptr [r13]
.LBB46_8:                               #   in Loop: Header=BB46_4 Depth=1
	movzx	eax, bl
	movzx	eax, byte ptr [r15 + rax]
	mov	byte ptr [r12 + rbp], al
	inc	rbp
.Ltmp86:
	mov	rdi, r15
	call	_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv
.Ltmp87:
.LBB46_4:                               # =>This Inner Loop Header: Depth=1
	movzx	ebx, byte ptr [r15 + 24]
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	cmp	qword ptr [r15 + 16], rax
	jne	.LBB46_6
# %bb.5:                                #   in Loop: Header=BB46_4 Depth=1
	cmp	bl, byte ptr [rsp + 15]         # 1-byte Folded Reload
	je	.LBB46_30
.LBB46_6:                               #   in Loop: Header=BB46_4 Depth=1
	cmp	rbp, r14
	jne	.LBB46_7
# %bb.12:                               #   in Loop: Header=BB46_4 Depth=1
	mov	rax, r14
	inc	rax
	js	.LBB46_13
# %bb.15:                               #   in Loop: Header=BB46_4 Depth=1
	cmp	r14, -1
	je	.LBB46_16
# %bb.21:                               #   in Loop: Header=BB46_4 Depth=1
	lea	rcx, [r14 + r14]
	movabs	r15, 9223372036854775807
	cmp	rcx, r15
	cmovb	r15, rcx
	cmp	rax, rcx
	cmovae	r15, rax
	mov	rdi, r15
	inc	rdi
	jns	.LBB46_17
	jmp	.LBB46_22
.LBB46_16:                              #   in Loop: Header=BB46_4 Depth=1
	mov	edi, 1
	xor	r15d, r15d
.LBB46_17:                              #   in Loop: Header=BB46_4 Depth=1
.Ltmp83:
	call	_Znwm@PLT
.Ltmp84:
# %bb.18:                               #   in Loop: Header=BB46_4 Depth=1
	mov	r12, rax
	mov	r13, qword ptr [r13]
	test	r14, r14
	je	.LBB46_25
# %bb.19:                               #   in Loop: Header=BB46_4 Depth=1
	cmp	r14, 1
	jne	.LBB46_24
# %bb.20:                               #   in Loop: Header=BB46_4 Depth=1
	movzx	eax, byte ptr [r13]
	mov	byte ptr [r12], al
.LBB46_25:                              #   in Loop: Header=BB46_4 Depth=1
	cmp	r13, qword ptr [rsp + 16]       # 8-byte Folded Reload
	je	.LBB46_27
.LBB46_26:                              #   in Loop: Header=BB46_4 Depth=1
	mov	rdi, r13
	call	_ZdlPv@PLT
	lea	rax, [rsp + 96]
	movzx	ebx, byte ptr [rax + 24]
.LBB46_27:                              #   in Loop: Header=BB46_4 Depth=1
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	mov	qword ptr [r13], r12
	mov	qword ptr [r13 + 16], r15
	mov	r14, r15
	lea	r15, [rsp + 96]
	jmp	.LBB46_8
.LBB46_24:                              #   in Loop: Header=BB46_4 Depth=1
	mov	rdi, r12
	mov	rsi, r13
	mov	rdx, r14
	call	memcpy@PLT
	cmp	r13, qword ptr [rsp + 16]       # 8-byte Folded Reload
	jne	.LBB46_26
	jmp	.LBB46_27
.LBB46_30:
	mov	qword ptr [r13 + 8], rbp
	mov	rax, qword ptr [r13]
	mov	byte ptr [rax + rbp], 0
	add	rsp, 40
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB46_22:
	.cfi_def_cfa_offset 96
.Ltmp81:
	call	_ZSt17__throw_bad_allocv@PLT
.Ltmp82:
# %bb.23:
.LBB46_13:
.Ltmp89:
	lea	rdi, [rip + .L.str.3]
	call	_ZSt20__throw_length_errorPKc@PLT
.Ltmp90:
# %bb.14:
.LBB46_28:
.Ltmp85:
	jmp	.LBB46_32
.LBB46_31:
.Ltmp88:
	jmp	.LBB46_32
.LBB46_29:
.Ltmp91:
.LBB46_32:
	mov	r14, rax
	mov	rdi, qword ptr [r13]
	cmp	rdi, qword ptr [rsp + 16]       # 8-byte Folded Reload
	je	.LBB46_34
# %bb.33:
	call	_ZdlPv@PLT
.LBB46_34:
	mov	rdi, r14
	call	_Unwind_Resume@PLT
.Lfunc_end46:
	.size	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag, .Lfunc_end46-_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag
	.cfi_endproc
	.section	.gcc_except_table._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag,"aG",@progbits,_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag,comdat
	.p2align	2, 0x0
GCC_except_table46:
.Lexception12:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end12-.Lcst_begin12
.Lcst_begin12:
	.uleb128 .Lfunc_begin12-.Lfunc_begin12  # >> Call Site 1 <<
	.uleb128 .Ltmp86-.Lfunc_begin12         #   Call between .Lfunc_begin12 and .Ltmp86
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp86-.Lfunc_begin12         # >> Call Site 2 <<
	.uleb128 .Ltmp87-.Ltmp86                #   Call between .Ltmp86 and .Ltmp87
	.uleb128 .Ltmp88-.Lfunc_begin12         #     jumps to .Ltmp88
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp83-.Lfunc_begin12         # >> Call Site 3 <<
	.uleb128 .Ltmp84-.Ltmp83                #   Call between .Ltmp83 and .Ltmp84
	.uleb128 .Ltmp85-.Lfunc_begin12         #     jumps to .Ltmp85
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp84-.Lfunc_begin12         # >> Call Site 4 <<
	.uleb128 .Ltmp81-.Ltmp84                #   Call between .Ltmp84 and .Ltmp81
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp81-.Lfunc_begin12         # >> Call Site 5 <<
	.uleb128 .Ltmp90-.Ltmp81                #   Call between .Ltmp81 and .Ltmp90
	.uleb128 .Ltmp91-.Lfunc_begin12         #     jumps to .Ltmp91
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp90-.Lfunc_begin12         # >> Call Site 6 <<
	.uleb128 .Lfunc_end46-.Ltmp90           #   Call between .Ltmp90 and .Lfunc_end46
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end12:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv,"axG",@progbits,_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv,comdat
	.weak	_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv # -- Begin function _ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv
	.p2align	4, 0x90
	.type	_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv,@function
_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv: # @_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv
	.cfi_startproc
# %bb.0:
	mov	rax, rdi
	movzx	ecx, byte ptr [rdi + 24]
	lea	edx, [rcx + 1]
	movzx	esi, byte ptr [rdi + 25]
	cmp	edx, esi
	jne	.LBB47_15
# %bb.1:
	mov	r8, qword ptr [rax + 16]
	mov	rdi, qword ptr [rax + 32]
	cmp	r8, rdi
	je	.LBB47_15
# %bb.2:
	movzx	ecx, byte ptr [rax + 26]
	lea	rcx, [r8 + 4*rcx]
	mov	qword ptr [rax + 16], rcx
	cmp	rcx, rdi
	je	.LBB47_3
# %bb.4:
	mov	ecx, dword ptr [rcx]
	cmp	ecx, 55296
	jae	.LBB47_5
# %bb.9:
	mov	byte ptr [rax + 26], 1
	mov	byte ptr [rax + 24], 0
	cmp	ecx, 127
	ja	.LBB47_11
# %bb.10:
	mov	byte ptr [rax], cl
	mov	word ptr [rax + 2], 0
	mov	dl, 1
	mov	esi, 1
	xor	ecx, ecx
	mov	byte ptr [rax + rsi], cl
	mov	byte ptr [rax + 25], dl
	ret
.LBB47_15:
	cmp	edx, esi
	jae	.LBB47_17
# %bb.16:
	inc	cl
	mov	byte ptr [rax + 24], cl
.LBB47_17:
	ret
.LBB47_3:
	mov	byte ptr [rax + 24], 0
	ret
.LBB47_5:
	lea	esi, [rcx - 57344]
	mov	byte ptr [rax + 26], 1
	mov	byte ptr [rax + 24], 0
	mov	edx, 65533
	cmp	esi, 1056768
	jb	.LBB47_6
.LBB47_8:
	mov	ecx, edx
	shr	ecx, 12
	or	cl, -32
	mov	byte ptr [rax], cl
	mov	ecx, edx
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rax + 1], cl
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rax + 2], dl
	mov	dl, 3
	mov	esi, 3
	xor	ecx, ecx
	mov	byte ptr [rax + rsi], cl
	mov	byte ptr [rax + 25], dl
	ret
.LBB47_11:
	cmp	ecx, 2047
	ja	.LBB47_7
# %bb.12:
	mov	edx, ecx
	shr	edx, 6
	or	dl, -64
	mov	byte ptr [rax], dl
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rax + 1], cl
	mov	byte ptr [rax + 3], 0
	mov	dl, 2
	mov	esi, 2
	xor	ecx, ecx
	mov	byte ptr [rax + rsi], cl
	mov	byte ptr [rax + 25], dl
	ret
.LBB47_6:
	cmp	ecx, 65535
	ja	.LBB47_13
.LBB47_7:
	mov	edx, ecx
	jmp	.LBB47_8
.LBB47_13:
	mov	edx, ecx
	shr	edx, 18
	or	dl, -16
	mov	byte ptr [rax], dl
	mov	edx, ecx
	shr	edx, 12
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rax + 1], dl
	mov	edx, ecx
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rax + 2], dl
	and	cl, 63
	or	cl, -128
	mov	dl, 4
	mov	esi, 3
	mov	byte ptr [rax + rsi], cl
	mov	byte ptr [rax + 25], dl
	ret
.Lfunc_end47:
	.size	_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv, .Lfunc_end47-_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm,"axG",@progbits,_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm,comdat
	.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm # -- Begin function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm
	.p2align	4, 0x90
	.type	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm,@function
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm: # @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm
	.cfi_startproc
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	r13
	.cfi_def_cfa_offset 32
	push	r12
	.cfi_def_cfa_offset 40
	push	rbx
	.cfi_def_cfa_offset 48
	.cfi_offset rbx, -48
	.cfi_offset r12, -40
	.cfi_offset r13, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	rbx, rdi
	mov	rax, qword ptr [rdi + 8]
	mov	rdi, rdx
	sub	rdi, rax
	movabs	r9, 9223372036854775807
	add	r9, rdi
	cmp	r9, r8
	jb	.LBB48_19
# %bb.1:
	mov	r15, r8
	sub	r15, rdx
	add	r15, rax
	mov	rdi, qword ptr [rbx]
	lea	r10, [rbx + 16]
	mov	r9d, 15
	cmp	rdi, r10
	je	.LBB48_3
# %bb.2:
	mov	r9, qword ptr [rbx + 16]
.LBB48_3:
	cmp	r15, r9
	jbe	.LBB48_4
# %bb.17:
	mov	rdi, rbx
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
	jmp	.LBB48_18
.LBB48_4:
	lea	r14, [rdi + rsi]
	add	rsi, rdx
	mov	r9, rax
	sub	r9, rsi
	cmp	rdi, rcx
	ja	.LBB48_6
# %bb.5:
	add	rdi, rax
	cmp	rdi, rcx
	jae	.LBB48_16
.LBB48_6:
	cmp	r8, rdx
	je	.LBB48_12
# %bb.7:
	cmp	rax, rsi
	je	.LBB48_12
# %bb.8:
	test	r9, r9
	je	.LBB48_12
# %bb.9:
	lea	rdi, [r14 + r8]
	add	rdx, r14
	cmp	r9, 1
	jne	.LBB48_11
# %bb.10:
	movzx	eax, byte ptr [rdx]
	mov	byte ptr [rdi], al
.LBB48_12:
	test	r8, r8
	je	.LBB48_18
.LBB48_13:
	cmp	r8, 1
	jne	.LBB48_15
# %bb.14:
	movzx	eax, byte ptr [rcx]
	mov	byte ptr [r14], al
	jmp	.LBB48_18
.LBB48_15:
	mov	rdi, r14
	mov	rsi, rcx
	mov	rdx, r8
	call	memcpy@PLT
.LBB48_18:
	mov	qword ptr [rbx + 8], r15
	mov	rax, qword ptr [rbx]
	mov	byte ptr [rax + r15], 0
	mov	rax, rbx
	pop	rbx
	.cfi_def_cfa_offset 40
	pop	r12
	.cfi_def_cfa_offset 32
	pop	r13
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.LBB48_11:
	.cfi_def_cfa_offset 48
	mov	rsi, rdx
	mov	rdx, r9
	mov	r12, r8
	mov	r13, rcx
	call	memmove@PLT
	mov	rcx, r13
	mov	r8, r12
	test	r8, r8
	jne	.LBB48_13
	jmp	.LBB48_18
.LBB48_16:
	mov	rdi, rbx
	mov	rsi, r14
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcmPKcmm@PLT
	jmp	.LBB48_18
.LBB48_19:
	lea	rdi, [rip + .L.str.29]
	call	_ZSt20__throw_length_errorPKc@PLT
.Lfunc_end48:
	.size	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm, .Lfunc_end48-_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"axG",@progbits,_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.weak	_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ # -- Begin function _ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.p2align	4, 0x90
	.type	_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,@function
_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_: # @_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 88
	.cfi_def_cfa_offset 144
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	r13, rdx
	mov	r14, rdi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 80], rax
	mov	r12d, dword ptr [rdi]
	mov	ecx, r12d
	and	ecx, 30720
	cmp	ecx, 14336
	jne	.LBB49_3
# %bb.1:
	movsx	eax, sil
	cmp	eax, esi
	jne	.LBB49_72
# %bb.2:
	mov	byte ptr [rsp + 32], sil
	lea	rsi, [rsp + 32]
	mov	edi, 1
	mov	edx, 1
	mov	rcx, r13
	mov	r8, r14
	mov	r9d, 1
	call	_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE
	jmp	.LBB49_70
.LBB49_3:
	mov	eax, esi
	neg	eax
	cmovs	eax, esi
	lea	rbx, [rsp + 35]
	mov	edx, r12d
	shr	edx, 11
	and	edx, 15
	lea	rdi, [rip + .LJTI49_0]
	movsxd	rdx, dword ptr [rdi + 4*rdx]
	add	rdx, rdi
	jmp	rdx
.LBB49_4:
	mov	ecx, 1
	test	esi, esi
	je	.LBB49_35
# %bb.5:
	cmp	eax, 10
	jb	.LBB49_59
# %bb.6:
	lea	rbp, [rsp + 67]
	mov	ecx, 4
	mov	edx, 3518437209
	mov	edi, eax
	.p2align	4, 0x90
.LBB49_7:                               # =>This Inner Loop Header: Depth=1
	cmp	edi, 99
	jbe	.LBB49_49
# %bb.8:                                #   in Loop: Header=BB49_7 Depth=1
	cmp	edi, 999
	jbe	.LBB49_50
# %bb.9:                                #   in Loop: Header=BB49_7 Depth=1
	cmp	edi, 10000
	jb	.LBB49_51
# %bb.10:                               #   in Loop: Header=BB49_7 Depth=1
	mov	r8d, edi
	imul	r8, rdx
	shr	r8, 45
	add	ecx, 4
	cmp	edi, 99999
	mov	edi, r8d
	ja	.LBB49_7
# %bb.11:
	add	ecx, -3
	jmp	.LBB49_51
.LBB49_12:
	cmp	ecx, 10240
	lea	rdx, [rip + .L.str.23]
	lea	r9, [rip + .L.str.24]
	cmove	r9, rdx
	test	esi, esi
	je	.LBB49_30
# %bb.13:
	mov	rbp, r9
	bsr	r15d, eax
	xor	r15d, -32
	add	r15d, 36
	shr	r15d, 2
	lea	rdx, [rip + .L__const._ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_.__digits]
	cmp	eax, 256
	jb	.LBB49_37
# %bb.14:
	lea	r8d, [r15 - 2]
	mov	edi, eax
	.p2align	4, 0x90
.LBB49_15:                              # =>This Inner Loop Header: Depth=1
	lea	r9d, [r8 + 1]
	mov	r10d, eax
	and	r10d, 15
	mov	r11d, eax
	shr	r11d, 4
	movzx	r10d, byte ptr [r10 + rdx]
	mov	byte ptr [rsp + r9 + 35], r10b
	and	r11d, 15
	shr	edi, 8
	movzx	r9d, byte ptr [r11 + rdx]
	mov	r10d, r8d
	mov	byte ptr [rsp + r10 + 35], r9b
	add	r8d, -2
	cmp	eax, 65535
	mov	eax, edi
	ja	.LBB49_15
# %bb.16:
	cmp	edi, 16
	jb	.LBB49_18
.LBB49_17:
	mov	eax, edi
	and	eax, 15
	shr	edi, 4
	movzx	eax, byte ptr [rax + rdx]
	mov	byte ptr [rsp + 36], al
.LBB49_18:
	mov	r9, rbp
	mov	eax, edi
	movzx	eax, byte ptr [rax + rdx]
	jmp	.LBB49_31
.LBB49_19:
	cmp	ecx, 4096
	lea	rcx, [rip + .L.str.20]
	lea	r9, [rip + .L.str.21]
	cmove	r9, rcx
	mov	edx, 2
	mov	ebp, 1
	test	esi, esi
	je	.LBB49_36
# %bb.20:
	bsr	r8d, eax
	xor	r8d, 31
	mov	cl, 49
	cmp	r8d, 31
	je	.LBB49_43
# %bb.21:
	mov	r15, r9
	mov	edx, 32
	mov	edi, r8d
	xor	edi, 31
	mov	r9d, edi
	and	r9d, 3
	je	.LBB49_23
	.p2align	4, 0x90
.LBB49_22:                              # =>This Inner Loop Header: Depth=1
	mov	r10d, eax
	and	r10b, 1
	or	r10b, 48
	mov	r11d, edi
	mov	byte ptr [rsp + r11 + 35], r10b
	shr	eax
	dec	edi
	dec	r9d
	jne	.LBB49_22
.LBB49_23:
	sub	edx, r8d
	add	r8d, -28
	cmp	r8d, 3
	jb	.LBB49_25
	.p2align	4, 0x90
.LBB49_24:                              # =>This Inner Loop Header: Depth=1
	mov	r8d, eax
	and	r8b, 1
	or	r8b, 48
	mov	r9d, edi
	mov	byte ptr [rsp + r9 + 35], r8b
	lea	r8d, [rdi - 1]
	mov	r9d, eax
	shr	r9b
	and	r9b, 1
	or	r9b, 48
	mov	byte ptr [rsp + r8 + 35], r9b
	lea	r8d, [rdi - 2]
	mov	r9d, eax
	shr	r9b, 2
	and	r9b, 1
	or	r9b, 48
	mov	byte ptr [rsp + r8 + 35], r9b
	lea	r8d, [rdi - 3]
	mov	r9d, eax
	shr	r9b, 3
	and	r9b, 1
	or	r9b, 48
	mov	byte ptr [rsp + r8 + 35], r9b
	shr	eax, 4
	add	edi, -4
	jne	.LBB49_24
.LBB49_25:
	mov	ebp, edx
	mov	r9, r15
	mov	edx, 2
	jmp	.LBB49_43
.LBB49_26:
	xor	r9d, r9d
	xor	edx, edx
	test	esi, esi
	setne	dl
	lea	rcx, [rip + .L.str.22]
	cmovne	r9, rcx
	je	.LBB49_38
# %bb.27:
	bsr	ecx, eax
	xor	ecx, 31
	mov	dil, 34
	sub	dil, cl
	movzx	ecx, dil
	imul	ebp, ecx, 171
	shr	ebp, 9
	cmp	eax, 64
	jb	.LBB49_39
# %bb.28:
	lea	r10d, [rbp - 2]
	mov	ecx, eax
	.p2align	4, 0x90
.LBB49_29:                              # =>This Inner Loop Header: Depth=1
	lea	edi, [r10 + 1]
	mov	r8d, eax
	and	r8b, 7
	or	r8b, 48
	mov	byte ptr [rsp + rdi + 35], r8b
	shr	ecx, 6
	mov	edi, eax
	shr	dil, 3
	and	dil, 7
	or	dil, 48
	mov	r8d, r10d
	mov	byte ptr [rsp + r8 + 35], dil
	add	r10d, -2
	cmp	eax, 4095
	mov	eax, ecx
	ja	.LBB49_29
	jmp	.LBB49_40
.LBB49_30:
	mov	r15d, 1
	mov	al, 48
.LBB49_31:
	mov	byte ptr [rsp + 35], al
	lea	rbp, [rsp + r15]
	add	rbp, 35
	mov	edx, 2
	cmp	ecx, 12288
	jne	.LBB49_44
# %bb.32:
	mov	qword ptr [rsp + 16], r9        # 8-byte Spill
	mov	qword ptr [rsp + 24], r13       # 8-byte Spill
	mov	dword ptr [rsp + 12], esi       # 4-byte Spill
	xor	r13d, r13d
	.p2align	4, 0x90
.LBB49_33:                              # =>This Inner Loop Header: Depth=1
	movsx	edi, byte ptr [rsp + r13 + 35]
	call	toupper@PLT
	mov	byte ptr [rsp + r13 + 35], al
	inc	r13
	cmp	r15, r13
	jne	.LBB49_33
# %bb.34:
	mov	esi, dword ptr [rsp + 12]       # 4-byte Reload
	mov	r13, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r9, qword ptr [rsp + 16]        # 8-byte Reload
	mov	edx, 2
	jmp	.LBB49_44
.LBB49_35:
	mov	al, 48
	jmp	.LBB49_60
.LBB49_36:
	mov	cl, 48
	jmp	.LBB49_43
.LBB49_37:
	mov	edi, eax
	cmp	edi, 16
	jae	.LBB49_17
	jmp	.LBB49_18
.LBB49_38:
	mov	ebp, 1
	mov	cl, 48
	jmp	.LBB49_43
.LBB49_39:
	mov	ecx, eax
.LBB49_40:
	cmp	ecx, 8
	jb	.LBB49_42
# %bb.41:
	mov	eax, ecx
	shr	eax, 3
	and	cl, 7
	or	cl, 48
	mov	byte ptr [rsp + 36], cl
	mov	ecx, eax
.LBB49_42:
	or	cl, 48
.LBB49_43:
	mov	byte ptr [rsp + 35], cl
	add	rbp, rbx
.LBB49_44:
	test	r12b, 16
	je	.LBB49_61
# %bb.45:
	test	rdx, rdx
	je	.LBB49_61
# %bb.46:
	mov	r15, rbx
	sub	r15, rdx
	mov	rdi, r15
	mov	rbx, r14
	mov	r14, r13
	mov	r13d, esi
	mov	rsi, r9
	call	memcpy@PLT
	mov	esi, r13d
	mov	r13, r14
	mov	r14, rbx
	lea	rbx, [rsp + 35]
	jmp	.LBB49_62
.LBB49_49:
	add	ecx, -2
	jmp	.LBB49_51
.LBB49_50:
	dec	ecx
.LBB49_51:
	mov	r15, rbx
	cmp	ecx, 32
	ja	.LBB49_62
# %bb.52:
	cmp	eax, 100
	jb	.LBB49_57
# %bb.53:
	lea	edx, [rcx - 2]
	lea	rdi, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	.p2align	4, 0x90
.LBB49_54:                              # =>This Inner Loop Header: Depth=1
	lea	r9d, [rdx + 1]
	mov	r8d, eax
	imul	r8, r8, 1374389535
	shr	r8, 37
	imul	r10d, r8d, 100
	mov	r11d, eax
	sub	r11d, r10d
	movzx	r10d, byte ptr [rdi + 2*r11]
	movzx	r11d, byte ptr [rdi + 2*r11 + 1]
	mov	byte ptr [rsp + r9 + 35], r11b
	mov	r9d, edx
	mov	byte ptr [rsp + r9 + 35], r10b
	add	edx, -2
	cmp	eax, 9999
	mov	eax, r8d
	ja	.LBB49_54
# %bb.55:
	cmp	r8d, 10
	jb	.LBB49_58
.LBB49_56:
	mov	eax, r8d
	lea	rdx, [rax + rax]
	mov	edx, edx
	lea	rdi, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	movzx	edx, byte ptr [rdx + rdi + 1]
	mov	byte ptr [rsp + 36], dl
	movzx	eax, byte ptr [rdi + 2*rax]
	jmp	.LBB49_60
.LBB49_57:
	mov	r8d, eax
	cmp	r8d, 10
	jae	.LBB49_56
.LBB49_58:
	mov	eax, r8d
.LBB49_59:
	or	al, 48
.LBB49_60:
	mov	ebp, ecx
	mov	byte ptr [rsp + 35], al
	add	rbp, rbx
.LBB49_61:
	mov	r15, rbx
.LBB49_62:
	test	esi, esi
	js	.LBB49_66
# %bb.63:
	shr	r12d, 2
	and	r12d, 3
	cmp	r12d, 1
	je	.LBB49_67
# %bb.64:
	cmp	r12d, 3
	jne	.LBB49_69
# %bb.65:
	mov	al, 32
	jmp	.LBB49_68
.LBB49_66:
	mov	al, 45
	jmp	.LBB49_68
.LBB49_67:
	mov	al, 43
.LBB49_68:
	dec	r15
	mov	byte ptr [r15], al
.LBB49_69:
	sub	rbp, r15
	sub	rbx, r15
	mov	rdi, r14
	mov	rsi, rbp
	mov	rdx, r15
	mov	rcx, rbx
	mov	r8, r13
	call	_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_
.LBB49_70:
	mov	rcx, qword ptr fs:[40]
	cmp	rcx, qword ptr [rsp + 80]
	jne	.LBB49_74
# %bb.71:
	add	rsp, 88
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB49_72:
	.cfi_def_cfa_offset 144
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 80]
	jne	.LBB49_74
# %bb.73:
	lea	rdi, [rip + .L.str.25]
	call	_ZSt20__throw_format_errorPKc
.LBB49_74:
	call	__stack_chk_fail@PLT
.Lfunc_end49:
	.size	_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_, .Lfunc_end49-_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.cfi_endproc
	.section	.rodata._ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"aG",@progbits,_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.p2align	2, 0x0
.LJTI49_0:
	.long	.LBB49_4-.LJTI49_0
	.long	.LBB49_4-.LJTI49_0
	.long	.LBB49_19-.LJTI49_0
	.long	.LBB49_19-.LJTI49_0
	.long	.LBB49_26-.LJTI49_0
	.long	.LBB49_12-.LJTI49_0
	.long	.LBB49_12-.LJTI49_0
                                        # -- End function
	.section	.text._ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"axG",@progbits,_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.weak	_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ # -- Begin function _ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.p2align	4, 0x90
	.type	_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,@function
_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_: # @_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 72
	.cfi_def_cfa_offset 128
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	rbp, rdx
	mov	r14, rdi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 64], rax
	mov	r12d, dword ptr [rdi]
	mov	eax, r12d
	and	eax, 30720
	cmp	eax, 14336
	jne	.LBB50_5
# %bb.1:
	cmp	esi, 128
	jae	.LBB50_2
# %bb.4:
	mov	byte ptr [rsp + 16], sil
	lea	rsi, [rsp + 16]
	mov	edi, 1
	mov	edx, 1
	mov	rcx, rbp
	mov	r8, r14
	mov	r9d, 1
	call	_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE
	jmp	.LBB50_66
.LBB50_5:
	lea	rbx, [rsp + 19]
	mov	ecx, r12d
	shr	ecx, 11
	and	ecx, 15
	lea	rdx, [rip + .LJTI50_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB50_14:
	mov	eax, 1
	test	esi, esi
	je	.LBB50_15
# %bb.16:
	cmp	esi, 10
	jb	.LBB50_32
# %bb.17:
	lea	r13, [rsp + 51]
	mov	eax, 4
	mov	ecx, 3518437209
	mov	edx, esi
	.p2align	4, 0x90
.LBB50_18:                              # =>This Inner Loop Header: Depth=1
	cmp	edx, 99
	jbe	.LBB50_19
# %bb.20:                               #   in Loop: Header=BB50_18 Depth=1
	cmp	edx, 999
	jbe	.LBB50_21
# %bb.22:                               #   in Loop: Header=BB50_18 Depth=1
	cmp	edx, 10000
	jb	.LBB50_25
# %bb.23:                               #   in Loop: Header=BB50_18 Depth=1
	mov	edi, edx
	imul	rdi, rcx
	shr	rdi, 45
	add	eax, 4
	cmp	edx, 99999
	mov	edx, edi
	ja	.LBB50_18
# %bb.24:
	add	eax, -3
	jmp	.LBB50_25
.LBB50_44:
	cmp	eax, 10240
	lea	rcx, [rip + .L.str.23]
	lea	r11, [rip + .L.str.24]
	cmove	r11, rcx
	test	esi, esi
	je	.LBB50_45
# %bb.46:
	bsr	r15d, esi
	xor	r15d, -32
	add	r15d, 36
	shr	r15d, 2
	lea	rcx, [rip + .L__const._ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_.__digits]
	cmp	esi, 256
	jb	.LBB50_47
# %bb.48:
	lea	edi, [r15 - 2]
	mov	edx, esi
	.p2align	4, 0x90
.LBB50_49:                              # =>This Inner Loop Header: Depth=1
	lea	r8d, [rdi + 1]
	mov	r9d, esi
	and	r9d, 15
	mov	r10d, esi
	shr	r10d, 4
	movzx	r9d, byte ptr [r9 + rcx]
	mov	byte ptr [rsp + r8 + 19], r9b
	and	r10d, 15
	shr	edx, 8
	movzx	r8d, byte ptr [r10 + rcx]
	mov	r9d, edi
	mov	byte ptr [rsp + r9 + 19], r8b
	add	edi, -2
	cmp	esi, 65535
	mov	esi, edx
	ja	.LBB50_49
# %bb.50:
	cmp	edx, 16
	jb	.LBB50_52
.LBB50_51:
	mov	esi, edx
	and	esi, 15
	shr	edx, 4
	movzx	esi, byte ptr [rsi + rcx]
	mov	byte ptr [rsp + 20], sil
.LBB50_52:
	mov	edx, edx
	movzx	ecx, byte ptr [rdx + rcx]
	jmp	.LBB50_53
.LBB50_6:
	cmp	eax, 4096
	lea	rax, [rip + .L.str.20]
	lea	r11, [rip + .L.str.21]
	cmove	r11, rax
	mov	edx, 2
	mov	r13d, 1
	test	esi, esi
	je	.LBB50_7
# %bb.8:
	bsr	edi, esi
	xor	edi, 31
	mov	al, 49
	cmp	edi, 31
	je	.LBB50_43
# %bb.9:
	mov	ecx, 32
	mov	edx, edi
	xor	edx, 31
	mov	r8d, edx
	and	r8d, 3
	je	.LBB50_11
	.p2align	4, 0x90
.LBB50_10:                              # =>This Inner Loop Header: Depth=1
	mov	r9d, esi
	and	r9b, 1
	or	r9b, 48
	mov	r10d, edx
	mov	byte ptr [rsp + r10 + 19], r9b
	shr	esi
	dec	edx
	dec	r8d
	jne	.LBB50_10
.LBB50_11:
	sub	ecx, edi
	add	edi, -28
	cmp	edi, 3
	jb	.LBB50_13
	.p2align	4, 0x90
.LBB50_12:                              # =>This Inner Loop Header: Depth=1
	mov	edi, esi
	and	dil, 1
	or	dil, 48
	mov	r8d, edx
	mov	byte ptr [rsp + r8 + 19], dil
	lea	edi, [rdx - 1]
	mov	r8d, esi
	shr	r8b
	and	r8b, 1
	or	r8b, 48
	mov	byte ptr [rsp + rdi + 19], r8b
	lea	edi, [rdx - 2]
	mov	r8d, esi
	shr	r8b, 2
	and	r8b, 1
	or	r8b, 48
	mov	byte ptr [rsp + rdi + 19], r8b
	lea	edi, [rdx - 3]
	mov	r8d, esi
	shr	r8b, 3
	and	r8b, 1
	or	r8b, 48
	mov	byte ptr [rsp + rdi + 19], r8b
	shr	esi, 4
	add	edx, -4
	jne	.LBB50_12
.LBB50_13:
	mov	r13d, ecx
	mov	edx, 2
	jmp	.LBB50_43
.LBB50_34:
	test	esi, esi
	je	.LBB50_35
# %bb.36:
	bsr	eax, esi
	xor	eax, 31
	mov	cl, 34
	sub	cl, al
	movzx	eax, cl
	imul	r13d, eax, 171
	shr	r13d, 9
	cmp	esi, 64
	jb	.LBB50_37
# %bb.38:
	lea	ecx, [r13 - 2]
	mov	eax, esi
	.p2align	4, 0x90
.LBB50_39:                              # =>This Inner Loop Header: Depth=1
	lea	edx, [rcx + 1]
	mov	edi, esi
	and	dil, 7
	or	dil, 48
	mov	byte ptr [rsp + rdx + 19], dil
	shr	eax, 6
	mov	edx, esi
	shr	dl, 3
	and	dl, 7
	or	dl, 48
	mov	edi, ecx
	mov	byte ptr [rsp + rdi + 19], dl
	add	ecx, -2
	cmp	esi, 4095
	mov	esi, eax
	ja	.LBB50_39
	jmp	.LBB50_40
.LBB50_45:
	mov	r15d, 1
	mov	cl, 48
.LBB50_53:
	mov	byte ptr [rsp + 19], cl
	lea	r13, [rsp + r15]
	add	r13, 19
	mov	edx, 2
	cmp	eax, 12288
	jne	.LBB50_57
# %bb.54:
	mov	qword ptr [rsp], r11            # 8-byte Spill
	mov	qword ptr [rsp + 8], rbp        # 8-byte Spill
	xor	ebp, ebp
	.p2align	4, 0x90
.LBB50_55:                              # =>This Inner Loop Header: Depth=1
	movsx	edi, byte ptr [rsp + rbp + 19]
	call	toupper@PLT
	mov	byte ptr [rsp + rbp + 19], al
	inc	rbp
	cmp	r15, rbp
	jne	.LBB50_55
# %bb.56:
	mov	rbp, qword ptr [rsp + 8]        # 8-byte Reload
	mov	r11, qword ptr [rsp]            # 8-byte Reload
	mov	edx, 2
	jmp	.LBB50_57
.LBB50_15:
	mov	sil, 48
	jmp	.LBB50_33
.LBB50_7:
	mov	al, 48
	jmp	.LBB50_43
.LBB50_47:
	mov	edx, esi
	cmp	edx, 16
	jae	.LBB50_51
	jmp	.LBB50_52
.LBB50_35:
	mov	r13d, 1
	mov	al, 48
	xor	r11d, r11d
	xor	edx, edx
	jmp	.LBB50_43
.LBB50_37:
	mov	eax, esi
.LBB50_40:
	cmp	eax, 8
	jb	.LBB50_42
# %bb.41:
	mov	ecx, eax
	shr	ecx, 3
	and	al, 7
	or	al, 48
	mov	byte ptr [rsp + 20], al
	mov	eax, ecx
.LBB50_42:
	or	al, 48
	mov	edx, 1
	lea	r11, [rip + .L.str.22]
.LBB50_43:
	mov	byte ptr [rsp + 19], al
	add	r13, rbx
.LBB50_57:
	mov	r15, rbx
	test	r12b, 16
	je	.LBB50_60
# %bb.58:
	test	rdx, rdx
	je	.LBB50_60
# %bb.59:
	sub	r15, rdx
	mov	rdi, r15
	mov	rsi, r11
	call	memcpy@PLT
	jmp	.LBB50_60
.LBB50_19:
	add	eax, -2
	jmp	.LBB50_25
.LBB50_21:
	dec	eax
.LBB50_25:
	mov	r15, rbx
	cmp	eax, 32
	ja	.LBB50_60
# %bb.26:
	cmp	esi, 100
	jb	.LBB50_27
# %bb.28:
	lea	ecx, [rax - 2]
	lea	rdx, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	.p2align	4, 0x90
.LBB50_29:                              # =>This Inner Loop Header: Depth=1
	lea	r8d, [rcx + 1]
	mov	edi, esi
	imul	rdi, rdi, 1374389535
	shr	rdi, 37
	imul	r9d, edi, 100
	mov	r10d, esi
	sub	r10d, r9d
	movzx	r9d, byte ptr [rdx + 2*r10]
	movzx	r10d, byte ptr [rdx + 2*r10 + 1]
	mov	byte ptr [rsp + r8 + 19], r10b
	mov	r8d, ecx
	mov	byte ptr [rsp + r8 + 19], r9b
	add	ecx, -2
	cmp	esi, 9999
	mov	esi, edi
	ja	.LBB50_29
# %bb.30:
	cmp	edi, 10
	jb	.LBB50_31
.LBB50_68:
	mov	ecx, edi
	lea	rdx, [rcx + rcx]
	mov	edx, edx
	lea	rsi, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	movzx	edx, byte ptr [rdx + rsi + 1]
	mov	byte ptr [rsp + 20], dl
	movzx	esi, byte ptr [rsi + 2*rcx]
	jmp	.LBB50_33
.LBB50_27:
	mov	edi, esi
	cmp	edi, 10
	jae	.LBB50_68
.LBB50_31:
	mov	esi, edi
.LBB50_32:
	or	sil, 48
.LBB50_33:
	mov	r13d, eax
	mov	byte ptr [rsp + 19], sil
	add	r13, rbx
	mov	r15, rbx
.LBB50_60:
	shr	r12d, 2
	and	r12d, 3
	cmp	r12d, 1
	je	.LBB50_61
# %bb.62:
	cmp	r12d, 3
	jne	.LBB50_65
# %bb.63:
	mov	al, 32
	jmp	.LBB50_64
.LBB50_61:
	mov	al, 43
.LBB50_64:
	dec	r15
	mov	byte ptr [r15], al
.LBB50_65:
	sub	r13, r15
	sub	rbx, r15
	mov	rdi, r14
	mov	rsi, r13
	mov	rdx, r15
	mov	rcx, rbx
	mov	r8, rbp
	call	_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_
.LBB50_66:
	mov	rcx, qword ptr fs:[40]
	cmp	rcx, qword ptr [rsp + 64]
	jne	.LBB50_67
# %bb.69:
	add	rsp, 72
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB50_2:
	.cfi_def_cfa_offset 128
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 64]
	jne	.LBB50_67
# %bb.3:
	lea	rdi, [rip + .L.str.25]
	call	_ZSt20__throw_format_errorPKc
.LBB50_67:
	call	__stack_chk_fail@PLT
.Lfunc_end50:
	.size	_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_, .Lfunc_end50-_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.cfi_endproc
	.section	.rodata._ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"aG",@progbits,_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.p2align	2, 0x0
.LJTI50_0:
	.long	.LBB50_14-.LJTI50_0
	.long	.LBB50_14-.LJTI50_0
	.long	.LBB50_6-.LJTI50_0
	.long	.LBB50_6-.LJTI50_0
	.long	.LBB50_34-.LJTI50_0
	.long	.LBB50_44-.LJTI50_0
	.long	.LBB50_44-.LJTI50_0
                                        # -- End function
	.section	.text._ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"axG",@progbits,_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.weak	_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ # -- Begin function _ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.p2align	4, 0x90
	.type	_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,@function
_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_: # @_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 120
	.cfi_def_cfa_offset 176
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	rbp, rdx
	mov	r14, rdi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 112], rax
	mov	r13d, dword ptr [rdi]
	mov	eax, r13d
	and	eax, 30720
	cmp	eax, 14336
	jne	.LBB51_3
# %bb.1:
	movsx	rax, sil
	cmp	rax, rsi
	jne	.LBB51_70
# %bb.2:
	mov	byte ptr [rsp + 32], sil
	lea	rsi, [rsp + 32]
	mov	edi, 1
	mov	edx, 1
	mov	rcx, rbp
	mov	r8, r14
	mov	r9d, 1
	call	_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE
	jmp	.LBB51_68
.LBB51_3:
	mov	rdi, rsi
	neg	rdi
	cmovs	rdi, rsi
	lea	rbx, [rsp + 35]
	mov	ecx, r13d
	shr	ecx, 11
	and	ecx, 15
	lea	rdx, [rip + .LJTI51_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB51_4:
	mov	r8d, 1
	test	rsi, rsi
	je	.LBB51_35
# %bb.5:
	cmp	rdi, 10
	jb	.LBB51_57
# %bb.6:
	lea	r12, [rsp + 99]
	mov	r8d, 4
	movabs	r9, 3777893186295716171
	mov	rcx, rdi
	.p2align	4, 0x90
.LBB51_7:                               # =>This Inner Loop Header: Depth=1
	cmp	rcx, 99
	jbe	.LBB51_47
# %bb.8:                                #   in Loop: Header=BB51_7 Depth=1
	cmp	rcx, 999
	jbe	.LBB51_48
# %bb.9:                                #   in Loop: Header=BB51_7 Depth=1
	cmp	rcx, 10000
	jb	.LBB51_49
# %bb.10:                               #   in Loop: Header=BB51_7 Depth=1
	mov	rax, rcx
	mul	r9
	shr	rdx, 11
	add	r8d, 4
	cmp	rcx, 99999
	mov	rcx, rdx
	ja	.LBB51_7
# %bb.11:
	add	r8d, -3
	jmp	.LBB51_49
.LBB51_12:
	cmp	eax, 10240
	lea	rcx, [rip + .L.str.23]
	lea	r11, [rip + .L.str.24]
	cmove	r11, rcx
	test	rsi, rsi
	je	.LBB51_30
# %bb.13:
	mov	r12, r11
	bsr	r15, rdi
	xor	r15d, -64
	add	r15d, 68
	shr	r15d, 2
	lea	rcx, [rip + .L__const._ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_.__digits]
	cmp	rdi, 256
	jb	.LBB51_36
# %bb.14:
	lea	r8d, [r15 - 2]
	mov	rdx, rdi
	.p2align	4, 0x90
.LBB51_15:                              # =>This Inner Loop Header: Depth=1
	lea	r9d, [r8 + 1]
	mov	r10d, edi
	and	r10d, 15
	mov	r11d, edi
	shr	r11d, 4
	movzx	r10d, byte ptr [r10 + rcx]
	mov	byte ptr [rsp + r9 + 35], r10b
	and	r11d, 15
	shr	rdx, 8
	movzx	r9d, byte ptr [r11 + rcx]
	mov	r10d, r8d
	mov	byte ptr [rsp + r10 + 35], r9b
	add	r8d, -2
	cmp	rdi, 65535
	mov	rdi, rdx
	ja	.LBB51_15
# %bb.16:
	cmp	rdx, 16
	jb	.LBB51_18
.LBB51_17:
	mov	edi, edx
	and	edi, 15
	shr	rdx, 4
	movzx	edi, byte ptr [rdi + rcx]
	mov	byte ptr [rsp + 36], dil
.LBB51_18:
	mov	r11, r12
	movzx	ecx, byte ptr [rdx + rcx]
	jmp	.LBB51_31
.LBB51_19:
	cmp	eax, 4096
	lea	rax, [rip + .L.str.20]
	lea	r11, [rip + .L.str.21]
	cmove	r11, rax
	mov	edx, 2
	test	rsi, rsi
	je	.LBB51_29
# %bb.20:
	bsr	r15, rdi
	xor	r15, 63
	mov	r12d, 64
	sub	r12, r15
	mov	al, 49
	cmp	r15, 63
	je	.LBB51_41
# %bb.21:
	mov	ecx, r15d
	xor	ecx, 63
	mov	r8d, ecx
	and	r8d, 3
	je	.LBB51_23
	.p2align	4, 0x90
.LBB51_22:                              # =>This Inner Loop Header: Depth=1
	mov	r9d, edi
	and	r9b, 1
	or	r9b, 48
	mov	r10d, ecx
	mov	byte ptr [rsp + r10 + 35], r9b
	shr	rdi
	dec	ecx
	dec	r8d
	jne	.LBB51_22
.LBB51_23:
	add	r15d, -60
	mov	edx, 2
	cmp	r15d, 3
	jb	.LBB51_41
	.p2align	4, 0x90
.LBB51_24:                              # =>This Inner Loop Header: Depth=1
	mov	r9d, edi
	and	r9b, 1
	or	r9b, 48
	mov	r8d, ecx
	mov	byte ptr [rsp + r8 + 35], r9b
	lea	r9d, [rcx - 1]
	mov	r8d, edi
	shr	r8b
	and	r8b, 1
	or	r8b, 48
	mov	byte ptr [rsp + r9 + 35], r8b
	lea	r9d, [rcx - 2]
	mov	r8d, edi
	shr	r8b, 2
	and	r8b, 1
	or	r8b, 48
	mov	byte ptr [rsp + r9 + 35], r8b
	lea	r9d, [rcx - 3]
	mov	r8d, edi
	shr	r8b, 3
	and	r8b, 1
	or	r8b, 48
	mov	byte ptr [rsp + r9 + 35], r8b
	shr	rdi, 4
	add	ecx, -4
	jne	.LBB51_24
	jmp	.LBB51_41
.LBB51_25:
	xor	edx, edx
	test	rsi, rsi
	setne	dl
	lea	r11, [rip + .L.str.22]
	cmove	r11, rsi
	je	.LBB51_29
# %bb.26:
	bsr	rax, rdi
	xor	eax, 63
	mov	cl, 66
	sub	cl, al
	movzx	eax, cl
	imul	r12d, eax, 171
	shr	r12d, 9
	cmp	rdi, 64
	jb	.LBB51_37
# %bb.27:
	lea	ecx, [r12 - 2]
	mov	rax, rdi
	.p2align	4, 0x90
.LBB51_28:                              # =>This Inner Loop Header: Depth=1
	lea	r9d, [rcx + 1]
	mov	r8d, edi
	and	r8b, 7
	or	r8b, 48
	mov	byte ptr [rsp + r9 + 35], r8b
	shr	rax, 6
	mov	r9d, edi
	shr	r9b, 3
	and	r9b, 7
	or	r9b, 48
	mov	r8d, ecx
	mov	byte ptr [rsp + r8 + 35], r9b
	add	ecx, -2
	cmp	rdi, 4095
	mov	rdi, rax
	ja	.LBB51_28
	jmp	.LBB51_38
.LBB51_29:
	mov	r12d, 1
	mov	al, 48
	jmp	.LBB51_41
.LBB51_30:
	mov	r15d, 1
	mov	cl, 48
.LBB51_31:
	mov	byte ptr [rsp + 35], cl
	lea	r12, [rsp + r15]
	add	r12, 35
	mov	edx, 2
	cmp	eax, 12288
	jne	.LBB51_42
# %bb.32:
	mov	qword ptr [rsp + 8], r11        # 8-byte Spill
	mov	qword ptr [rsp + 16], rbp       # 8-byte Spill
	mov	qword ptr [rsp + 24], rsi       # 8-byte Spill
	xor	ebp, ebp
	.p2align	4, 0x90
.LBB51_33:                              # =>This Inner Loop Header: Depth=1
	movsx	edi, byte ptr [rsp + rbp + 35]
	call	toupper@PLT
	mov	byte ptr [rsp + rbp + 35], al
	inc	rbp
	cmp	r15, rbp
	jne	.LBB51_33
# %bb.34:
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	mov	rbp, qword ptr [rsp + 16]       # 8-byte Reload
	mov	r11, qword ptr [rsp + 8]        # 8-byte Reload
	mov	edx, 2
	jmp	.LBB51_42
.LBB51_35:
	mov	dil, 48
	jmp	.LBB51_58
.LBB51_36:
	mov	rdx, rdi
	cmp	rdx, 16
	jae	.LBB51_17
	jmp	.LBB51_18
.LBB51_37:
	mov	rax, rdi
.LBB51_38:
	cmp	rax, 8
	jb	.LBB51_40
# %bb.39:
	mov	rcx, rax
	shr	rcx, 3
	and	al, 7
	or	al, 48
	mov	byte ptr [rsp + 36], al
	mov	rax, rcx
.LBB51_40:
	or	al, 48
.LBB51_41:
	mov	byte ptr [rsp + 35], al
	add	r12, rbx
.LBB51_42:
	test	r13b, 16
	je	.LBB51_59
# %bb.43:
	test	rdx, rdx
	je	.LBB51_59
# %bb.44:
	mov	r15, rbx
	sub	r15, rdx
	mov	rdi, r15
	mov	rbx, r14
	mov	r14, rbp
	mov	rbp, rsi
	mov	rsi, r11
	call	memcpy@PLT
	mov	rsi, rbp
	mov	rbp, r14
	mov	r14, rbx
	lea	rbx, [rsp + 35]
	jmp	.LBB51_60
.LBB51_47:
	add	r8d, -2
	jmp	.LBB51_49
.LBB51_48:
	dec	r8d
.LBB51_49:
	mov	r15, rbx
	cmp	r8d, 64
	ja	.LBB51_60
# %bb.50:
	mov	r12, rbp
	cmp	rdi, 100
	jb	.LBB51_55
# %bb.51:
	lea	ecx, [r8 - 2]
	movabs	r9, 2951479051793528259
	lea	r10, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	.p2align	4, 0x90
.LBB51_52:                              # =>This Inner Loop Header: Depth=1
	lea	r11d, [rcx + 1]
	mov	rax, rdi
	shr	rax, 2
	mul	r9
	shr	rdx, 2
	imul	eax, edx, 100
	mov	r15d, edi
	sub	r15d, eax
	movzx	eax, byte ptr [r10 + 2*r15]
	movzx	ebp, byte ptr [r10 + 2*r15 + 1]
	mov	byte ptr [rsp + r11 + 35], bpl
	mov	r11d, ecx
	mov	byte ptr [rsp + r11 + 35], al
	add	ecx, -2
	cmp	rdi, 9999
	mov	rdi, rdx
	ja	.LBB51_52
# %bb.53:
	cmp	rdx, 10
	jb	.LBB51_56
.LBB51_54:
	lea	rax, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	movzx	edi, byte ptr [rax + 2*rdx]
	movzx	eax, byte ptr [rax + 2*rdx + 1]
	mov	byte ptr [rsp + 36], al
	mov	rbp, r12
	jmp	.LBB51_58
.LBB51_55:
	mov	rdx, rdi
	cmp	rdx, 10
	jae	.LBB51_54
.LBB51_56:
	mov	rdi, rdx
	mov	rbp, r12
.LBB51_57:
	or	dil, 48
.LBB51_58:
	mov	r12d, r8d
	mov	byte ptr [rsp + 35], dil
	add	r12, rbx
.LBB51_59:
	mov	r15, rbx
.LBB51_60:
	test	rsi, rsi
	js	.LBB51_64
# %bb.61:
	shr	r13d, 2
	and	r13d, 3
	cmp	r13d, 1
	je	.LBB51_65
# %bb.62:
	cmp	r13d, 3
	jne	.LBB51_67
# %bb.63:
	mov	al, 32
	jmp	.LBB51_66
.LBB51_64:
	mov	al, 45
	jmp	.LBB51_66
.LBB51_65:
	mov	al, 43
.LBB51_66:
	dec	r15
	mov	byte ptr [r15], al
.LBB51_67:
	sub	r12, r15
	sub	rbx, r15
	mov	rdi, r14
	mov	rsi, r12
	mov	rdx, r15
	mov	rcx, rbx
	mov	r8, rbp
	call	_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_
.LBB51_68:
	mov	rcx, qword ptr fs:[40]
	cmp	rcx, qword ptr [rsp + 112]
	jne	.LBB51_72
# %bb.69:
	add	rsp, 120
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB51_70:
	.cfi_def_cfa_offset 176
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 112]
	jne	.LBB51_72
# %bb.71:
	lea	rdi, [rip + .L.str.25]
	call	_ZSt20__throw_format_errorPKc
.LBB51_72:
	call	__stack_chk_fail@PLT
.Lfunc_end51:
	.size	_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_, .Lfunc_end51-_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.cfi_endproc
	.section	.rodata._ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"aG",@progbits,_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.p2align	2, 0x0
.LJTI51_0:
	.long	.LBB51_4-.LJTI51_0
	.long	.LBB51_4-.LJTI51_0
	.long	.LBB51_19-.LJTI51_0
	.long	.LBB51_19-.LJTI51_0
	.long	.LBB51_25-.LJTI51_0
	.long	.LBB51_12-.LJTI51_0
	.long	.LBB51_12-.LJTI51_0
                                        # -- End function
	.section	.text._ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"axG",@progbits,_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.weak	_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ # -- Begin function _ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.p2align	4, 0x90
	.type	_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,@function
_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_: # @_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 104
	.cfi_def_cfa_offset 160
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	rbp, rdx
	mov	r14, rdi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 96], rax
	mov	r13d, dword ptr [rdi]
	mov	eax, r13d
	and	eax, 30720
	cmp	eax, 14336
	jne	.LBB52_5
# %bb.1:
	cmp	rsi, 128
	jae	.LBB52_2
# %bb.4:
	mov	byte ptr [rsp + 16], sil
	lea	rsi, [rsp + 16]
	mov	edi, 1
	mov	edx, 1
	mov	rcx, rbp
	mov	r8, r14
	mov	r9d, 1
	call	_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE
	jmp	.LBB52_65
.LBB52_5:
	lea	rbx, [rsp + 19]
	mov	ecx, r13d
	shr	ecx, 11
	and	ecx, 15
	lea	rdx, [rip + .LJTI52_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB52_13:
	mov	edi, 1
	test	rsi, rsi
	je	.LBB52_14
# %bb.15:
	cmp	rsi, 10
	jb	.LBB52_31
# %bb.16:
	lea	r12, [rsp + 83]
	mov	edi, 4
	movabs	r8, 3777893186295716171
	mov	rcx, rsi
	.p2align	4, 0x90
.LBB52_17:                              # =>This Inner Loop Header: Depth=1
	cmp	rcx, 99
	jbe	.LBB52_18
# %bb.19:                               #   in Loop: Header=BB52_17 Depth=1
	cmp	rcx, 999
	jbe	.LBB52_20
# %bb.21:                               #   in Loop: Header=BB52_17 Depth=1
	cmp	rcx, 10000
	jb	.LBB52_24
# %bb.22:                               #   in Loop: Header=BB52_17 Depth=1
	mov	rax, rcx
	mul	r8
	shr	rdx, 11
	add	edi, 4
	cmp	rcx, 99999
	mov	rcx, rdx
	ja	.LBB52_17
# %bb.23:
	add	edi, -3
	jmp	.LBB52_24
.LBB52_43:
	cmp	eax, 10240
	lea	rcx, [rip + .L.str.23]
	lea	r11, [rip + .L.str.24]
	cmove	r11, rcx
	test	rsi, rsi
	je	.LBB52_44
# %bb.45:
	bsr	r15, rsi
	xor	r15d, -64
	add	r15d, 68
	shr	r15d, 2
	lea	rcx, [rip + .L__const._ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_.__digits]
	cmp	rsi, 256
	jb	.LBB52_46
# %bb.47:
	lea	edi, [r15 - 2]
	mov	rdx, rsi
	.p2align	4, 0x90
.LBB52_48:                              # =>This Inner Loop Header: Depth=1
	lea	r8d, [rdi + 1]
	mov	r9d, esi
	and	r9d, 15
	mov	r10d, esi
	shr	r10d, 4
	movzx	r9d, byte ptr [r9 + rcx]
	mov	byte ptr [rsp + r8 + 19], r9b
	and	r10d, 15
	shr	rdx, 8
	movzx	r8d, byte ptr [r10 + rcx]
	mov	r9d, edi
	mov	byte ptr [rsp + r9 + 19], r8b
	add	edi, -2
	cmp	rsi, 65535
	mov	rsi, rdx
	ja	.LBB52_48
# %bb.49:
	cmp	rdx, 16
	jb	.LBB52_51
.LBB52_50:
	mov	esi, edx
	and	esi, 15
	shr	rdx, 4
	movzx	esi, byte ptr [rsi + rcx]
	mov	byte ptr [rsp + 20], sil
.LBB52_51:
	movzx	ecx, byte ptr [rdx + rcx]
	jmp	.LBB52_52
.LBB52_6:
	cmp	eax, 4096
	lea	rax, [rip + .L.str.20]
	lea	r11, [rip + .L.str.21]
	cmove	r11, rax
	mov	edx, 2
	test	rsi, rsi
	je	.LBB52_7
# %bb.8:
	bsr	r10, rsi
	xor	r10, 63
	mov	r12d, 64
	sub	r12, r10
	mov	al, 49
	cmp	r10, 63
	je	.LBB52_42
# %bb.9:
	mov	ecx, r10d
	xor	ecx, 63
	mov	edi, ecx
	and	edi, 3
	je	.LBB52_11
	.p2align	4, 0x90
.LBB52_10:                              # =>This Inner Loop Header: Depth=1
	mov	r8d, esi
	and	r8b, 1
	or	r8b, 48
	mov	r9d, ecx
	mov	byte ptr [rsp + r9 + 19], r8b
	shr	rsi
	dec	ecx
	dec	edi
	jne	.LBB52_10
.LBB52_11:
	add	r10d, -60
	cmp	r10d, 3
	jb	.LBB52_42
	.p2align	4, 0x90
.LBB52_12:                              # =>This Inner Loop Header: Depth=1
	mov	r8d, esi
	and	r8b, 1
	or	r8b, 48
	mov	edi, ecx
	mov	byte ptr [rsp + rdi + 19], r8b
	lea	r8d, [rcx - 1]
	mov	edi, esi
	shr	dil
	and	dil, 1
	or	dil, 48
	mov	byte ptr [rsp + r8 + 19], dil
	lea	r8d, [rcx - 2]
	mov	edi, esi
	shr	dil, 2
	and	dil, 1
	or	dil, 48
	mov	byte ptr [rsp + r8 + 19], dil
	lea	r8d, [rcx - 3]
	mov	edi, esi
	shr	dil, 3
	and	dil, 1
	or	dil, 48
	mov	byte ptr [rsp + r8 + 19], dil
	shr	rsi, 4
	add	ecx, -4
	jne	.LBB52_12
	jmp	.LBB52_42
.LBB52_33:
	test	rsi, rsi
	je	.LBB52_34
# %bb.35:
	bsr	rax, rsi
	xor	eax, 63
	mov	cl, 66
	sub	cl, al
	movzx	eax, cl
	imul	r12d, eax, 171
	shr	r12d, 9
	cmp	rsi, 64
	jb	.LBB52_36
# %bb.37:
	lea	ecx, [r12 - 2]
	mov	rax, rsi
	.p2align	4, 0x90
.LBB52_38:                              # =>This Inner Loop Header: Depth=1
	lea	edx, [rcx + 1]
	mov	edi, esi
	and	dil, 7
	or	dil, 48
	mov	byte ptr [rsp + rdx + 19], dil
	shr	rax, 6
	mov	edx, esi
	shr	dl, 3
	and	dl, 7
	or	dl, 48
	mov	edi, ecx
	mov	byte ptr [rsp + rdi + 19], dl
	add	ecx, -2
	cmp	rsi, 4095
	mov	rsi, rax
	ja	.LBB52_38
	jmp	.LBB52_39
.LBB52_44:
	mov	r15d, 1
	mov	cl, 48
.LBB52_52:
	mov	byte ptr [rsp + 19], cl
	lea	r12, [rsp + r15]
	add	r12, 19
	mov	edx, 2
	cmp	eax, 12288
	jne	.LBB52_56
# %bb.53:
	mov	qword ptr [rsp], r11            # 8-byte Spill
	mov	qword ptr [rsp + 8], rbp        # 8-byte Spill
	xor	ebp, ebp
	.p2align	4, 0x90
.LBB52_54:                              # =>This Inner Loop Header: Depth=1
	movsx	edi, byte ptr [rsp + rbp + 19]
	call	toupper@PLT
	mov	byte ptr [rsp + rbp + 19], al
	inc	rbp
	cmp	r15, rbp
	jne	.LBB52_54
# %bb.55:
	mov	rbp, qword ptr [rsp + 8]        # 8-byte Reload
	mov	r11, qword ptr [rsp]            # 8-byte Reload
	mov	edx, 2
	jmp	.LBB52_56
.LBB52_14:
	mov	sil, 48
	jmp	.LBB52_32
.LBB52_7:
	mov	r12d, 1
	mov	al, 48
	jmp	.LBB52_42
.LBB52_46:
	mov	rdx, rsi
	cmp	rdx, 16
	jae	.LBB52_50
	jmp	.LBB52_51
.LBB52_34:
	mov	r12d, 1
	mov	al, 48
	xor	r11d, r11d
	xor	edx, edx
	jmp	.LBB52_42
.LBB52_36:
	mov	rax, rsi
.LBB52_39:
	cmp	rax, 8
	jb	.LBB52_41
# %bb.40:
	mov	rcx, rax
	shr	rcx, 3
	and	al, 7
	or	al, 48
	mov	byte ptr [rsp + 20], al
	mov	rax, rcx
.LBB52_41:
	or	al, 48
	mov	edx, 1
	lea	r11, [rip + .L.str.22]
.LBB52_42:
	mov	byte ptr [rsp + 19], al
	add	r12, rbx
.LBB52_56:
	mov	r15, rbx
	test	r13b, 16
	je	.LBB52_59
# %bb.57:
	test	rdx, rdx
	je	.LBB52_59
# %bb.58:
	sub	r15, rdx
	mov	rdi, r15
	mov	rsi, r11
	call	memcpy@PLT
	jmp	.LBB52_59
.LBB52_18:
	add	edi, -2
	jmp	.LBB52_24
.LBB52_20:
	dec	edi
.LBB52_24:
	mov	r15, rbx
	cmp	edi, 64
	ja	.LBB52_59
# %bb.25:
	cmp	rsi, 100
	jb	.LBB52_26
# %bb.27:
	lea	ecx, [rdi - 2]
	movabs	r8, 2951479051793528259
	lea	r9, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	.p2align	4, 0x90
.LBB52_28:                              # =>This Inner Loop Header: Depth=1
	lea	r10d, [rcx + 1]
	mov	rax, rsi
	shr	rax, 2
	mul	r8
	shr	rdx, 2
	imul	eax, edx, 100
	mov	r11d, esi
	sub	r11d, eax
	movzx	eax, byte ptr [r9 + 2*r11]
	movzx	r11d, byte ptr [r9 + 2*r11 + 1]
	mov	byte ptr [rsp + r10 + 19], r11b
	mov	r10d, ecx
	mov	byte ptr [rsp + r10 + 19], al
	add	ecx, -2
	cmp	rsi, 9999
	mov	rsi, rdx
	ja	.LBB52_28
# %bb.29:
	cmp	rdx, 10
	jb	.LBB52_30
.LBB52_67:
	lea	rax, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	movzx	esi, byte ptr [rax + 2*rdx]
	movzx	eax, byte ptr [rax + 2*rdx + 1]
	mov	byte ptr [rsp + 20], al
	jmp	.LBB52_32
.LBB52_26:
	mov	rdx, rsi
	cmp	rdx, 10
	jae	.LBB52_67
.LBB52_30:
	mov	rsi, rdx
.LBB52_31:
	or	sil, 48
.LBB52_32:
	mov	r12d, edi
	mov	byte ptr [rsp + 19], sil
	add	r12, rbx
	mov	r15, rbx
.LBB52_59:
	shr	r13d, 2
	and	r13d, 3
	cmp	r13d, 1
	je	.LBB52_60
# %bb.61:
	cmp	r13d, 3
	jne	.LBB52_64
# %bb.62:
	mov	al, 32
	jmp	.LBB52_63
.LBB52_60:
	mov	al, 43
.LBB52_63:
	dec	r15
	mov	byte ptr [r15], al
.LBB52_64:
	sub	r12, r15
	sub	rbx, r15
	mov	rdi, r14
	mov	rsi, r12
	mov	rdx, r15
	mov	rcx, rbx
	mov	r8, rbp
	call	_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_
.LBB52_65:
	mov	rcx, qword ptr fs:[40]
	cmp	rcx, qword ptr [rsp + 96]
	jne	.LBB52_66
# %bb.68:
	add	rsp, 104
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB52_2:
	.cfi_def_cfa_offset 160
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 96]
	jne	.LBB52_66
# %bb.3:
	lea	rdi, [rip + .L.str.25]
	call	_ZSt20__throw_format_errorPKc
.LBB52_66:
	call	__stack_chk_fail@PLT
.Lfunc_end52:
	.size	_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_, .Lfunc_end52-_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.cfi_endproc
	.section	.rodata._ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"aG",@progbits,_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.p2align	2, 0x0
.LJTI52_0:
	.long	.LBB52_13-.LJTI52_0
	.long	.LBB52_13-.LJTI52_0
	.long	.LBB52_6-.LJTI52_0
	.long	.LBB52_6-.LJTI52_0
	.long	.LBB52_33-.LJTI52_0
	.long	.LBB52_43-.LJTI52_0
	.long	.LBB52_43-.LJTI52_0
                                        # -- End function
	.section	.text._ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE,"axG",@progbits,_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE,comdat
	.weak	_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE # -- Begin function _ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE
	.p2align	4, 0x90
	.type	_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE,@function
_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE: # @_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE
	.cfi_startproc
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	rbx
	.cfi_def_cfa_offset 32
	sub	rsp, 32
	.cfi_def_cfa_offset 64
	.cfi_offset rbx, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 24], rax
	mov	qword ptr [rsp + 8], 0
	mov	dword ptr [rsp + 16], 32
	mov	rax, qword ptr [rsi]
	mov	rbx, qword ptr [rsi + 8]
	cmp	rax, rbx
	je	.LBB53_4
# %bb.1:
	cmp	byte ptr [rax], 125
	je	.LBB53_4
# %bb.2:
	mov	r14, rsi
	mov	r15, rdi
	lea	rdi, [rsp + 8]
	mov	rsi, rax
	mov	rdx, rbx
	call	_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_
	cmp	rax, rbx
	je	.LBB53_3
# %bb.6:
	movzx	edx, byte ptr [rax]
	cmp	edx, 44
	mov	rdi, r15
	jg	.LBB53_9
# %bb.7:
	cmp	edx, 32
	je	.LBB53_12
# %bb.8:
	mov	ecx, 4
	cmp	edx, 43
	je	.LBB53_13
	jmp	.LBB53_14
.LBB53_9:
	cmp	edx, 125
	je	.LBB53_4
# %bb.10:
	cmp	edx, 45
	jne	.LBB53_14
# %bb.11:
	mov	ecx, 8
	jmp	.LBB53_13
.LBB53_12:
	mov	ecx, 12
.LBB53_13:
	mov	edx, dword ptr [rsp + 8]
	and	edx, -13
	or	edx, ecx
	mov	dword ptr [rsp + 8], edx
	inc	rax
.LBB53_14:
	cmp	rax, rbx
	je	.LBB53_4
# %bb.15:
	movzx	ecx, byte ptr [rax]
	cmp	ecx, 125
	je	.LBB53_4
# %bb.16:
	cmp	ecx, 35
	jne	.LBB53_18
# %bb.17:
	or	byte ptr [rsp + 8], 16
	inc	rax
.LBB53_18:
	cmp	rax, rbx
	je	.LBB53_4
# %bb.19:
	movzx	ecx, byte ptr [rax]
	cmp	ecx, 125
	je	.LBB53_4
# %bb.20:
	cmp	ecx, 48
	jne	.LBB53_22
# %bb.21:
	or	byte ptr [rsp + 8], 64
	inc	rax
.LBB53_22:
	cmp	rax, rbx
	je	.LBB53_4
# %bb.23:
	movzx	ecx, byte ptr [rax]
	cmp	ecx, 46
	je	.LBB53_28
# %bb.24:
	cmp	ecx, 125
	je	.LBB53_4
# %bb.25:
	lea	rdi, [rsp + 8]
	mov	rsi, rax
	mov	rdx, rbx
	mov	rcx, r14
	call	_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE
	cmp	rax, rbx
	je	.LBB53_3
# %bb.26:
	movzx	ecx, byte ptr [rax]
	cmp	ecx, 125
	mov	rdi, r15
	je	.LBB53_4
# %bb.27:
	cmp	ecx, 46
	jne	.LBB53_35
.LBB53_28:
	inc	rax
	mov	byte ptr [rsp + 23], 0
	cmp	rax, rbx
	je	.LBB53_30
# %bb.29:
	lea	rdx, [rsp + 14]
	lea	rcx, [rsp + 23]
	mov	rdi, rax
	mov	rsi, rbx
	mov	r8, r14
	mov	r14, rax
	call	_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE
	cmp	rax, r14
	je	.LBB53_30
# %bb.32:
	movzx	ecx, byte ptr [rsp + 23]
	mov	edx, -1537
	and	edx, dword ptr [rsp + 8]
	shl	ecx, 9
	add	ecx, edx
	add	ecx, 512
	mov	dword ptr [rsp + 8], ecx
	cmp	rax, rbx
	mov	rdi, r15
	je	.LBB53_33
# %bb.34:
	movzx	ecx, byte ptr [rax]
.LBB53_35:
	cmp	cl, 125
	je	.LBB53_4
# %bb.36:
	movzx	ecx, cl
	cmp	ecx, 76
	jne	.LBB53_38
# %bb.37:
	or	byte ptr [rsp + 8], 32
	inc	rax
	cmp	rax, rbx
	je	.LBB53_4
.LBB53_38:
	movzx	ecx, byte ptr [rax]
	add	ecx, -65
	cmp	ecx, 60
	ja	.LBB53_49
# %bb.39:
	lea	rdx, [rip + .LJTI53_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB53_41:
	mov	ecx, -30721
	and	ecx, dword ptr [rsp + 8]
	or	ecx, 4096
	jmp	.LBB53_48
.LBB53_3:
	mov	rdi, r15
.LBB53_4:
	mov	ecx, dword ptr [rsp + 16]
	mov	dword ptr [rdi + 8], ecx
	mov	rcx, qword ptr [rsp + 8]
	mov	qword ptr [rdi], rcx
	mov	rcx, qword ptr fs:[40]
	cmp	rcx, qword ptr [rsp + 24]
	jne	.LBB53_53
# %bb.5:
	add	rsp, 32
	.cfi_def_cfa_offset 32
	pop	rbx
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.LBB53_33:
	.cfi_def_cfa_offset 64
	mov	rax, rbx
	jmp	.LBB53_4
.LBB53_43:
	mov	ecx, -30721
	and	ecx, dword ptr [rsp + 8]
	or	ecx, 8192
	jmp	.LBB53_48
.LBB53_40:
	mov	ecx, -30721
	and	ecx, dword ptr [rsp + 8]
	or	ecx, 2048
	jmp	.LBB53_48
.LBB53_42:
	mov	ecx, -30721
	and	ecx, dword ptr [rsp + 8]
	or	ecx, 6144
	jmp	.LBB53_48
.LBB53_44:
	mov	ecx, -30721
	and	ecx, dword ptr [rsp + 8]
	or	ecx, 10240
	jmp	.LBB53_48
.LBB53_45:
	mov	ecx, -30721
	and	ecx, dword ptr [rsp + 8]
	or	ecx, 12288
	jmp	.LBB53_48
.LBB53_47:
	mov	ecx, -30721
	and	ecx, dword ptr [rsp + 8]
	or	ecx, 16384
	jmp	.LBB53_48
.LBB53_46:
	mov	ecx, -30721
	and	ecx, dword ptr [rsp + 8]
	or	ecx, 14336
.LBB53_48:
	mov	dword ptr [rsp + 8], ecx
	inc	rax
.LBB53_49:
	cmp	rax, rbx
	je	.LBB53_4
# %bb.50:
	cmp	byte ptr [rax], 125
	je	.LBB53_4
# %bb.51:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 24]
	jne	.LBB53_53
# %bb.52:
	call	_ZNSt8__format29__failed_to_parse_format_specEv
.LBB53_30:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 24]
	jne	.LBB53_53
# %bb.31:
	lea	rdi, [rip + .L.str.31]
	call	_ZSt20__throw_format_errorPKc
.LBB53_53:
	call	__stack_chk_fail@PLT
.Lfunc_end53:
	.size	_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE, .Lfunc_end53-_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE
	.cfi_endproc
	.section	.rodata._ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE,"aG",@progbits,_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE,comdat
	.p2align	2, 0x0
.LJTI53_0:
	.long	.LBB53_41-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_43-.LJTI53_0
	.long	.LBB53_45-.LJTI53_0
	.long	.LBB53_47-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_40-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_42-.LJTI53_0
	.long	.LBB53_44-.LJTI53_0
	.long	.LBB53_46-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_49-.LJTI53_0
	.long	.LBB53_4-.LJTI53_0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
.LCPI54_0:
	.long	0x7fffffff                      # float NaN
	.long	0x7fffffff                      # float NaN
	.long	0x7fffffff                      # float NaN
	.long	0x7fffffff                      # float NaN
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0
.LCPI54_1:
	.long	0x7f800000                      # float +Inf
	.section	.text._ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"axG",@progbits,_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.weak	_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.p2align	4, 0x90
	.type	_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,@function
_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_: # @_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
.Lfunc_begin13:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception13
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 408
	.cfi_def_cfa_offset 464
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 400], rax
	movss	dword ptr [rsp + 140], xmm0
	lea	rax, [rsp + 352]
	mov	qword ptr [rsp + 336], rax
	mov	qword ptr [rsp + 344], 0
	mov	byte ptr [rsp + 352], 0
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 112], xmm0
	mov	qword ptr [rsp + 104], 6
	mov	eax, dword ptr [rdi]
	test	eax, 1536
	setne	byte ptr [rsp + 103]
	mov	qword ptr [rsp + 24], rdi       # 8-byte Spill
	mov	qword ptr [rsp + 32], rsi       # 8-byte Spill
	je	.LBB54_4
# %bb.1:
	mov	edx, eax
	shr	edx, 9
	and	edx, 3
	cmp	edx, 2
	je	.LBB54_5
# %bb.2:
	mov	rcx, -1
	cmp	edx, 1
	jne	.LBB54_12
# %bb.3:
	movzx	ecx, word ptr [rdi + 6]
	mov	qword ptr [rsp + 104], rcx
	lea	r15, [rsp + 209]
	lea	r14, [rsp + 336]
	mov	dword ptr [rsp + 96], 0
	mov	edx, eax
	shr	edx, 11
	and	edx, 15
	mov	r9b, 101
	xor	esi, esi
	lea	rdi, [rip + .LJTI54_0]
	movsxd	rdx, dword ptr [rdi + 4*rdx]
	add	rdx, rdi
	xor	edi, edi
	xor	r8d, r8d
	xor	ebp, ebp
	jmp	rdx
.LBB54_4:
	mov	ecx, 6
	lea	r15, [rsp + 209]
	lea	r14, [rsp + 336]
	mov	dword ptr [rsp + 96], 0
	mov	edx, eax
	shr	edx, 11
	and	edx, 15
	mov	r9b, 101
	xor	esi, esi
	lea	rdi, [rip + .LJTI54_0]
	movsxd	rdx, dword ptr [rdi + 4*rdx]
	add	rdx, rdi
	xor	edi, edi
	xor	r8d, r8d
	xor	ebp, ebp
	jmp	rdx
.LBB54_5:
	movzx	eax, word ptr [rdi + 6]
	mov	rdx, qword ptr [rsi]
	mov	r8d, edx
	and	r8d, 15
	cmp	r8, rax
	jbe	.LBB54_7
# %bb.6:
	mov	rbx, rdi
	shr	rdx, 4
	lea	ecx, [rax + 4*rax]
                                        # kill: def $cl killed $cl killed $ecx
	shr	rdx, cl
	and	dl, 31
	mov	rcx, qword ptr [rsi + 8]
	shl	eax, 4
	movaps	xmm0, xmmword ptr [rcx + rax]
	movaps	xmmword ptr [rsp + 64], xmm0
	mov	ecx, edx
	jmp	.LBB54_10
.LBB54_7:
	xor	ecx, ecx
	mov	rbx, rdi
	test	r8, r8
	jne	.LBB54_10
# %bb.8:
	shr	rdx, 4
	cmp	rdx, rax
	jbe	.LBB54_10
# %bb.9:
	mov	rcx, qword ptr [rsi + 8]
	shl	eax, 5
	movaps	xmm0, xmmword ptr [rcx + rax]
	movaps	xmmword ptr [rsp + 64], xmm0
	movzx	ecx, byte ptr [rcx + rax + 16]
.LBB54_10:
	movaps	xmm0, xmmword ptr [rsp + 64]
	movaps	xmmword ptr [rsp + 368], xmm0
	mov	byte ptr [rsp + 384], cl
.Ltmp92:
	movzx	edx, cl
	lea	rdi, [rsp + 368]
	lea	rsi, [rsp + 176]
	call	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE
.Ltmp93:
# %bb.11:
	mov	rcx, rax
	mov	eax, dword ptr [rbx]
.LBB54_12:
	mov	qword ptr [rsp + 104], rcx
	lea	r15, [rsp + 209]
	lea	r14, [rsp + 336]
	mov	dword ptr [rsp + 96], 0
	mov	edx, eax
	shr	edx, 11
	and	edx, 15
	mov	r9b, 101
	xor	esi, esi
	lea	rdi, [rip + .LJTI54_0]
	movsxd	rdx, dword ptr [rdi + 4*rdx]
	add	rdx, rdi
	xor	edi, edi
	xor	r8d, r8d
	xor	ebp, ebp
	jmp	rdx
.LBB54_13:
	cmp	byte ptr [rsp + 103], 0
	je	.LBB54_72
# %bb.14:
	mov	dword ptr [rsp + 96], 3
	mov	r9b, 101
	mov	edx, 3
	mov	dword ptr [rsp], 0              # 4-byte Folded Spill
	xor	esi, esi
	jmp	.LBB54_24
.LBB54_15:
	mov	sil, 1
	mov	r9b, 69
.LBB54_16:
	mov	byte ptr [rsp + 103], 1
	mov	dword ptr [rsp + 96], 1
	mov	edx, 1
	mov	dword ptr [rsp], 0              # 4-byte Folded Spill
	jmp	.LBB54_24
.LBB54_17:
	mov	bpl, 1
	mov	r9b, 80
.LBB54_18:
	and	eax, 30720
	cmp	eax, 4096
	movzx	eax, r9b
	mov	r9d, 112
	cmove	r9d, eax
	mov	dword ptr [rsp + 96], 4
	cmp	byte ptr [rsp + 103], 0
	lea	rax, [rsp + 103]
	mov	qword ptr [rsp + 64], rax
	lea	rax, [rsp + 140]
	mov	qword ptr [rsp + 72], rax
	lea	rax, [rsp + 96]
	mov	qword ptr [rsp + 80], rax
	lea	rax, [rsp + 104]
	mov	qword ptr [rsp + 88], rax
	je	.LBB54_70
# %bb.19:
	mov	dword ptr [rsp], 0              # 4-byte Folded Spill
	mov	edx, 4
	jmp	.LBB54_25
.LBB54_20:
	mov	dil, 1
.LBB54_21:
	mov	byte ptr [rsp + 103], 1
	mov	dword ptr [rsp + 96], 2
	mov	r9b, 101
	mov	edx, 2
	mov	dword ptr [rsp], 0              # 4-byte Folded Spill
	mov	esi, edi
	jmp	.LBB54_24
.LBB54_22:
	mov	r8b, 1
	mov	r9b, 69
.LBB54_23:
	mov	byte ptr [rsp + 103], 1
	mov	dword ptr [rsp + 96], 3
	mov	al, 1
	mov	dword ptr [rsp], eax            # 4-byte Spill
	mov	edx, 3
	mov	esi, r8d
.LBB54_24:
	lea	rax, [rsp + 103]
	mov	qword ptr [rsp + 64], rax
	lea	rax, [rsp + 140]
	mov	qword ptr [rsp + 72], rax
	lea	rax, [rsp + 96]
	mov	qword ptr [rsp + 80], rax
	lea	rax, [rsp + 104]
	mov	qword ptr [rsp + 88], rax
	mov	ebp, esi
.LBB54_25:
	mov	dword ptr [rsp + 12], r9d       # 4-byte Spill
	movss	xmm0, dword ptr [rsp + 140]     # xmm0 = mem[0],zero,zero,zero
	mov	rdi, r15
	mov	rsi, r14
                                        # kill: def $ecx killed $ecx killed $rcx
	call	_ZSt8to_charsPcS_fSt12chars_formati@PLT
	mov	qword ptr [rsp + 112], rax
	mov	dword ptr [rsp + 120], edx
	cmp	edx, 75
	je	.LBB54_74
.LBB54_26:
	cmp	r15, rax
	setne	al
	and	bpl, al
	cmp	bpl, 1
	jne	.LBB54_29
# %bb.27:
	mov	rbx, r15
	.p2align	4, 0x90
.LBB54_28:                              # =>This Inner Loop Header: Depth=1
	movsx	edi, byte ptr [rbx]
	call	toupper@PLT
	mov	byte ptr [rbx], al
	inc	rbx
	cmp	rbx, qword ptr [rsp + 112]
	jne	.LBB54_28
.LBB54_29:
	mov	r13d, 1
	cmp	dword ptr [rsp + 140], 0
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	js	.LBB54_36
# %bb.30:
	mov	eax, dword ptr [rcx]
	shr	eax, 2
	and	eax, 3
	cmp	eax, 3
	je	.LBB54_33
# %bb.31:
	cmp	eax, 1
	jne	.LBB54_35
# %bb.32:
	mov	byte ptr [r15 - 1], 43
	jmp	.LBB54_34
.LBB54_33:
	mov	byte ptr [r15 - 1], 32
.LBB54_34:
	dec	r15
	jmp	.LBB54_36
.LBB54_35:
	xor	r13d, r13d
.LBB54_36:
	mov	rbx, qword ptr [rsp + 112]
	mov	r12, rbx
	sub	r12, r15
	test	byte ptr [rcx], 16
	je	.LBB54_125
# %bb.37:
	movss	xmm0, dword ptr [rsp + 140]     # xmm0 = mem[0],zero,zero,zero
	andps	xmm0, xmmword ptr [rip + .LCPI54_0]
	ucomiss	xmm0, dword ptr [rip + .LCPI54_1]
	je	.LBB54_125
# %bb.38:
	test	r12, r12
	mov	qword ptr [rsp + 40], r14       # 8-byte Spill
	je	.LBB54_53
# %bb.39:
	mov	rdi, r15
	mov	esi, 46
	mov	rdx, r12
	call	memchr@PLT
	test	rax, rax
	je	.LBB54_51
# %bb.40:
	mov	rbp, rax
	sub	rbp, r15
	cmp	rbp, -1
	je	.LBB54_51
# %bb.41:
	lea	r14, [rbp + 1]
	mov	rdx, r12
	sub	rdx, r14
	jbe	.LBB54_44
# %bb.42:
	lea	rdi, [r15 + r14]
	movzx	esi, byte ptr [rsp + 12]        # 1-byte Folded Reload
	mov	qword ptr [rsp + 16], rax       # 8-byte Spill
	call	memchr@PLT
	mov	rcx, rax
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	test	rcx, rcx
	je	.LBB54_44
# %bb.43:
	mov	rdx, rcx
	sub	rcx, r15
	mov	rdx, rcx
	cmp	rcx, -1
	jne	.LBB54_45
.LBB54_44:
	mov	rdx, r12
.LBB54_45:
	cmp	byte ptr [rsp], 0               # 1-byte Folded Reload
	je	.LBB54_71
# %bb.46:
	cmp	byte ptr [r15 + r13], 48
	jne	.LBB54_83
# %bb.47:
	mov	rcx, -1
	cmp	r12, r14
	jbe	.LBB54_121
# %bb.48:
	not	rax
	add	rax, rbx
.LBB54_49:                              # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [r15 + r14], 48
	jne	.LBB54_120
# %bb.50:                               #   in Loop: Header=BB54_49 Depth=1
	inc	r14
	dec	rax
	jne	.LBB54_49
	jmp	.LBB54_121
.LBB54_51:
	movzx	esi, byte ptr [rsp + 12]        # 1-byte Folded Reload
	mov	rdi, r15
	mov	rdx, r12
	call	memchr@PLT
	test	rax, rax
	je	.LBB54_53
# %bb.52:
	mov	rbp, rax
	sub	rbp, r15
	cmp	rbp, -1
	jne	.LBB54_54
.LBB54_53:
	mov	rbp, r12
.LBB54_54:
	mov	rax, rbp
	sub	rax, r13
	mov	rsi, rbp
.LBB54_55:
	mov	rcx, qword ptr [rsp + 104]
	mov	rdx, rcx
	sub	rdx, rax
	test	rcx, rcx
	cmove	rdx, rcx
	xor	eax, eax
	cmp	byte ptr [rsp], 0               # 1-byte Folded Reload
	cmovne	rax, rdx
	xor	r14d, r14d
	mov	qword ptr [rsp], rsi            # 8-byte Spill
	cmp	rbp, rsi
	sete	r14b
	add	r14, rax
	je	.LBB54_125
# %bb.56:
	mov	qword ptr [rsp + 16], rax       # 8-byte Spill
	mov	r13, qword ptr [rsp + 344]
	test	r13, r13
	jne	.LBB54_61
# %bb.57:
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	sub	rax, rbx
	cmp	r14, rax
	ja	.LBB54_61
# %bb.58:
	mov	r13, qword ptr [rsp]            # 8-byte Reload
	lea	rbx, [r15 + r13]
	lea	rdi, [rbx + r14]
	mov	rdx, r12
	sub	rdx, r13
	mov	rsi, rbx
	call	memmove@PLT
	cmp	rbp, r13
	jne	.LBB54_60
# %bb.59:
	inc	rbp
	mov	byte ptr [rbx], 46
	mov	r13, rbp
.LBB54_60:
	add	r13, r15
	mov	rdi, r13
	mov	esi, 48
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	call	memset@PLT
	add	r12, r14
	jmp	.LBB54_125
.LBB54_61:
	lea	rax, [r14 + r12]
	mov	rsi, qword ptr [rsp + 336]
	mov	ecx, 15
	lea	rdx, [rsp + 352]
	mov	qword ptr [rsp + 40], rsi       # 8-byte Spill
	cmp	rsi, rdx
	je	.LBB54_63
# %bb.62:
	mov	rcx, qword ptr [rsp + 352]
.LBB54_63:
	cmp	rcx, rax
	jae	.LBB54_88
# %bb.64:
	test	rax, rax
	js	.LBB54_187
# %bb.65:
	add	rcx, rcx
	movabs	rbx, 9223372036854775807
	cmp	rcx, rbx
	cmovb	rbx, rcx
	cmp	rcx, rax
	cmovbe	rbx, rax
	mov	rdi, rbx
	inc	rdi
	js	.LBB54_182
# %bb.66:
.Ltmp101:
	call	_Znwm@PLT
.Ltmp102:
# %bb.67:
	mov	rcx, rax
	cmp	r13, -1
	je	.LBB54_85
# %bb.68:
	test	r13, r13
	jne	.LBB54_84
# %bb.69:
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	movzx	eax, byte ptr [rax]
	mov	byte ptr [rcx], al
	jmp	.LBB54_85
.LBB54_70:
	mov	dword ptr [rsp + 12], r9d       # 4-byte Spill
	movss	xmm0, dword ptr [rsp + 140]     # xmm0 = mem[0],zero,zero,zero
	mov	rdi, r15
	mov	rsi, r14
	mov	edx, 4
	call	_ZSt8to_charsPcS_fSt12chars_format@PLT
	jmp	.LBB54_73
.LBB54_71:
                                        # implicit-def: $rax
	mov	rsi, rdx
	jmp	.LBB54_55
.LBB54_72:
	lea	rax, [rsp + 103]
	mov	qword ptr [rsp + 64], rax
	lea	rax, [rsp + 140]
	mov	qword ptr [rsp + 72], rax
	lea	rax, [rsp + 96]
	mov	qword ptr [rsp + 80], rax
	lea	rax, [rsp + 104]
	mov	qword ptr [rsp + 88], rax
	movss	xmm0, dword ptr [rsp + 140]     # xmm0 = mem[0],zero,zero,zero
	mov	rdi, r15
	mov	rsi, r14
	call	_ZSt8to_charsPcS_f@PLT
	mov	cl, 101
	mov	dword ptr [rsp + 12], ecx       # 4-byte Spill
	xor	ebp, ebp
.LBB54_73:
	mov	dword ptr [rsp], 0              # 4-byte Folded Spill
	mov	qword ptr [rsp + 112], rax
	mov	dword ptr [rsp + 120], edx
	cmp	edx, 75
	jne	.LBB54_26
.LBB54_74:
	mov	rbx, qword ptr [rsp + 104]
	add	rbx, 8
	cmp	dword ptr [rsp + 96], 2
	jne	.LBB54_77
# %bb.75:
	movss	xmm0, dword ptr [rsp + 140]     # xmm0 = mem[0],zero,zero,zero
	lea	rdi, [rsp + 52]
	call	frexpf@PLT
	mov	eax, dword ptr [rsp + 52]
	test	eax, eax
	jle	.LBB54_77
# %bb.76:
	imul	eax, eax, 4004
	imul	rcx, rax, 995517945
	shr	rcx, 32
	sub	eax, ecx
	shr	eax
	add	eax, ecx
	shr	eax, 13
	add	rbx, rax
	inc	rbx
.LBB54_77:
	cmp	rbx, 128
	jbe	.LBB54_186
.LBB54_78:
.Ltmp95:
	lea	rdi, [rsp + 336]
	mov	rsi, rbx
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm
.Ltmp96:
# %bb.79:
	mov	r14d, 30
	lea	r12, [rsp + 64]
	lea	r13, [rsp + 112]
	lea	rbx, [rsp + 336]
	lea	r15, [rsp + 368]
.LBB54_80:                              # =>This Inner Loop Header: Depth=1
	mov	rsi, qword ptr [rsp + 352]
	add	rsi, rsi
	lea	rax, [rsp + 352]
	cmp	qword ptr [rsp + 336], rax
	cmove	rsi, r14
	mov	qword ptr [rsp + 368], r12
	mov	qword ptr [rsp + 376], r13
.Ltmp98:
	mov	rdi, rbx
	mov	rdx, r15
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_
.Ltmp99:
# %bb.81:                               #   in Loop: Header=BB54_80 Depth=1
	cmp	dword ptr [rsp + 120], 75
	je	.LBB54_80
# %bb.82:
	mov	r15, qword ptr [rsp + 336]
	mov	r14, qword ptr [rsp + 344]
	add	r14, r15
	inc	r15
	mov	rax, qword ptr [rsp + 112]
	jmp	.LBB54_26
.LBB54_83:
	not	r13
	mov	rsi, rdx
	add	r13, rdx
	mov	rax, r13
	jmp	.LBB54_55
.LBB54_84:
	lea	rdx, [r13 + 1]
	mov	rdi, rcx
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	mov	qword ptr [rsp + 56], rcx       # 8-byte Spill
	call	memcpy@PLT
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
.LBB54_85:
	lea	rax, [rsp + 352]
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	cmp	rdi, rax
	je	.LBB54_87
# %bb.86:
	mov	r13, rcx
	call	_ZdlPv@PLT
	mov	rcx, r13
	mov	r13, qword ptr [rsp + 344]
.LBB54_87:
	mov	qword ptr [rsp + 336], rcx
	mov	qword ptr [rsp + 352], rbx
.LBB54_88:
	test	r13, r13
	je	.LBB54_92
# %bb.89:
.Ltmp103:
	lea	rdi, [rsp + 336]
	mov	rsi, qword ptr [rsp]            # 8-byte Reload
	mov	rdx, r14
	mov	ecx, 48
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc
.Ltmp104:
# %bb.90:
	cmp	rbp, qword ptr [rsp]            # 8-byte Folded Reload
	jne	.LBB54_124
# %bb.91:
	mov	rax, qword ptr [rsp + 336]
	mov	byte ptr [rax + rbp], 46
	jmp	.LBB54_124
.LBB54_92:
	mov	r14, qword ptr [rsp]            # 8-byte Reload
	cmp	r12, r14
	mov	r8, r14
	cmovb	r8, r12
.Ltmp105:
	lea	rdi, [rsp + 336]
	xor	esi, esi
	xor	edx, edx
	mov	rcx, r15
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm
.Ltmp106:
# %bb.93:
	cmp	rbp, r14
	jne	.LBB54_100
# %bb.94:
	mov	rax, qword ptr [rsp + 336]
	mov	r14, qword ptr [rsp + 344]
	lea	rbx, [r14 + 1]
	mov	ecx, 15
	lea	rdx, [rsp + 352]
	cmp	rax, rdx
	je	.LBB54_96
# %bb.95:
	mov	rcx, qword ptr [rsp + 352]
.LBB54_96:
	cmp	rbx, rcx
	jbe	.LBB54_99
# %bb.97:
.Ltmp108:
	lea	rdi, [rsp + 336]
	mov	r8d, 1
	mov	rsi, r14
	xor	edx, edx
	xor	ecx, ecx
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
.Ltmp109:
# %bb.98:
	mov	rax, qword ptr [rsp + 336]
.LBB54_99:
	mov	byte ptr [rax + r14], 46
	mov	qword ptr [rsp + 344], rbx
	mov	rax, qword ptr [rsp + 336]
	mov	byte ptr [rax + r14 + 1], 0
	mov	r14, qword ptr [rsp]            # 8-byte Reload
.LBB54_100:
	movabs	rbx, 9223372036854775807
	cmp	qword ptr [rsp + 16], 0         # 8-byte Folded Reload
	je	.LBB54_111
# %bb.101:
	mov	r14, qword ptr [rsp + 344]
	mov	rax, rbx
	sub	rax, r14
	cmp	rax, qword ptr [rsp + 16]       # 8-byte Folded Reload
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	jb	.LBB54_194
# %bb.102:
	lea	r13, [r14 + rax]
	mov	rdi, qword ptr [rsp + 336]
	mov	eax, 15
	lea	rcx, [rsp + 352]
	cmp	rdi, rcx
	je	.LBB54_104
# %bb.103:
	mov	rax, qword ptr [rsp + 352]
.LBB54_104:
	cmp	r13, rax
	mov	r8, qword ptr [rsp + 16]        # 8-byte Reload
	jbe	.LBB54_107
# %bb.105:
.Ltmp110:
	lea	rdi, [rsp + 336]
	mov	rsi, r14
	xor	edx, edx
	xor	ecx, ecx
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
.Ltmp111:
# %bb.106:
	mov	rdi, qword ptr [rsp + 336]
	mov	r8, qword ptr [rsp + 16]        # 8-byte Reload
.LBB54_107:
	add	rdi, r14
	cmp	r8, 1
	jne	.LBB54_109
# %bb.108:
	mov	byte ptr [rdi], 48
	jmp	.LBB54_110
.LBB54_109:
	mov	esi, 48
	mov	rdx, r8
	call	memset@PLT
.LBB54_110:
	mov	r14, qword ptr [rsp]            # 8-byte Reload
	mov	qword ptr [rsp + 344], r13
	mov	rax, qword ptr [rsp + 336]
	mov	byte ptr [rax + r13], 0
.LBB54_111:
	mov	r8, r12
	sub	r8, r14
	jb	.LBB54_188
# %bb.112:
	mov	rsi, qword ptr [rsp + 344]
	sub	rbx, rsi
	cmp	rbx, r8
	jb	.LBB54_191
# %bb.113:
	lea	rbx, [rsi + r8]
	mov	rdi, qword ptr [rsp + 336]
	mov	eax, 15
	lea	rcx, [rsp + 352]
	cmp	rdi, rcx
	je	.LBB54_115
# %bb.114:
	mov	rax, qword ptr [rsp + 352]
.LBB54_115:
	add	r15, r14
	cmp	rbx, rax
	jbe	.LBB54_117
# %bb.116:
.Ltmp112:
	lea	rdi, [rsp + 336]
	xor	edx, edx
	mov	rcx, r15
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
.Ltmp113:
	jmp	.LBB54_123
.LBB54_117:
	cmp	r12, r14
	je	.LBB54_123
# %bb.118:
	add	rdi, rsi
	cmp	r8, 1
	jne	.LBB54_122
# %bb.119:
	movzx	eax, byte ptr [r15]
	mov	byte ptr [rdi], al
	jmp	.LBB54_123
.LBB54_120:
	mov	rcx, r14
.LBB54_121:
	mov	rsi, rdx
	mov	rax, rdx
	sub	rax, rcx
	jmp	.LBB54_55
.LBB54_122:
	mov	rsi, r15
	mov	rdx, r8
	call	memcpy@PLT
.LBB54_123:
	mov	qword ptr [rsp + 344], rbx
	mov	rax, qword ptr [rsp + 336]
	mov	byte ptr [rax + rbx], 0
.LBB54_124:
	mov	r15, qword ptr [rsp + 336]
	mov	r12, qword ptr [rsp + 344]
.LBB54_125:
	lea	rbp, [rsp + 192]
	mov	qword ptr [rsp + 176], rbp
	mov	qword ptr [rsp + 184], 0
	mov	byte ptr [rsp + 192], 0
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	mov	eax, dword ptr [rax]
	test	al, 32
	je	.LBB54_135
# %bb.127:
	movss	xmm0, dword ptr [rsp + 140]     # xmm0 = mem[0],zero,zero,zero
	andps	xmm0, xmmword ptr [rip + .LCPI54_0]
	ucomiss	xmm0, dword ptr [rip + .LCPI54_1]
	je	.LBB54_135
# %bb.128:
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	lea	rbx, [rax + 24]
	cmp	byte ptr [rax + 32], 0
	jne	.LBB54_130
# %bb.129:
	mov	rdi, rbx
	call	_ZNSt6localeC1Ev@PLT
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	mov	byte ptr [rax + 32], 1
.LBB54_130:
	lea	r14, [rsp + 144]
	mov	rdi, r14
	mov	rsi, rbx
	call	_ZNSt6localeC1ERKS_@PLT
.Ltmp124:
	movzx	r8d, byte ptr [rsp + 12]        # 1-byte Folded Reload
	lea	rdi, [rsp + 368]
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	mov	rdx, r12
	mov	rcx, r15
	mov	r9, r14
	call	_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale
.Ltmp125:
# %bb.131:
	mov	rdi, qword ptr [rsp + 176]
	cmp	rdi, rbp
	je	.LBB54_143
# %bb.132:
	mov	rsi, qword ptr [rsp + 368]
	lea	rax, [rsp + 384]
	cmp	rsi, rax
	je	.LBB54_147
# %bb.133:
	mov	rcx, qword ptr [rsp + 192]
	mov	qword ptr [rsp + 176], rsi
	movups	xmm0, xmmword ptr [rsp + 376]
	movups	xmmword ptr [rsp + 184], xmm0
	test	rdi, rdi
	je	.LBB54_145
# %bb.134:
	mov	qword ptr [rsp + 368], rdi
	mov	qword ptr [rsp + 384], rcx
	jmp	.LBB54_152
.LBB54_135:
	mov	r13, r15
	shr	eax, 7
	and	eax, 3
	cmp	eax, 2
	je	.LBB54_136
.LBB54_157:
	cmp	eax, 1
	jne	.LBB54_161
# %bb.158:
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	movzx	eax, word ptr [rax + 4]
	sub	rax, r12
	ja	.LBB54_159
.LBB54_161:
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	mov	rbx, qword ptr [rax + 16]
	test	r12, r12
	je	.LBB54_169
# %bb.162:
	mov	r14, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	sub	r14, rdi
	add	r14, qword ptr [rbx + 16]
	cmp	r14, r12
	ja	.LBB54_168
	.p2align	4, 0x90
.LBB54_163:                             # =>This Inner Loop Header: Depth=1
	test	r14, r14
	je	.LBB54_165
# %bb.164:                              #   in Loop: Header=BB54_163 Depth=1
	mov	rsi, r13
	mov	rdx, r14
	call	memcpy@PLT
	mov	rdi, qword ptr [rbx + 24]
.LBB54_165:                             #   in Loop: Header=BB54_163 Depth=1
	add	rdi, r14
	mov	qword ptr [rbx + 24], rdi
	mov	rax, qword ptr [rbx]
.Ltmp136:
	mov	rdi, rbx
	call	qword ptr [rax]
.Ltmp137:
# %bb.166:                              #   in Loop: Header=BB54_163 Depth=1
	sub	r12, r14
	add	r13, r14
	mov	r14, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	sub	r14, rdi
	add	r14, qword ptr [rbx + 16]
	cmp	r14, r12
	jbe	.LBB54_163
# %bb.167:
	test	r12, r12
	je	.LBB54_169
.LBB54_168:
	mov	rsi, r13
	mov	rdx, r12
	call	memcpy@PLT
	add	qword ptr [rbx + 24], r12
.LBB54_169:
	mov	rdi, qword ptr [rsp + 176]
	cmp	rdi, rbp
	je	.LBB54_171
.LBB54_170:
	call	_ZdlPv@PLT
.LBB54_171:
	mov	rdi, qword ptr [rsp + 336]
	lea	rax, [rsp + 352]
	cmp	rdi, rax
	je	.LBB54_173
# %bb.172:
	call	_ZdlPv@PLT
.LBB54_173:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 400]
	jne	.LBB54_217
# %bb.174:
	mov	rax, rbx
	add	rsp, 408
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB54_143:
	.cfi_def_cfa_offset 464
	mov	rcx, qword ptr [rsp + 368]
	lea	rax, [rsp + 384]
	cmp	rcx, rax
	je	.LBB54_146
# %bb.144:
	mov	qword ptr [rsp + 176], rcx
	movups	xmm0, xmmword ptr [rsp + 376]
	movups	xmmword ptr [rsp + 184], xmm0
.LBB54_145:
	mov	qword ptr [rsp + 368], rax
	mov	rdi, rax
	jmp	.LBB54_152
.LBB54_146:
	mov	rsi, rax
.LBB54_147:
	mov	rdx, qword ptr [rsp + 376]
	test	rdx, rdx
	je	.LBB54_151
# %bb.148:
	cmp	rdx, 1
	jne	.LBB54_150
# %bb.149:
	movzx	eax, byte ptr [rsi]
	mov	byte ptr [rdi], al
	jmp	.LBB54_151
.LBB54_150:
	call	memcpy@PLT
.LBB54_151:
	mov	rax, qword ptr [rsp + 376]
	mov	qword ptr [rsp + 184], rax
	mov	rcx, qword ptr [rsp + 176]
	mov	byte ptr [rcx + rax], 0
	mov	rdi, qword ptr [rsp + 368]
.LBB54_152:
	mov	qword ptr [rsp + 376], 0
	mov	byte ptr [rdi], 0
	mov	rdi, qword ptr [rsp + 368]
	lea	rax, [rsp + 384]
	cmp	rdi, rax
	je	.LBB54_154
# %bb.153:
	call	_ZdlPv@PLT
.LBB54_154:
	lea	rdi, [rsp + 144]
	call	_ZNSt6localeD1Ev@PLT
	mov	rax, qword ptr [rsp + 184]
	mov	r13, r15
	test	rax, rax
	je	.LBB54_156
# %bb.155:
	mov	r13, qword ptr [rsp + 176]
	mov	r12, rax
.LBB54_156:
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	mov	eax, dword ptr [rax]
	shr	eax, 7
	and	eax, 3
	cmp	eax, 2
	jne	.LBB54_157
.LBB54_136:
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	movzx	eax, word ptr [rax + 4]
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	mov	rdx, qword ptr [rdi]
	mov	esi, edx
	and	esi, 15
	cmp	rsi, rax
	jbe	.LBB54_138
# %bb.137:
	shr	rdx, 4
	lea	ecx, [rax + 4*rax]
                                        # kill: def $cl killed $cl killed $ecx
	shr	rdx, cl
	and	dl, 31
	mov	rcx, qword ptr [rdi + 8]
	shl	eax, 4
	movaps	xmm0, xmmword ptr [rcx + rax]
	movaps	xmmword ptr [rsp + 144], xmm0
	mov	ecx, edx
	jmp	.LBB54_141
.LBB54_138:
	xor	ecx, ecx
	test	rsi, rsi
	jne	.LBB54_141
# %bb.139:
	shr	rdx, 4
	cmp	rdx, rax
	jbe	.LBB54_141
# %bb.140:
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	mov	rcx, qword ptr [rcx + 8]
	shl	eax, 5
	movaps	xmm0, xmmword ptr [rcx + rax]
	movaps	xmmword ptr [rsp + 144], xmm0
	movzx	ecx, byte ptr [rcx + rax + 16]
.LBB54_141:
	movaps	xmm0, xmmword ptr [rsp + 144]
	movaps	xmmword ptr [rsp + 368], xmm0
	mov	byte ptr [rsp + 384], cl
.Ltmp127:
	movzx	edx, cl
	lea	rdi, [rsp + 368]
	lea	rsi, [rsp + 175]
	call	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE
.Ltmp128:
# %bb.142:
	sub	rax, r12
	jbe	.LBB54_161
.LBB54_159:
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	mov	edx, dword ptr [rsi]
	mov	ecx, edx
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	mov	rdi, qword ptr [rdi + 16]
	and	ecx, 3
	je	.LBB54_175
# %bb.160:
	mov	r9d, dword ptr [rsi + 8]
	jmp	.LBB54_180
.LBB54_175:
	mov	ecx, 2
	mov	r9d, 32
	test	dl, 64
	je	.LBB54_180
# %bb.176:
	movss	xmm0, dword ptr [rsp + 140]     # xmm0 = mem[0],zero,zero,zero
	andps	xmm0, xmmword ptr [rip + .LCPI54_0]
	ucomiss	xmm0, dword ptr [rip + .LCPI54_1]
	je	.LBB54_180
# %bb.177:
	movzx	edx, byte ptr [r15]
	lea	rsi, [rip + _ZNSt8__detail31__from_chars_alnum_to_val_tableILb0EE5valueE]
	mov	r9d, 48
	cmp	byte ptr [rdx + rsi], 16
	jb	.LBB54_180
# %bb.178:
	movzx	edx, byte ptr [r13]
	mov	rsi, qword ptr [rdi + 24]
	lea	r8, [rsi + 1]
	mov	qword ptr [rdi + 24], r8
	mov	byte ptr [rsi], dl
	mov	rdx, qword ptr [rdi + 24]
	sub	rdx, qword ptr [rdi + 8]
	cmp	rdx, qword ptr [rdi + 16]
	je	.LBB54_185
.LBB54_179:
	inc	r13
	dec	r12
.LBB54_180:
.Ltmp133:
	mov	rsi, r12
	mov	rdx, r13
	mov	r8, rax
	call	_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi
.Ltmp134:
# %bb.181:
	mov	rbx, rax
	mov	rdi, qword ptr [rsp + 176]
	cmp	rdi, rbp
	jne	.LBB54_170
	jmp	.LBB54_171
.LBB54_182:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 400]
	jne	.LBB54_217
# %bb.183:
.Ltmp119:
	call	_ZSt17__throw_bad_allocv@PLT
.Ltmp120:
# %bb.184:
.LBB54_185:
	mov	rcx, qword ptr [rdi]
.Ltmp130:
	mov	rbx, rdi
	mov	r14, rax
	call	qword ptr [rcx]
	mov	r9d, 48
	mov	rdi, rbx
	mov	ecx, 2
	mov	rax, r14
.Ltmp131:
	jmp	.LBB54_179
.LBB54_186:
	mov	ebx, 256
	jmp	.LBB54_78
.LBB54_187:
	lea	rdi, [rip + .L.str.3]
	jmp	.LBB54_195
.LBB54_188:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 400]
	jne	.LBB54_217
# %bb.189:
.Ltmp116:
	lea	rdi, [rip + .L.str.12]
	lea	rsi, [rip + .L.str.28]
	mov	rdx, qword ptr [rsp]            # 8-byte Reload
	mov	rcx, r12
	xor	eax, eax
	call	_ZSt24__throw_out_of_range_fmtPKcz@PLT
.Ltmp117:
# %bb.190:
.LBB54_191:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 400]
	jne	.LBB54_217
# %bb.192:
.Ltmp114:
	lea	rdi, [rip + .L.str.7]
	call	_ZSt20__throw_length_errorPKc@PLT
.Ltmp115:
# %bb.193:
.LBB54_194:
	lea	rdi, [rip + .L.str.8]
.LBB54_195:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 400]
	jne	.LBB54_217
# %bb.196:
.Ltmp121:
	call	_ZSt20__throw_length_errorPKc@PLT
.Ltmp122:
# %bb.197:
.LBB54_198:
.Ltmp132:
	jmp	.LBB54_209
.LBB54_199:
.Ltmp97:
	jmp	.LBB54_204
.LBB54_200:
.Ltmp100:
	jmp	.LBB54_204
.LBB54_201:
.Ltmp107:
	jmp	.LBB54_204
.LBB54_202:
.Ltmp118:
	jmp	.LBB54_204
.LBB54_203:
.Ltmp94:
	jmp	.LBB54_204
.LBB54_205:
.Ltmp126:
	mov	rbx, rax
	lea	rdi, [rsp + 144]
	call	_ZNSt6localeD1Ev@PLT
	jmp	.LBB54_210
.LBB54_206:
.Ltmp135:
	jmp	.LBB54_209
.LBB54_207:
.Ltmp129:
	jmp	.LBB54_209
.LBB54_208:
.Ltmp138:
.LBB54_209:
	mov	rbx, rax
.LBB54_210:
	mov	rdi, qword ptr [rsp + 176]
	cmp	rdi, rbp
	jne	.LBB54_214
# %bb.211:
	mov	rdi, qword ptr [rsp + 336]
	lea	rax, [rsp + 352]
	cmp	rdi, rax
	jne	.LBB54_216
.LBB54_212:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 400]
	jne	.LBB54_217
.LBB54_213:
	mov	rdi, rbx
	call	_Unwind_Resume@PLT
.LBB54_214:
	call	_ZdlPv@PLT
	mov	rdi, qword ptr [rsp + 336]
	lea	rax, [rsp + 352]
	cmp	rdi, rax
	je	.LBB54_212
	jmp	.LBB54_216
.LBB54_215:
.Ltmp123:
.LBB54_204:
	mov	rbx, rax
	mov	rdi, qword ptr [rsp + 336]
	lea	rax, [rsp + 352]
	cmp	rdi, rax
	je	.LBB54_212
.LBB54_216:
	call	_ZdlPv@PLT
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 400]
	je	.LBB54_213
.LBB54_217:
	call	__stack_chk_fail@PLT
.Lfunc_end54:
	.size	_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_, .Lfunc_end54-_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.cfi_endproc
	.section	.rodata._ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"aG",@progbits,_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.p2align	2, 0x0
.LJTI54_0:
	.long	.LBB54_13-.LJTI54_0
	.long	.LBB54_18-.LJTI54_0
	.long	.LBB54_17-.LJTI54_0
	.long	.LBB54_16-.LJTI54_0
	.long	.LBB54_15-.LJTI54_0
	.long	.LBB54_21-.LJTI54_0
	.long	.LBB54_20-.LJTI54_0
	.long	.LBB54_23-.LJTI54_0
	.long	.LBB54_22-.LJTI54_0
	.section	.gcc_except_table._ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"aG",@progbits,_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.p2align	2, 0x0
GCC_except_table54:
.Lexception13:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end13-.Lcst_begin13
.Lcst_begin13:
	.uleb128 .Ltmp92-.Lfunc_begin13         # >> Call Site 1 <<
	.uleb128 .Ltmp93-.Ltmp92                #   Call between .Ltmp92 and .Ltmp93
	.uleb128 .Ltmp94-.Lfunc_begin13         #     jumps to .Ltmp94
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp93-.Lfunc_begin13         # >> Call Site 2 <<
	.uleb128 .Ltmp101-.Ltmp93               #   Call between .Ltmp93 and .Ltmp101
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp101-.Lfunc_begin13        # >> Call Site 3 <<
	.uleb128 .Ltmp102-.Ltmp101              #   Call between .Ltmp101 and .Ltmp102
	.uleb128 .Ltmp123-.Lfunc_begin13        #     jumps to .Ltmp123
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp102-.Lfunc_begin13        # >> Call Site 4 <<
	.uleb128 .Ltmp95-.Ltmp102               #   Call between .Ltmp102 and .Ltmp95
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp95-.Lfunc_begin13         # >> Call Site 5 <<
	.uleb128 .Ltmp96-.Ltmp95                #   Call between .Ltmp95 and .Ltmp96
	.uleb128 .Ltmp97-.Lfunc_begin13         #     jumps to .Ltmp97
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp98-.Lfunc_begin13         # >> Call Site 6 <<
	.uleb128 .Ltmp99-.Ltmp98                #   Call between .Ltmp98 and .Ltmp99
	.uleb128 .Ltmp100-.Lfunc_begin13        #     jumps to .Ltmp100
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp99-.Lfunc_begin13         # >> Call Site 7 <<
	.uleb128 .Ltmp103-.Ltmp99               #   Call between .Ltmp99 and .Ltmp103
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp103-.Lfunc_begin13        # >> Call Site 8 <<
	.uleb128 .Ltmp104-.Ltmp103              #   Call between .Ltmp103 and .Ltmp104
	.uleb128 .Ltmp123-.Lfunc_begin13        #     jumps to .Ltmp123
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp105-.Lfunc_begin13        # >> Call Site 9 <<
	.uleb128 .Ltmp106-.Ltmp105              #   Call between .Ltmp105 and .Ltmp106
	.uleb128 .Ltmp107-.Lfunc_begin13        #     jumps to .Ltmp107
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp108-.Lfunc_begin13        # >> Call Site 10 <<
	.uleb128 .Ltmp111-.Ltmp108              #   Call between .Ltmp108 and .Ltmp111
	.uleb128 .Ltmp123-.Lfunc_begin13        #     jumps to .Ltmp123
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp111-.Lfunc_begin13        # >> Call Site 11 <<
	.uleb128 .Ltmp112-.Ltmp111              #   Call between .Ltmp111 and .Ltmp112
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp112-.Lfunc_begin13        # >> Call Site 12 <<
	.uleb128 .Ltmp113-.Ltmp112              #   Call between .Ltmp112 and .Ltmp113
	.uleb128 .Ltmp118-.Lfunc_begin13        #     jumps to .Ltmp118
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp113-.Lfunc_begin13        # >> Call Site 13 <<
	.uleb128 .Ltmp124-.Ltmp113              #   Call between .Ltmp113 and .Ltmp124
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp124-.Lfunc_begin13        # >> Call Site 14 <<
	.uleb128 .Ltmp125-.Ltmp124              #   Call between .Ltmp124 and .Ltmp125
	.uleb128 .Ltmp126-.Lfunc_begin13        #     jumps to .Ltmp126
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp125-.Lfunc_begin13        # >> Call Site 15 <<
	.uleb128 .Ltmp136-.Ltmp125              #   Call between .Ltmp125 and .Ltmp136
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp136-.Lfunc_begin13        # >> Call Site 16 <<
	.uleb128 .Ltmp137-.Ltmp136              #   Call between .Ltmp136 and .Ltmp137
	.uleb128 .Ltmp138-.Lfunc_begin13        #     jumps to .Ltmp138
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp137-.Lfunc_begin13        # >> Call Site 17 <<
	.uleb128 .Ltmp127-.Ltmp137              #   Call between .Ltmp137 and .Ltmp127
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp127-.Lfunc_begin13        # >> Call Site 18 <<
	.uleb128 .Ltmp128-.Ltmp127              #   Call between .Ltmp127 and .Ltmp128
	.uleb128 .Ltmp129-.Lfunc_begin13        #     jumps to .Ltmp129
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp133-.Lfunc_begin13        # >> Call Site 19 <<
	.uleb128 .Ltmp134-.Ltmp133              #   Call between .Ltmp133 and .Ltmp134
	.uleb128 .Ltmp135-.Lfunc_begin13        #     jumps to .Ltmp135
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp119-.Lfunc_begin13        # >> Call Site 20 <<
	.uleb128 .Ltmp120-.Ltmp119              #   Call between .Ltmp119 and .Ltmp120
	.uleb128 .Ltmp123-.Lfunc_begin13        #     jumps to .Ltmp123
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp130-.Lfunc_begin13        # >> Call Site 21 <<
	.uleb128 .Ltmp131-.Ltmp130              #   Call between .Ltmp130 and .Ltmp131
	.uleb128 .Ltmp132-.Lfunc_begin13        #     jumps to .Ltmp132
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp116-.Lfunc_begin13        # >> Call Site 22 <<
	.uleb128 .Ltmp115-.Ltmp116              #   Call between .Ltmp116 and .Ltmp115
	.uleb128 .Ltmp118-.Lfunc_begin13        #     jumps to .Ltmp118
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp121-.Lfunc_begin13        # >> Call Site 23 <<
	.uleb128 .Ltmp122-.Ltmp121              #   Call between .Ltmp121 and .Ltmp122
	.uleb128 .Ltmp123-.Lfunc_begin13        #     jumps to .Ltmp123
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp122-.Lfunc_begin13        # >> Call Site 24 <<
	.uleb128 .Lfunc_end54-.Ltmp122          #   Call between .Ltmp122 and .Lfunc_end54
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end13:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc,"axG",@progbits,_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc,comdat
	.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc # -- Begin function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc
	.p2align	4, 0x90
	.type	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc,@function
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc: # @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r12
	.cfi_def_cfa_offset 40
	push	rbx
	.cfi_def_cfa_offset 48
	.cfi_offset rbx, -48
	.cfi_offset r12, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	ebp, ecx
	mov	r15, rdx
	mov	r14, rsi
	mov	rcx, qword ptr [rdi + 8]
	mov	rdx, rcx
	sub	rdx, rsi
	jb	.LBB55_17
# %bb.1:
	movabs	rax, 9223372036854775807
	xor	rax, rcx
	cmp	rax, r15
	jb	.LBB55_18
# %bb.2:
	mov	rbx, rdi
	lea	r12, [rcx + r15]
	mov	rsi, qword ptr [rdi]
	add	rdi, 16
	mov	eax, 15
	cmp	rsi, rdi
	je	.LBB55_4
# %bb.3:
	mov	rax, qword ptr [rbx + 16]
.LBB55_4:
	cmp	r12, rax
	jbe	.LBB55_5
# %bb.11:
	mov	rdi, rbx
	mov	rsi, r14
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r15
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
.LBB55_12:
	test	r15, r15
	je	.LBB55_16
.LBB55_13:
	add	r14, qword ptr [rbx]
	cmp	r15, 1
	jne	.LBB55_15
# %bb.14:
	mov	byte ptr [r14], bpl
	jmp	.LBB55_16
.LBB55_5:
	test	r15, r15
	je	.LBB55_12
# %bb.6:
	cmp	rcx, r14
	je	.LBB55_12
# %bb.7:
	test	rdx, rdx
	je	.LBB55_13
# %bb.8:
	add	rsi, r14
	lea	rdi, [rsi + r15]
	cmp	rdx, 1
	jne	.LBB55_10
# %bb.9:
	movzx	eax, byte ptr [rsi]
	mov	byte ptr [rdi], al
	jmp	.LBB55_13
.LBB55_15:
	movzx	esi, bpl
	mov	rdi, r14
	mov	rdx, r15
	call	memset@PLT
.LBB55_16:
	mov	qword ptr [rbx + 8], r12
	mov	rax, qword ptr [rbx]
	mov	byte ptr [rax + r12], 0
	mov	rax, rbx
	pop	rbx
	.cfi_def_cfa_offset 40
	pop	r12
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB55_10:
	.cfi_def_cfa_offset 48
	call	memmove@PLT
	jmp	.LBB55_13
.LBB55_17:
	lea	rdi, [rip + .L.str.33]
	lea	rsi, [rip + .L.str.32]
	mov	rdx, r14
	xor	eax, eax
	call	_ZSt24__throw_out_of_range_fmtPKcz@PLT
.LBB55_18:
	lea	rdi, [rip + .L.str.8]
	call	_ZSt20__throw_length_errorPKc@PLT
.Lfunc_end55:
	.size	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc, .Lfunc_end55-_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale,"axG",@progbits,_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale,comdat
	.weak	_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale # -- Begin function _ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale
	.p2align	4, 0x90
	.type	_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale,@function
_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale: # @_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale
.Lfunc_begin14:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception14
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 168
	.cfi_def_cfa_offset 224
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	r12, r9
	mov	r13d, r8d
	mov	r15, rcx
	mov	r14, rdx
	mov	rbx, rdi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 160], rax
	mov	qword ptr [rsp + 56], rdx
	mov	qword ptr [rsp + 64], rcx
	lea	rbp, [rdi + 16]
	mov	qword ptr [rdi], rbp
	mov	qword ptr [rdi + 8], 0
	mov	byte ptr [rdi + 16], 0
.Ltmp139:
	call	_ZNSt6locale7classicEv@PLT
.Ltmp140:
# %bb.1:
	mov	rdi, r12
	mov	rsi, rax
	call	_ZNKSt6localeeqERKS_@PLT
	test	al, al
	jne	.LBB56_13
# %bb.2:
	mov	dword ptr [rsp + 20], r13d      # 4-byte Spill
	mov	rdi, qword ptr [rip + _ZNSt7__cxx118numpunctIcE2idE@GOTPCREL]
	call	_ZNKSt6locale2id5_M_idEv@PLT
	mov	rcx, qword ptr [r12]
	mov	rcx, qword ptr [rcx + 8]
	mov	r12, qword ptr [rcx + 8*rax]
	test	r12, r12
	je	.LBB56_15
# %bb.3:
	mov	rax, qword ptr [r12]
.Ltmp142:
	mov	rdi, r12
	call	qword ptr [rax + 16]
.Ltmp143:
# %bb.4:
	mov	r13d, eax
	mov	byte ptr [rsp + 55], al
	mov	rax, qword ptr [r12]
.Ltmp145:
	lea	rdi, [rsp + 128]
	mov	rsi, r12
	call	qword ptr [rax + 32]
.Ltmp146:
# %bb.5:
	cmp	qword ptr [rsp + 136], 0
	jne	.LBB56_7
# %bb.6:
	cmp	r13b, 46
	je	.LBB56_11
.LBB56_7:
	mov	qword ptr [rsp + 8], rbp        # 8-byte Spill
	test	r14, r14
	je	.LBB56_9
# %bb.8:
	mov	rdi, r15
	mov	esi, 46
	mov	rdx, r14
	call	memchr@PLT
	mov	rcx, rax
	sub	rcx, r15
	xor	ebp, ebp
	cmp	rax, 1
	mov	r13d, 0
	sbb	r13, r13
	or	r13, rcx
	mov	qword ptr [rsp + 40], r13
	movsx	esi, byte ptr [rsp + 20]        # 1-byte Folded Reload
	mov	rdi, r15
	mov	rdx, r14
	call	memchr@PLT
	mov	rcx, rax
	sub	rcx, r15
	cmp	rax, 1
	sbb	rbp, rbp
	or	rbp, rcx
	jmp	.LBB56_10
.LBB56_9:
	mov	qword ptr [rsp + 40], -1
	mov	r13, -1
	mov	rbp, -1
.LBB56_10:
	cmp	rbp, r13
	cmovb	r13, rbp
	cmp	r13, -1
	cmove	r13, r14
	mov	qword ptr [rsp + 32], r13
	sub	r14, r13
	mov	qword ptr [rsp + 24], r14
	lea	rsi, [r14 + 2*r13]
	mov	qword ptr [rsp + 72], r12
	lea	rax, [rsp + 128]
	mov	qword ptr [rsp + 80], rax
	lea	rax, [rsp + 56]
	mov	qword ptr [rsp + 88], rax
	lea	rax, [rsp + 32]
	mov	qword ptr [rsp + 96], rax
	lea	rax, [rsp + 24]
	mov	qword ptr [rsp + 104], rax
	lea	rax, [rsp + 40]
	mov	qword ptr [rsp + 112], rax
	lea	rax, [rsp + 55]
	mov	qword ptr [rsp + 120], rax
.Ltmp148:
	lea	rdx, [rsp + 72]
	mov	rdi, rbx
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_
.Ltmp149:
.LBB56_11:
	mov	rdi, qword ptr [rsp + 128]
	lea	rax, [rsp + 144]
	cmp	rdi, rax
	je	.LBB56_13
# %bb.12:
	call	_ZdlPv@PLT
.LBB56_13:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 160]
	jne	.LBB56_30
# %bb.14:
	mov	rax, rbx
	add	rsp, 168
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB56_15:
	.cfi_def_cfa_offset 224
	mov	qword ptr [rsp + 8], rbp        # 8-byte Spill
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 160]
	jne	.LBB56_30
# %bb.16:
.Ltmp151:
	call	_ZSt16__throw_bad_castv@PLT
.Ltmp152:
# %bb.17:
.LBB56_18:
.Ltmp150:
	mov	r14, rax
	mov	rdi, qword ptr [rsp + 128]
	lea	rax, [rsp + 144]
	cmp	rdi, rax
	jne	.LBB56_22
# %bb.19:
	mov	rdi, qword ptr [rbx]
	cmp	rdi, qword ptr [rsp + 8]        # 8-byte Folded Reload
	jne	.LBB56_29
.LBB56_20:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 160]
	jne	.LBB56_30
.LBB56_21:
	mov	rdi, r14
	call	_Unwind_Resume@PLT
.LBB56_22:
	call	_ZdlPv@PLT
	mov	rdi, qword ptr [rbx]
	cmp	rdi, qword ptr [rsp + 8]        # 8-byte Folded Reload
	je	.LBB56_20
	jmp	.LBB56_29
.LBB56_23:
.Ltmp147:
	jmp	.LBB56_27
.LBB56_24:
.Ltmp153:
	jmp	.LBB56_28
.LBB56_25:
.Ltmp144:
	jmp	.LBB56_27
.LBB56_26:
.Ltmp141:
.LBB56_27:
	mov	qword ptr [rsp + 8], rbp        # 8-byte Spill
.LBB56_28:
	mov	r14, rax
	mov	rdi, qword ptr [rbx]
	cmp	rdi, qword ptr [rsp + 8]        # 8-byte Folded Reload
	je	.LBB56_20
.LBB56_29:
	call	_ZdlPv@PLT
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 160]
	je	.LBB56_21
.LBB56_30:
	call	__stack_chk_fail@PLT
.Lfunc_end56:
	.size	_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale, .Lfunc_end56-_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale
	.cfi_endproc
	.section	.gcc_except_table._ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale,"aG",@progbits,_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale,comdat
	.p2align	2, 0x0
GCC_except_table56:
.Lexception14:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end14-.Lcst_begin14
.Lcst_begin14:
	.uleb128 .Ltmp139-.Lfunc_begin14        # >> Call Site 1 <<
	.uleb128 .Ltmp140-.Ltmp139              #   Call between .Ltmp139 and .Ltmp140
	.uleb128 .Ltmp141-.Lfunc_begin14        #     jumps to .Ltmp141
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp142-.Lfunc_begin14        # >> Call Site 2 <<
	.uleb128 .Ltmp143-.Ltmp142              #   Call between .Ltmp142 and .Ltmp143
	.uleb128 .Ltmp144-.Lfunc_begin14        #     jumps to .Ltmp144
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp145-.Lfunc_begin14        # >> Call Site 3 <<
	.uleb128 .Ltmp146-.Ltmp145              #   Call between .Ltmp145 and .Ltmp146
	.uleb128 .Ltmp147-.Lfunc_begin14        #     jumps to .Ltmp147
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp148-.Lfunc_begin14        # >> Call Site 4 <<
	.uleb128 .Ltmp149-.Ltmp148              #   Call between .Ltmp148 and .Ltmp149
	.uleb128 .Ltmp150-.Lfunc_begin14        #     jumps to .Ltmp150
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp151-.Lfunc_begin14        # >> Call Site 5 <<
	.uleb128 .Ltmp152-.Ltmp151              #   Call between .Ltmp151 and .Ltmp152
	.uleb128 .Ltmp153-.Lfunc_begin14        #     jumps to .Ltmp153
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp152-.Lfunc_begin14        # >> Call Site 6 <<
	.uleb128 .Lfunc_end56-.Ltmp152          #   Call between .Ltmp152 and .Lfunc_end56
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end14:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_,"axG",@progbits,_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_,comdat
	.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_ # -- Begin function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_
	.p2align	4, 0x90
	.type	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_,@function
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_: # @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	push	rax
	.cfi_def_cfa_offset 64
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	r14, rdx
	mov	r12, rsi
	mov	rbx, rdi
	mov	r13, qword ptr [rdi]
	lea	rbp, [rdi + 16]
	mov	eax, 15
	cmp	r13, rbp
	je	.LBB57_2
# %bb.1:
	mov	rax, qword ptr [rbx + 16]
.LBB57_2:
	cmp	rax, r12
	jae	.LBB57_3
# %bb.4:
	mov	qword ptr [rsp], r14            # 8-byte Spill
	test	r12, r12
	js	.LBB57_22
# %bb.5:
	add	rax, rax
	movabs	r14, 9223372036854775807
	cmp	rax, r14
	cmovb	r14, rax
	cmp	rax, r12
	cmovbe	r14, r12
	mov	rdi, r14
	inc	rdi
	js	.LBB57_23
# %bb.6:
	call	_Znwm@PLT
	mov	r15, rax
	mov	rdx, qword ptr [rbx + 8]
	cmp	rdx, -1
	je	.LBB57_10
# %bb.7:
	test	rdx, rdx
	jne	.LBB57_9
# %bb.8:
	movzx	eax, byte ptr [r13]
	mov	byte ptr [r15], al
.LBB57_10:
	cmp	r13, rbp
	je	.LBB57_12
.LBB57_11:
	mov	rdi, r13
	call	_ZdlPv@PLT
.LBB57_12:
	mov	qword ptr [rbx], r15
	mov	qword ptr [rbx + 16], r14
	mov	r14, qword ptr [rsp]            # 8-byte Reload
	jmp	.LBB57_13
.LBB57_3:
	mov	r15, r13
.LBB57_13:
	mov	rax, qword ptr [r14]
	lea	rdi, [r15 + 1]
	lea	rsi, [r15 + r12]
	dec	rsi
	mov	rcx, qword ptr [rax]
	cmp	byte ptr [rcx], 0
	je	.LBB57_15
# %bb.14:
	mov	rcx, qword ptr [rax + 8]
	mov	rdx, qword ptr [rax + 16]
	movss	xmm0, dword ptr [rcx]           # xmm0 = mem[0],zero,zero,zero
	mov	edx, dword ptr [rdx]
	mov	rax, qword ptr [rax + 24]
	mov	ecx, dword ptr [rax]
	call	_ZSt8to_charsPcS_fSt12chars_formati@PLT
	jmp	.LBB57_18
.LBB57_15:
	mov	rcx, qword ptr [rax + 8]
	mov	rax, qword ptr [rax + 16]
	mov	edx, dword ptr [rax]
	movss	xmm0, dword ptr [rcx]           # xmm0 = mem[0],zero,zero,zero
	test	edx, edx
	je	.LBB57_17
# %bb.16:
	call	_ZSt8to_charsPcS_fSt12chars_format@PLT
	jmp	.LBB57_18
.LBB57_9:
	inc	rdx
	mov	rdi, r15
	mov	rsi, r13
	call	memcpy@PLT
	cmp	r13, rbp
	jne	.LBB57_11
	jmp	.LBB57_12
.LBB57_17:
	call	_ZSt8to_charsPcS_f@PLT
.LBB57_18:
	mov	rcx, qword ptr [r14 + 8]
	mov	qword ptr [rcx], rax
	mov	dword ptr [rcx + 8], edx
	mov	rax, qword ptr [r14 + 8]
	cmp	dword ptr [rax + 8], 0
	je	.LBB57_20
# %bb.19:
	xor	eax, eax
	jmp	.LBB57_21
.LBB57_20:
	mov	rax, qword ptr [rax]
	sub	rax, r15
.LBB57_21:
	mov	qword ptr [rbx + 8], rax
	mov	rcx, qword ptr [rbx]
	mov	byte ptr [rcx + rax], 0
	add	rsp, 8
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB57_23:
	.cfi_def_cfa_offset 64
	call	_ZSt17__throw_bad_allocv@PLT
.LBB57_22:
	lea	rdi, [rip + .L.str.3]
	call	_ZSt20__throw_length_errorPKc@PLT
.Lfunc_end57:
	.size	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_, .Lfunc_end57-_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_,"axG",@progbits,_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_,comdat
	.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_ # -- Begin function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_
	.p2align	4, 0x90
	.type	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_,@function
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_: # @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_
.Lfunc_begin15:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception15
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	push	rax
	.cfi_def_cfa_offset 64
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	r14, rsi
	mov	rbx, rdi
	mov	r12, qword ptr [rdi]
	lea	rbp, [rdi + 16]
	mov	eax, 15
	cmp	r12, rbp
	je	.LBB58_2
# %bb.1:
	mov	rax, qword ptr [rbx + 16]
.LBB58_2:
	cmp	rax, r14
	jae	.LBB58_3
# %bb.4:
	test	r14, r14
	js	.LBB58_16
# %bb.5:
	add	rax, rax
	movabs	r15, 9223372036854775807
	cmp	rax, r15
	cmovb	r15, rax
	cmp	rax, r14
	cmovbe	r15, r14
	mov	rdi, r15
	inc	rdi
	js	.LBB58_17
# %bb.6:
	mov	qword ptr [rsp], rdx            # 8-byte Spill
	call	_Znwm@PLT
	mov	r13, rax
	mov	rdx, qword ptr [rbx + 8]
	cmp	rdx, -1
	je	.LBB58_10
# %bb.7:
	test	rdx, rdx
	jne	.LBB58_9
# %bb.8:
	movzx	eax, byte ptr [r12]
	mov	byte ptr [r13], al
.LBB58_10:
	cmp	r12, rbp
	je	.LBB58_12
.LBB58_11:
	mov	rdi, r12
	call	_ZdlPv@PLT
.LBB58_12:
	mov	qword ptr [rbx], r13
	mov	qword ptr [rbx + 16], r15
	mov	rdx, qword ptr [rsp]            # 8-byte Reload
	jmp	.LBB58_13
.LBB58_3:
	mov	r13, r12
.LBB58_13:
.Ltmp154:
	mov	rdi, rdx
	mov	rsi, r13
	mov	rdx, r14
	call	_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m
.Ltmp155:
# %bb.14:
	mov	qword ptr [rbx + 8], rax
	mov	rcx, qword ptr [rbx]
	mov	byte ptr [rcx + rax], 0
	add	rsp, 8
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB58_9:
	.cfi_def_cfa_offset 64
	inc	rdx
	mov	rdi, r13
	mov	rsi, r12
	call	memcpy@PLT
	cmp	r12, rbp
	jne	.LBB58_11
	jmp	.LBB58_12
.LBB58_17:
	call	_ZSt17__throw_bad_allocv@PLT
.LBB58_16:
	lea	rdi, [rip + .L.str.3]
	call	_ZSt20__throw_length_errorPKc@PLT
.LBB58_15:
.Ltmp156:
	mov	qword ptr [rbx + 8], 0
	mov	rcx, qword ptr [rbx]
	mov	byte ptr [rcx], 0
	mov	rdi, rax
	call	_Unwind_Resume@PLT
.Lfunc_end58:
	.size	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_, .Lfunc_end58-_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_
	.cfi_endproc
	.section	.gcc_except_table._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_,"aG",@progbits,_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_,comdat
	.p2align	2, 0x0
GCC_except_table58:
.Lexception15:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end15-.Lcst_begin15
.Lcst_begin15:
	.uleb128 .Lfunc_begin15-.Lfunc_begin15  # >> Call Site 1 <<
	.uleb128 .Ltmp154-.Lfunc_begin15        #   Call between .Lfunc_begin15 and .Ltmp154
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp154-.Lfunc_begin15        # >> Call Site 2 <<
	.uleb128 .Ltmp155-.Ltmp154              #   Call between .Ltmp154 and .Ltmp155
	.uleb128 .Ltmp156-.Lfunc_begin15        #     jumps to .Ltmp156
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp155-.Lfunc_begin15        # >> Call Site 3 <<
	.uleb128 .Lfunc_end58-.Ltmp155          #   Call between .Ltmp155 and .Lfunc_end58
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end15:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m,"axG",@progbits,_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m,comdat
	.weak	_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m # -- Begin function _ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m
	.p2align	4, 0x90
	.type	_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m,@function
_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m: # @_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r12
	.cfi_def_cfa_offset 40
	push	rbx
	.cfi_def_cfa_offset 48
	.cfi_offset rbx, -48
	.cfi_offset r12, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	rbx, rsi
	mov	r14, rdi
	mov	rdi, qword ptr [rdi]
	mov	rax, qword ptr [rdi]
	call	qword ptr [rax + 24]
	mov	rdi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	rcx, qword ptr [rdi]
	mov	rsi, qword ptr [rdx + 8]
	mov	rdx, qword ptr [r14 + 24]
	mov	r10, qword ptr [rdx]
	lea	r8, [rsi + r10]
	movsx	r9, byte ptr [rcx]
	xor	edx, edx
	cmp	r10, r9
	jle	.LBB59_12
# %bb.1:
	lea	r10d, [r9 - 127]
	cmp	r10b, -126
	jb	.LBB59_12
# %bb.2:
	mov	r10, qword ptr [rdi + 8]
	dec	r10
	xor	edi, edi
	xor	edx, edx
	.p2align	4, 0x90
.LBB59_3:                               # =>This Inner Loop Header: Depth=1
	mov	r11, r8
	mov	r8, rdx
	cmp	rdx, r10
	adc	rdx, 0
	cmp	r8, r10
	sbb	rdi, -1
	neg	r9b
	movsx	r8, r9b
	add	r8, r11
	movzx	r9d, byte ptr [rcx + rdx]
	lea	r11d, [r9 - 127]
	cmp	r11b, -126
	jb	.LBB59_5
# %bb.4:                                #   in Loop: Header=BB59_3 Depth=1
	mov	r11, r8
	sub	r11, rsi
	movsx	r15, r9b
	cmp	r11, r15
	jg	.LBB59_3
.LBB59_5:
	mov	r11, r8
	sub	r11, rsi
	je	.LBB59_13
.LBB59_6:
	cmp	r11, 32
	jb	.LBB59_14
# %bb.7:
	mov	r9, rbx
	sub	r9, rsi
	cmp	r9, 32
	jb	.LBB59_14
# %bb.8:
	mov	r15, r11
	and	r15, -32
	lea	r10, [rsi + r15]
	lea	r9, [rbx + r15]
	xor	r12d, r12d
	.p2align	4, 0x90
.LBB59_9:                               # =>This Inner Loop Header: Depth=1
	movups	xmm0, xmmword ptr [rsi + r12]
	movups	xmm1, xmmword ptr [rsi + r12 + 16]
	movups	xmmword ptr [rbx + r12], xmm0
	movups	xmmword ptr [rbx + r12 + 16], xmm1
	add	r12, 32
	cmp	r15, r12
	jne	.LBB59_9
# %bb.10:
	cmp	r11, r15
	jne	.LBB59_15
	jmp	.LBB59_20
.LBB59_12:
	xor	edi, edi
	mov	r11, r8
	sub	r11, rsi
	jne	.LBB59_6
.LBB59_13:
	mov	r9, rbx
	test	rdi, rdi
	jne	.LBB59_34
	jmp	.LBB59_21
.LBB59_14:
	mov	r10, rsi
	mov	r9, rbx
.LBB59_15:
	mov	r11d, r8d
	sub	r11d, r10d
	mov	rsi, r10
	and	r11d, 7
	je	.LBB59_17
	.p2align	4, 0x90
.LBB59_16:                              # =>This Inner Loop Header: Depth=1
	movzx	ebp, byte ptr [rsi]
	inc	rsi
	mov	byte ptr [r9], bpl
	inc	r9
	dec	r11
	jne	.LBB59_16
.LBB59_17:
	sub	r10, r8
	cmp	r10, -8
	ja	.LBB59_20
	.p2align	4, 0x90
.LBB59_19:                              # =>This Inner Loop Header: Depth=1
	movzx	r10d, byte ptr [rsi]
	mov	byte ptr [r9], r10b
	movzx	r10d, byte ptr [rsi + 1]
	mov	byte ptr [r9 + 1], r10b
	movzx	r10d, byte ptr [rsi + 2]
	mov	byte ptr [r9 + 2], r10b
	movzx	r10d, byte ptr [rsi + 3]
	mov	byte ptr [r9 + 3], r10b
	movzx	r10d, byte ptr [rsi + 4]
	mov	byte ptr [r9 + 4], r10b
	movzx	r10d, byte ptr [rsi + 5]
	mov	byte ptr [r9 + 5], r10b
	movzx	r10d, byte ptr [rsi + 6]
	mov	byte ptr [r9 + 6], r10b
	movzx	r10d, byte ptr [rsi + 7]
	add	rsi, 8
	mov	byte ptr [r9 + 7], r10b
	add	r9, 8
	cmp	rsi, r8
	jne	.LBB59_19
.LBB59_20:
	mov	rsi, r8
	test	rdi, rdi
	jne	.LBB59_34
.LBB59_21:
	mov	r8, r9
.LBB59_22:
	test	rdx, rdx
	jne	.LBB59_45
# %bb.23:
	mov	r15, r8
.LBB59_24:
	mov	rax, qword ptr [r14 + 32]
	mov	rax, qword ptr [rax]
	test	rax, rax
	je	.LBB59_32
# %bb.25:
	mov	rcx, qword ptr [r14 + 40]
	cmp	qword ptr [rcx], -1
	je	.LBB59_27
# %bb.26:
	mov	rax, qword ptr [r14 + 48]
	movzx	eax, byte ptr [rax]
	mov	byte ptr [r15], al
	mov	rax, qword ptr [r14 + 24]
	inc	qword ptr [rax]
	inc	r15
	mov	rax, qword ptr [r14 + 32]
	mov	rax, qword ptr [rax]
.LBB59_27:
	cmp	rax, 2
	jb	.LBB59_32
# %bb.28:
	mov	rax, qword ptr [r14 + 16]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [rcx]
	mov	rcx, qword ptr [rax]
	mov	r14, rcx
	sub	r14, rdx
	jb	.LBB59_55
# %bb.29:
	je	.LBB59_31
# %bb.30:
	add	rdx, qword ptr [rax + 8]
	mov	rdi, r15
	mov	rsi, rdx
	mov	rdx, r14
	call	memcpy@PLT
.LBB59_31:
	add	r15, r14
.LBB59_32:
	sub	r15, rbx
	mov	rax, r15
	pop	rbx
	.cfi_def_cfa_offset 40
	pop	r12
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align	4, 0x90
.LBB59_33:                              #   in Loop: Header=BB59_34 Depth=1
	.cfi_def_cfa_offset 48
	mov	r9, r8
	dec	rdi
	je	.LBB59_22
.LBB59_34:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_43 Depth 2
	mov	byte ptr [r9], al
	movzx	r10d, byte ptr [rcx + rdx]
	lea	r8, [r9 + 1]
	test	r10b, r10b
	jle	.LBB59_33
# %bb.35:                               #   in Loop: Header=BB59_34 Depth=1
	cmp	r10b, 32
	jb	.LBB59_42
# %bb.36:                               #   in Loop: Header=BB59_34 Depth=1
	mov	r11, r9
	sub	r11, rsi
	inc	r11
	cmp	r11, 32
	jb	.LBB59_42
# %bb.37:                               #   in Loop: Header=BB59_34 Depth=1
	movzx	r15d, r10b
	mov	r11d, r15d
	and	r11d, 96
	movups	xmm0, xmmword ptr [rsi]
	movups	xmm1, xmmword ptr [rsi + 16]
	movups	xmmword ptr [r9 + 1], xmm0
	movups	xmmword ptr [r9 + 17], xmm1
	cmp	r11, 32
	je	.LBB59_40
# %bb.38:                               #   in Loop: Header=BB59_34 Depth=1
	movups	xmm0, xmmword ptr [rsi + 32]
	movups	xmm1, xmmword ptr [rsi + 48]
	movups	xmmword ptr [r9 + 33], xmm0
	movups	xmmword ptr [r9 + 49], xmm1
	cmp	r11d, 64
	je	.LBB59_40
# %bb.39:                               #   in Loop: Header=BB59_34 Depth=1
	movups	xmm0, xmmword ptr [rsi + 64]
	movups	xmm1, xmmword ptr [rsi + 80]
	movups	xmmword ptr [r9 + 65], xmm0
	movups	xmmword ptr [r9 + 81], xmm1
.LBB59_40:                              #   in Loop: Header=BB59_34 Depth=1
	add	r8, r11
	add	rsi, r11
	cmp	r11, r15
	je	.LBB59_33
# %bb.41:                               #   in Loop: Header=BB59_34 Depth=1
	sub	r10b, r11b
	.p2align	4, 0x90
.LBB59_42:                              #   in Loop: Header=BB59_34 Depth=1
	inc	r10b
	.p2align	4, 0x90
.LBB59_43:                              #   Parent Loop BB59_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	r9d, byte ptr [rsi]
	inc	rsi
	mov	byte ptr [r8], r9b
	inc	r8
	dec	r10b
	cmp	r10b, 1
	ja	.LBB59_43
	jmp	.LBB59_33
	.p2align	4, 0x90
.LBB59_44:                              #   in Loop: Header=BB59_45 Depth=1
	mov	r8, r15
	dec	rdx
	je	.LBB59_24
.LBB59_45:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_54 Depth 2
	mov	byte ptr [r8], al
	movzx	edi, byte ptr [rcx + rdx - 1]
	lea	r15, [r8 + 1]
	test	dil, dil
	jle	.LBB59_44
# %bb.46:                               #   in Loop: Header=BB59_45 Depth=1
	cmp	dil, 32
	jb	.LBB59_53
# %bb.47:                               #   in Loop: Header=BB59_45 Depth=1
	mov	r9, r8
	sub	r9, rsi
	inc	r9
	cmp	r9, 32
	jb	.LBB59_53
# %bb.48:                               #   in Loop: Header=BB59_45 Depth=1
	movzx	r10d, dil
	mov	r9d, r10d
	and	r9d, 96
	movups	xmm0, xmmword ptr [rsi]
	movups	xmm1, xmmword ptr [rsi + 16]
	movups	xmmword ptr [r8 + 1], xmm0
	movups	xmmword ptr [r8 + 17], xmm1
	cmp	r9, 32
	je	.LBB59_51
# %bb.49:                               #   in Loop: Header=BB59_45 Depth=1
	movups	xmm0, xmmword ptr [rsi + 32]
	movups	xmm1, xmmword ptr [rsi + 48]
	movups	xmmword ptr [r8 + 33], xmm0
	movups	xmmword ptr [r8 + 49], xmm1
	cmp	r9d, 64
	je	.LBB59_51
# %bb.50:                               #   in Loop: Header=BB59_45 Depth=1
	movups	xmm0, xmmword ptr [rsi + 64]
	movups	xmm1, xmmword ptr [rsi + 80]
	movups	xmmword ptr [r8 + 65], xmm0
	movups	xmmword ptr [r8 + 81], xmm1
.LBB59_51:                              #   in Loop: Header=BB59_45 Depth=1
	add	r15, r9
	add	rsi, r9
	cmp	r9, r10
	je	.LBB59_44
# %bb.52:                               #   in Loop: Header=BB59_45 Depth=1
	sub	dil, r9b
	.p2align	4, 0x90
.LBB59_53:                              #   in Loop: Header=BB59_45 Depth=1
	inc	dil
	.p2align	4, 0x90
.LBB59_54:                              #   Parent Loop BB59_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	r8d, byte ptr [rsi]
	inc	rsi
	mov	byte ptr [r15], r8b
	inc	r15
	dec	dil
	cmp	dil, 1
	ja	.LBB59_54
	jmp	.LBB59_44
.LBB59_55:
	lea	rdi, [rip + .L.str.12]
	lea	rsi, [rip + .L.str.11]
	xor	eax, eax
	call	_ZSt24__throw_out_of_range_fmtPKcz@PLT
.Lfunc_end59:
	.size	_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m, .Lfunc_end59-_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
.LCPI60_0:
	.quad	0x7fffffffffffffff              # double NaN
	.quad	0x7fffffffffffffff              # double NaN
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI60_1:
	.quad	0x7ff0000000000000              # double +Inf
	.section	.text._ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"axG",@progbits,_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.weak	_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.p2align	4, 0x90
	.type	_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,@function
_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_: # @_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
.Lfunc_begin16:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception16
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 408
	.cfi_def_cfa_offset 464
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 400], rax
	movsd	qword ptr [rsp + 136], xmm0
	lea	rax, [rsp + 352]
	mov	qword ptr [rsp + 336], rax
	mov	qword ptr [rsp + 344], 0
	mov	byte ptr [rsp + 352], 0
	xorpd	xmm0, xmm0
	movapd	xmmword ptr [rsp + 112], xmm0
	mov	qword ptr [rsp + 104], 6
	mov	eax, dword ptr [rdi]
	test	eax, 1536
	setne	byte ptr [rsp + 103]
	mov	qword ptr [rsp + 24], rdi       # 8-byte Spill
	mov	qword ptr [rsp + 32], rsi       # 8-byte Spill
	je	.LBB60_4
# %bb.1:
	mov	edx, eax
	shr	edx, 9
	and	edx, 3
	cmp	edx, 2
	je	.LBB60_5
# %bb.2:
	mov	rcx, -1
	cmp	edx, 1
	jne	.LBB60_12
# %bb.3:
	movzx	ecx, word ptr [rdi + 6]
	mov	qword ptr [rsp + 104], rcx
	lea	r15, [rsp + 209]
	lea	r14, [rsp + 336]
	mov	dword ptr [rsp + 96], 0
	mov	edx, eax
	shr	edx, 11
	and	edx, 15
	mov	r9b, 101
	xor	esi, esi
	lea	rdi, [rip + .LJTI60_0]
	movsxd	rdx, dword ptr [rdi + 4*rdx]
	add	rdx, rdi
	xor	edi, edi
	xor	r8d, r8d
	xor	ebp, ebp
	jmp	rdx
.LBB60_4:
	mov	ecx, 6
	lea	r15, [rsp + 209]
	lea	r14, [rsp + 336]
	mov	dword ptr [rsp + 96], 0
	mov	edx, eax
	shr	edx, 11
	and	edx, 15
	mov	r9b, 101
	xor	esi, esi
	lea	rdi, [rip + .LJTI60_0]
	movsxd	rdx, dword ptr [rdi + 4*rdx]
	add	rdx, rdi
	xor	edi, edi
	xor	r8d, r8d
	xor	ebp, ebp
	jmp	rdx
.LBB60_5:
	movzx	eax, word ptr [rdi + 6]
	mov	rdx, qword ptr [rsi]
	mov	r8d, edx
	and	r8d, 15
	cmp	r8, rax
	jbe	.LBB60_7
# %bb.6:
	mov	rbx, rdi
	shr	rdx, 4
	lea	ecx, [rax + 4*rax]
                                        # kill: def $cl killed $cl killed $ecx
	shr	rdx, cl
	and	dl, 31
	mov	rcx, qword ptr [rsi + 8]
	shl	eax, 4
	movapd	xmm0, xmmword ptr [rcx + rax]
	movapd	xmmword ptr [rsp + 64], xmm0
	mov	ecx, edx
	jmp	.LBB60_10
.LBB60_7:
	xor	ecx, ecx
	mov	rbx, rdi
	test	r8, r8
	jne	.LBB60_10
# %bb.8:
	shr	rdx, 4
	cmp	rdx, rax
	jbe	.LBB60_10
# %bb.9:
	mov	rcx, qword ptr [rsi + 8]
	shl	eax, 5
	movapd	xmm0, xmmword ptr [rcx + rax]
	movapd	xmmword ptr [rsp + 64], xmm0
	movzx	ecx, byte ptr [rcx + rax + 16]
.LBB60_10:
	movapd	xmm0, xmmword ptr [rsp + 64]
	movapd	xmmword ptr [rsp + 368], xmm0
	mov	byte ptr [rsp + 384], cl
.Ltmp157:
	movzx	edx, cl
	lea	rdi, [rsp + 368]
	lea	rsi, [rsp + 176]
	call	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE
.Ltmp158:
# %bb.11:
	mov	rcx, rax
	mov	eax, dword ptr [rbx]
.LBB60_12:
	mov	qword ptr [rsp + 104], rcx
	lea	r15, [rsp + 209]
	lea	r14, [rsp + 336]
	mov	dword ptr [rsp + 96], 0
	mov	edx, eax
	shr	edx, 11
	and	edx, 15
	mov	r9b, 101
	xor	esi, esi
	lea	rdi, [rip + .LJTI60_0]
	movsxd	rdx, dword ptr [rdi + 4*rdx]
	add	rdx, rdi
	xor	edi, edi
	xor	r8d, r8d
	xor	ebp, ebp
	jmp	rdx
.LBB60_13:
	cmp	byte ptr [rsp + 103], 0
	je	.LBB60_72
# %bb.14:
	mov	dword ptr [rsp + 96], 3
	mov	r9b, 101
	mov	edx, 3
	mov	dword ptr [rsp], 0              # 4-byte Folded Spill
	xor	esi, esi
	jmp	.LBB60_24
.LBB60_15:
	mov	sil, 1
	mov	r9b, 69
.LBB60_16:
	mov	byte ptr [rsp + 103], 1
	mov	dword ptr [rsp + 96], 1
	mov	edx, 1
	mov	dword ptr [rsp], 0              # 4-byte Folded Spill
	jmp	.LBB60_24
.LBB60_17:
	mov	bpl, 1
	mov	r9b, 80
.LBB60_18:
	and	eax, 30720
	cmp	eax, 4096
	movzx	eax, r9b
	mov	r9d, 112
	cmove	r9d, eax
	mov	dword ptr [rsp + 96], 4
	cmp	byte ptr [rsp + 103], 0
	lea	rax, [rsp + 103]
	mov	qword ptr [rsp + 64], rax
	lea	rax, [rsp + 136]
	mov	qword ptr [rsp + 72], rax
	lea	rax, [rsp + 96]
	mov	qword ptr [rsp + 80], rax
	lea	rax, [rsp + 104]
	mov	qword ptr [rsp + 88], rax
	je	.LBB60_70
# %bb.19:
	mov	dword ptr [rsp], 0              # 4-byte Folded Spill
	mov	edx, 4
	jmp	.LBB60_25
.LBB60_20:
	mov	dil, 1
.LBB60_21:
	mov	byte ptr [rsp + 103], 1
	mov	dword ptr [rsp + 96], 2
	mov	r9b, 101
	mov	edx, 2
	mov	dword ptr [rsp], 0              # 4-byte Folded Spill
	mov	esi, edi
	jmp	.LBB60_24
.LBB60_22:
	mov	r8b, 1
	mov	r9b, 69
.LBB60_23:
	mov	byte ptr [rsp + 103], 1
	mov	dword ptr [rsp + 96], 3
	mov	al, 1
	mov	dword ptr [rsp], eax            # 4-byte Spill
	mov	edx, 3
	mov	esi, r8d
.LBB60_24:
	lea	rax, [rsp + 103]
	mov	qword ptr [rsp + 64], rax
	lea	rax, [rsp + 136]
	mov	qword ptr [rsp + 72], rax
	lea	rax, [rsp + 96]
	mov	qword ptr [rsp + 80], rax
	lea	rax, [rsp + 104]
	mov	qword ptr [rsp + 88], rax
	mov	ebp, esi
.LBB60_25:
	mov	dword ptr [rsp + 12], r9d       # 4-byte Spill
	movsd	xmm0, qword ptr [rsp + 136]     # xmm0 = mem[0],zero
	mov	rdi, r15
	mov	rsi, r14
                                        # kill: def $ecx killed $ecx killed $rcx
	call	_ZSt8to_charsPcS_dSt12chars_formati@PLT
	mov	qword ptr [rsp + 112], rax
	mov	dword ptr [rsp + 120], edx
	cmp	edx, 75
	je	.LBB60_74
.LBB60_26:
	cmp	r15, rax
	setne	al
	and	bpl, al
	cmp	bpl, 1
	jne	.LBB60_29
# %bb.27:
	mov	rbx, r15
	.p2align	4, 0x90
.LBB60_28:                              # =>This Inner Loop Header: Depth=1
	movsx	edi, byte ptr [rbx]
	call	toupper@PLT
	mov	byte ptr [rbx], al
	inc	rbx
	cmp	rbx, qword ptr [rsp + 112]
	jne	.LBB60_28
.LBB60_29:
	mov	r13d, 1
	cmp	qword ptr [rsp + 136], 0
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	js	.LBB60_36
# %bb.30:
	mov	eax, dword ptr [rcx]
	shr	eax, 2
	and	eax, 3
	cmp	eax, 3
	je	.LBB60_33
# %bb.31:
	cmp	eax, 1
	jne	.LBB60_35
# %bb.32:
	mov	byte ptr [r15 - 1], 43
	jmp	.LBB60_34
.LBB60_33:
	mov	byte ptr [r15 - 1], 32
.LBB60_34:
	dec	r15
	jmp	.LBB60_36
.LBB60_35:
	xor	r13d, r13d
.LBB60_36:
	mov	rbx, qword ptr [rsp + 112]
	mov	r12, rbx
	sub	r12, r15
	test	byte ptr [rcx], 16
	je	.LBB60_125
# %bb.37:
	movsd	xmm0, qword ptr [rsp + 136]     # xmm0 = mem[0],zero
	andpd	xmm0, xmmword ptr [rip + .LCPI60_0]
	ucomisd	xmm0, qword ptr [rip + .LCPI60_1]
	je	.LBB60_125
# %bb.38:
	test	r12, r12
	mov	qword ptr [rsp + 40], r14       # 8-byte Spill
	je	.LBB60_53
# %bb.39:
	mov	rdi, r15
	mov	esi, 46
	mov	rdx, r12
	call	memchr@PLT
	test	rax, rax
	je	.LBB60_51
# %bb.40:
	mov	rbp, rax
	sub	rbp, r15
	cmp	rbp, -1
	je	.LBB60_51
# %bb.41:
	lea	r14, [rbp + 1]
	mov	rdx, r12
	sub	rdx, r14
	jbe	.LBB60_44
# %bb.42:
	lea	rdi, [r15 + r14]
	movzx	esi, byte ptr [rsp + 12]        # 1-byte Folded Reload
	mov	qword ptr [rsp + 16], rax       # 8-byte Spill
	call	memchr@PLT
	mov	rcx, rax
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	test	rcx, rcx
	je	.LBB60_44
# %bb.43:
	mov	rdx, rcx
	sub	rcx, r15
	mov	rdx, rcx
	cmp	rcx, -1
	jne	.LBB60_45
.LBB60_44:
	mov	rdx, r12
.LBB60_45:
	cmp	byte ptr [rsp], 0               # 1-byte Folded Reload
	je	.LBB60_71
# %bb.46:
	cmp	byte ptr [r15 + r13], 48
	jne	.LBB60_83
# %bb.47:
	mov	rcx, -1
	cmp	r12, r14
	jbe	.LBB60_121
# %bb.48:
	not	rax
	add	rax, rbx
.LBB60_49:                              # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [r15 + r14], 48
	jne	.LBB60_120
# %bb.50:                               #   in Loop: Header=BB60_49 Depth=1
	inc	r14
	dec	rax
	jne	.LBB60_49
	jmp	.LBB60_121
.LBB60_51:
	movzx	esi, byte ptr [rsp + 12]        # 1-byte Folded Reload
	mov	rdi, r15
	mov	rdx, r12
	call	memchr@PLT
	test	rax, rax
	je	.LBB60_53
# %bb.52:
	mov	rbp, rax
	sub	rbp, r15
	cmp	rbp, -1
	jne	.LBB60_54
.LBB60_53:
	mov	rbp, r12
.LBB60_54:
	mov	rax, rbp
	sub	rax, r13
	mov	rsi, rbp
.LBB60_55:
	mov	rcx, qword ptr [rsp + 104]
	mov	rdx, rcx
	sub	rdx, rax
	test	rcx, rcx
	cmove	rdx, rcx
	xor	eax, eax
	cmp	byte ptr [rsp], 0               # 1-byte Folded Reload
	cmovne	rax, rdx
	xor	r14d, r14d
	mov	qword ptr [rsp], rsi            # 8-byte Spill
	cmp	rbp, rsi
	sete	r14b
	add	r14, rax
	je	.LBB60_125
# %bb.56:
	mov	qword ptr [rsp + 16], rax       # 8-byte Spill
	mov	r13, qword ptr [rsp + 344]
	test	r13, r13
	jne	.LBB60_61
# %bb.57:
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	sub	rax, rbx
	cmp	r14, rax
	ja	.LBB60_61
# %bb.58:
	mov	r13, qword ptr [rsp]            # 8-byte Reload
	lea	rbx, [r15 + r13]
	lea	rdi, [rbx + r14]
	mov	rdx, r12
	sub	rdx, r13
	mov	rsi, rbx
	call	memmove@PLT
	cmp	rbp, r13
	jne	.LBB60_60
# %bb.59:
	inc	rbp
	mov	byte ptr [rbx], 46
	mov	r13, rbp
.LBB60_60:
	add	r13, r15
	mov	rdi, r13
	mov	esi, 48
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	call	memset@PLT
	add	r12, r14
	jmp	.LBB60_125
.LBB60_61:
	lea	rax, [r14 + r12]
	mov	rsi, qword ptr [rsp + 336]
	mov	ecx, 15
	lea	rdx, [rsp + 352]
	mov	qword ptr [rsp + 40], rsi       # 8-byte Spill
	cmp	rsi, rdx
	je	.LBB60_63
# %bb.62:
	mov	rcx, qword ptr [rsp + 352]
.LBB60_63:
	cmp	rcx, rax
	jae	.LBB60_88
# %bb.64:
	test	rax, rax
	js	.LBB60_187
# %bb.65:
	add	rcx, rcx
	movabs	rbx, 9223372036854775807
	cmp	rcx, rbx
	cmovb	rbx, rcx
	cmp	rcx, rax
	cmovbe	rbx, rax
	mov	rdi, rbx
	inc	rdi
	js	.LBB60_182
# %bb.66:
.Ltmp166:
	call	_Znwm@PLT
.Ltmp167:
# %bb.67:
	mov	rcx, rax
	cmp	r13, -1
	je	.LBB60_85
# %bb.68:
	test	r13, r13
	jne	.LBB60_84
# %bb.69:
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	movzx	eax, byte ptr [rax]
	mov	byte ptr [rcx], al
	jmp	.LBB60_85
.LBB60_70:
	mov	dword ptr [rsp + 12], r9d       # 4-byte Spill
	movsd	xmm0, qword ptr [rsp + 136]     # xmm0 = mem[0],zero
	mov	rdi, r15
	mov	rsi, r14
	mov	edx, 4
	call	_ZSt8to_charsPcS_dSt12chars_format@PLT
	jmp	.LBB60_73
.LBB60_71:
                                        # implicit-def: $rax
	mov	rsi, rdx
	jmp	.LBB60_55
.LBB60_72:
	lea	rax, [rsp + 103]
	mov	qword ptr [rsp + 64], rax
	lea	rax, [rsp + 136]
	mov	qword ptr [rsp + 72], rax
	lea	rax, [rsp + 96]
	mov	qword ptr [rsp + 80], rax
	lea	rax, [rsp + 104]
	mov	qword ptr [rsp + 88], rax
	movsd	xmm0, qword ptr [rsp + 136]     # xmm0 = mem[0],zero
	mov	rdi, r15
	mov	rsi, r14
	call	_ZSt8to_charsPcS_d@PLT
	mov	cl, 101
	mov	dword ptr [rsp + 12], ecx       # 4-byte Spill
	xor	ebp, ebp
.LBB60_73:
	mov	dword ptr [rsp], 0              # 4-byte Folded Spill
	mov	qword ptr [rsp + 112], rax
	mov	dword ptr [rsp + 120], edx
	cmp	edx, 75
	jne	.LBB60_26
.LBB60_74:
	mov	rbx, qword ptr [rsp + 104]
	add	rbx, 8
	cmp	dword ptr [rsp + 96], 2
	jne	.LBB60_77
# %bb.75:
	movsd	xmm0, qword ptr [rsp + 136]     # xmm0 = mem[0],zero
	lea	rdi, [rsp + 52]
	call	frexp@PLT
	mov	eax, dword ptr [rsp + 52]
	test	eax, eax
	jle	.LBB60_77
# %bb.76:
	imul	eax, eax, 4004
	imul	rcx, rax, 995517945
	shr	rcx, 32
	sub	eax, ecx
	shr	eax
	add	eax, ecx
	shr	eax, 13
	add	rbx, rax
	inc	rbx
.LBB60_77:
	cmp	rbx, 128
	jbe	.LBB60_186
.LBB60_78:
.Ltmp160:
	lea	rdi, [rsp + 336]
	mov	rsi, rbx
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm
.Ltmp161:
# %bb.79:
	mov	r14d, 30
	lea	r12, [rsp + 64]
	lea	r13, [rsp + 112]
	lea	rbx, [rsp + 336]
	lea	r15, [rsp + 368]
.LBB60_80:                              # =>This Inner Loop Header: Depth=1
	mov	rsi, qword ptr [rsp + 352]
	add	rsi, rsi
	lea	rax, [rsp + 352]
	cmp	qword ptr [rsp + 336], rax
	cmove	rsi, r14
	mov	qword ptr [rsp + 368], r12
	mov	qword ptr [rsp + 376], r13
.Ltmp163:
	mov	rdi, rbx
	mov	rdx, r15
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_
.Ltmp164:
# %bb.81:                               #   in Loop: Header=BB60_80 Depth=1
	cmp	dword ptr [rsp + 120], 75
	je	.LBB60_80
# %bb.82:
	mov	r15, qword ptr [rsp + 336]
	mov	r14, qword ptr [rsp + 344]
	add	r14, r15
	inc	r15
	mov	rax, qword ptr [rsp + 112]
	jmp	.LBB60_26
.LBB60_83:
	not	r13
	mov	rsi, rdx
	add	r13, rdx
	mov	rax, r13
	jmp	.LBB60_55
.LBB60_84:
	lea	rdx, [r13 + 1]
	mov	rdi, rcx
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	mov	qword ptr [rsp + 56], rcx       # 8-byte Spill
	call	memcpy@PLT
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
.LBB60_85:
	lea	rax, [rsp + 352]
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	cmp	rdi, rax
	je	.LBB60_87
# %bb.86:
	mov	r13, rcx
	call	_ZdlPv@PLT
	mov	rcx, r13
	mov	r13, qword ptr [rsp + 344]
.LBB60_87:
	mov	qword ptr [rsp + 336], rcx
	mov	qword ptr [rsp + 352], rbx
.LBB60_88:
	test	r13, r13
	je	.LBB60_92
# %bb.89:
.Ltmp168:
	lea	rdi, [rsp + 336]
	mov	rsi, qword ptr [rsp]            # 8-byte Reload
	mov	rdx, r14
	mov	ecx, 48
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc
.Ltmp169:
# %bb.90:
	cmp	rbp, qword ptr [rsp]            # 8-byte Folded Reload
	jne	.LBB60_124
# %bb.91:
	mov	rax, qword ptr [rsp + 336]
	mov	byte ptr [rax + rbp], 46
	jmp	.LBB60_124
.LBB60_92:
	mov	r14, qword ptr [rsp]            # 8-byte Reload
	cmp	r12, r14
	mov	r8, r14
	cmovb	r8, r12
.Ltmp170:
	lea	rdi, [rsp + 336]
	xor	esi, esi
	xor	edx, edx
	mov	rcx, r15
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm
.Ltmp171:
# %bb.93:
	cmp	rbp, r14
	jne	.LBB60_100
# %bb.94:
	mov	rax, qword ptr [rsp + 336]
	mov	r14, qword ptr [rsp + 344]
	lea	rbx, [r14 + 1]
	mov	ecx, 15
	lea	rdx, [rsp + 352]
	cmp	rax, rdx
	je	.LBB60_96
# %bb.95:
	mov	rcx, qword ptr [rsp + 352]
.LBB60_96:
	cmp	rbx, rcx
	jbe	.LBB60_99
# %bb.97:
.Ltmp173:
	lea	rdi, [rsp + 336]
	mov	r8d, 1
	mov	rsi, r14
	xor	edx, edx
	xor	ecx, ecx
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
.Ltmp174:
# %bb.98:
	mov	rax, qword ptr [rsp + 336]
.LBB60_99:
	mov	byte ptr [rax + r14], 46
	mov	qword ptr [rsp + 344], rbx
	mov	rax, qword ptr [rsp + 336]
	mov	byte ptr [rax + r14 + 1], 0
	mov	r14, qword ptr [rsp]            # 8-byte Reload
.LBB60_100:
	movabs	rbx, 9223372036854775807
	cmp	qword ptr [rsp + 16], 0         # 8-byte Folded Reload
	je	.LBB60_111
# %bb.101:
	mov	r14, qword ptr [rsp + 344]
	mov	rax, rbx
	sub	rax, r14
	cmp	rax, qword ptr [rsp + 16]       # 8-byte Folded Reload
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	jb	.LBB60_194
# %bb.102:
	lea	r13, [r14 + rax]
	mov	rdi, qword ptr [rsp + 336]
	mov	eax, 15
	lea	rcx, [rsp + 352]
	cmp	rdi, rcx
	je	.LBB60_104
# %bb.103:
	mov	rax, qword ptr [rsp + 352]
.LBB60_104:
	cmp	r13, rax
	mov	r8, qword ptr [rsp + 16]        # 8-byte Reload
	jbe	.LBB60_107
# %bb.105:
.Ltmp175:
	lea	rdi, [rsp + 336]
	mov	rsi, r14
	xor	edx, edx
	xor	ecx, ecx
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
.Ltmp176:
# %bb.106:
	mov	rdi, qword ptr [rsp + 336]
	mov	r8, qword ptr [rsp + 16]        # 8-byte Reload
.LBB60_107:
	add	rdi, r14
	cmp	r8, 1
	jne	.LBB60_109
# %bb.108:
	mov	byte ptr [rdi], 48
	jmp	.LBB60_110
.LBB60_109:
	mov	esi, 48
	mov	rdx, r8
	call	memset@PLT
.LBB60_110:
	mov	r14, qword ptr [rsp]            # 8-byte Reload
	mov	qword ptr [rsp + 344], r13
	mov	rax, qword ptr [rsp + 336]
	mov	byte ptr [rax + r13], 0
.LBB60_111:
	mov	r8, r12
	sub	r8, r14
	jb	.LBB60_188
# %bb.112:
	mov	rsi, qword ptr [rsp + 344]
	sub	rbx, rsi
	cmp	rbx, r8
	jb	.LBB60_191
# %bb.113:
	lea	rbx, [rsi + r8]
	mov	rdi, qword ptr [rsp + 336]
	mov	eax, 15
	lea	rcx, [rsp + 352]
	cmp	rdi, rcx
	je	.LBB60_115
# %bb.114:
	mov	rax, qword ptr [rsp + 352]
.LBB60_115:
	add	r15, r14
	cmp	rbx, rax
	jbe	.LBB60_117
# %bb.116:
.Ltmp177:
	lea	rdi, [rsp + 336]
	xor	edx, edx
	mov	rcx, r15
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
.Ltmp178:
	jmp	.LBB60_123
.LBB60_117:
	cmp	r12, r14
	je	.LBB60_123
# %bb.118:
	add	rdi, rsi
	cmp	r8, 1
	jne	.LBB60_122
# %bb.119:
	movzx	eax, byte ptr [r15]
	mov	byte ptr [rdi], al
	jmp	.LBB60_123
.LBB60_120:
	mov	rcx, r14
.LBB60_121:
	mov	rsi, rdx
	mov	rax, rdx
	sub	rax, rcx
	jmp	.LBB60_55
.LBB60_122:
	mov	rsi, r15
	mov	rdx, r8
	call	memcpy@PLT
.LBB60_123:
	mov	qword ptr [rsp + 344], rbx
	mov	rax, qword ptr [rsp + 336]
	mov	byte ptr [rax + rbx], 0
.LBB60_124:
	mov	r15, qword ptr [rsp + 336]
	mov	r12, qword ptr [rsp + 344]
.LBB60_125:
	lea	rbp, [rsp + 192]
	mov	qword ptr [rsp + 176], rbp
	mov	qword ptr [rsp + 184], 0
	mov	byte ptr [rsp + 192], 0
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	mov	eax, dword ptr [rax]
	test	al, 32
	je	.LBB60_135
# %bb.127:
	movsd	xmm0, qword ptr [rsp + 136]     # xmm0 = mem[0],zero
	andpd	xmm0, xmmword ptr [rip + .LCPI60_0]
	ucomisd	xmm0, qword ptr [rip + .LCPI60_1]
	je	.LBB60_135
# %bb.128:
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	lea	rbx, [rax + 24]
	cmp	byte ptr [rax + 32], 0
	jne	.LBB60_130
# %bb.129:
	mov	rdi, rbx
	call	_ZNSt6localeC1Ev@PLT
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	mov	byte ptr [rax + 32], 1
.LBB60_130:
	lea	r14, [rsp + 144]
	mov	rdi, r14
	mov	rsi, rbx
	call	_ZNSt6localeC1ERKS_@PLT
.Ltmp189:
	movzx	r8d, byte ptr [rsp + 12]        # 1-byte Folded Reload
	lea	rdi, [rsp + 368]
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	mov	rdx, r12
	mov	rcx, r15
	mov	r9, r14
	call	_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale
.Ltmp190:
# %bb.131:
	mov	rdi, qword ptr [rsp + 176]
	cmp	rdi, rbp
	je	.LBB60_143
# %bb.132:
	mov	rsi, qword ptr [rsp + 368]
	lea	rax, [rsp + 384]
	cmp	rsi, rax
	je	.LBB60_147
# %bb.133:
	mov	rcx, qword ptr [rsp + 192]
	mov	qword ptr [rsp + 176], rsi
	movupd	xmm0, xmmword ptr [rsp + 376]
	movupd	xmmword ptr [rsp + 184], xmm0
	test	rdi, rdi
	je	.LBB60_145
# %bb.134:
	mov	qword ptr [rsp + 368], rdi
	mov	qword ptr [rsp + 384], rcx
	jmp	.LBB60_152
.LBB60_135:
	mov	r13, r15
	shr	eax, 7
	and	eax, 3
	cmp	eax, 2
	je	.LBB60_136
.LBB60_157:
	cmp	eax, 1
	jne	.LBB60_161
# %bb.158:
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	movzx	eax, word ptr [rax + 4]
	sub	rax, r12
	ja	.LBB60_159
.LBB60_161:
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	mov	rbx, qword ptr [rax + 16]
	test	r12, r12
	je	.LBB60_169
# %bb.162:
	mov	r14, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	sub	r14, rdi
	add	r14, qword ptr [rbx + 16]
	cmp	r14, r12
	ja	.LBB60_168
	.p2align	4, 0x90
.LBB60_163:                             # =>This Inner Loop Header: Depth=1
	test	r14, r14
	je	.LBB60_165
# %bb.164:                              #   in Loop: Header=BB60_163 Depth=1
	mov	rsi, r13
	mov	rdx, r14
	call	memcpy@PLT
	mov	rdi, qword ptr [rbx + 24]
.LBB60_165:                             #   in Loop: Header=BB60_163 Depth=1
	add	rdi, r14
	mov	qword ptr [rbx + 24], rdi
	mov	rax, qword ptr [rbx]
.Ltmp201:
	mov	rdi, rbx
	call	qword ptr [rax]
.Ltmp202:
# %bb.166:                              #   in Loop: Header=BB60_163 Depth=1
	sub	r12, r14
	add	r13, r14
	mov	r14, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	sub	r14, rdi
	add	r14, qword ptr [rbx + 16]
	cmp	r14, r12
	jbe	.LBB60_163
# %bb.167:
	test	r12, r12
	je	.LBB60_169
.LBB60_168:
	mov	rsi, r13
	mov	rdx, r12
	call	memcpy@PLT
	add	qword ptr [rbx + 24], r12
.LBB60_169:
	mov	rdi, qword ptr [rsp + 176]
	cmp	rdi, rbp
	je	.LBB60_171
.LBB60_170:
	call	_ZdlPv@PLT
.LBB60_171:
	mov	rdi, qword ptr [rsp + 336]
	lea	rax, [rsp + 352]
	cmp	rdi, rax
	je	.LBB60_173
# %bb.172:
	call	_ZdlPv@PLT
.LBB60_173:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 400]
	jne	.LBB60_217
# %bb.174:
	mov	rax, rbx
	add	rsp, 408
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB60_143:
	.cfi_def_cfa_offset 464
	mov	rcx, qword ptr [rsp + 368]
	lea	rax, [rsp + 384]
	cmp	rcx, rax
	je	.LBB60_146
# %bb.144:
	mov	qword ptr [rsp + 176], rcx
	movupd	xmm0, xmmword ptr [rsp + 376]
	movupd	xmmword ptr [rsp + 184], xmm0
.LBB60_145:
	mov	qword ptr [rsp + 368], rax
	mov	rdi, rax
	jmp	.LBB60_152
.LBB60_146:
	mov	rsi, rax
.LBB60_147:
	mov	rdx, qword ptr [rsp + 376]
	test	rdx, rdx
	je	.LBB60_151
# %bb.148:
	cmp	rdx, 1
	jne	.LBB60_150
# %bb.149:
	movzx	eax, byte ptr [rsi]
	mov	byte ptr [rdi], al
	jmp	.LBB60_151
.LBB60_150:
	call	memcpy@PLT
.LBB60_151:
	mov	rax, qword ptr [rsp + 376]
	mov	qword ptr [rsp + 184], rax
	mov	rcx, qword ptr [rsp + 176]
	mov	byte ptr [rcx + rax], 0
	mov	rdi, qword ptr [rsp + 368]
.LBB60_152:
	mov	qword ptr [rsp + 376], 0
	mov	byte ptr [rdi], 0
	mov	rdi, qword ptr [rsp + 368]
	lea	rax, [rsp + 384]
	cmp	rdi, rax
	je	.LBB60_154
# %bb.153:
	call	_ZdlPv@PLT
.LBB60_154:
	lea	rdi, [rsp + 144]
	call	_ZNSt6localeD1Ev@PLT
	mov	rax, qword ptr [rsp + 184]
	mov	r13, r15
	test	rax, rax
	je	.LBB60_156
# %bb.155:
	mov	r13, qword ptr [rsp + 176]
	mov	r12, rax
.LBB60_156:
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	mov	eax, dword ptr [rax]
	shr	eax, 7
	and	eax, 3
	cmp	eax, 2
	jne	.LBB60_157
.LBB60_136:
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	movzx	eax, word ptr [rax + 4]
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	mov	rdx, qword ptr [rdi]
	mov	esi, edx
	and	esi, 15
	cmp	rsi, rax
	jbe	.LBB60_138
# %bb.137:
	shr	rdx, 4
	lea	ecx, [rax + 4*rax]
                                        # kill: def $cl killed $cl killed $ecx
	shr	rdx, cl
	and	dl, 31
	mov	rcx, qword ptr [rdi + 8]
	shl	eax, 4
	movapd	xmm0, xmmword ptr [rcx + rax]
	movapd	xmmword ptr [rsp + 144], xmm0
	mov	ecx, edx
	jmp	.LBB60_141
.LBB60_138:
	xor	ecx, ecx
	test	rsi, rsi
	jne	.LBB60_141
# %bb.139:
	shr	rdx, 4
	cmp	rdx, rax
	jbe	.LBB60_141
# %bb.140:
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	mov	rcx, qword ptr [rcx + 8]
	shl	eax, 5
	movapd	xmm0, xmmword ptr [rcx + rax]
	movapd	xmmword ptr [rsp + 144], xmm0
	movzx	ecx, byte ptr [rcx + rax + 16]
.LBB60_141:
	movapd	xmm0, xmmword ptr [rsp + 144]
	movapd	xmmword ptr [rsp + 368], xmm0
	mov	byte ptr [rsp + 384], cl
.Ltmp192:
	movzx	edx, cl
	lea	rdi, [rsp + 368]
	lea	rsi, [rsp + 175]
	call	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE
.Ltmp193:
# %bb.142:
	sub	rax, r12
	jbe	.LBB60_161
.LBB60_159:
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	mov	edx, dword ptr [rsi]
	mov	ecx, edx
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	mov	rdi, qword ptr [rdi + 16]
	and	ecx, 3
	je	.LBB60_175
# %bb.160:
	mov	r9d, dword ptr [rsi + 8]
	jmp	.LBB60_180
.LBB60_175:
	mov	ecx, 2
	mov	r9d, 32
	test	dl, 64
	je	.LBB60_180
# %bb.176:
	movsd	xmm0, qword ptr [rsp + 136]     # xmm0 = mem[0],zero
	andpd	xmm0, xmmword ptr [rip + .LCPI60_0]
	ucomisd	xmm0, qword ptr [rip + .LCPI60_1]
	je	.LBB60_180
# %bb.177:
	movzx	edx, byte ptr [r15]
	lea	rsi, [rip + _ZNSt8__detail31__from_chars_alnum_to_val_tableILb0EE5valueE]
	mov	r9d, 48
	cmp	byte ptr [rdx + rsi], 16
	jb	.LBB60_180
# %bb.178:
	movzx	edx, byte ptr [r13]
	mov	rsi, qword ptr [rdi + 24]
	lea	r8, [rsi + 1]
	mov	qword ptr [rdi + 24], r8
	mov	byte ptr [rsi], dl
	mov	rdx, qword ptr [rdi + 24]
	sub	rdx, qword ptr [rdi + 8]
	cmp	rdx, qword ptr [rdi + 16]
	je	.LBB60_185
.LBB60_179:
	inc	r13
	dec	r12
.LBB60_180:
.Ltmp198:
	mov	rsi, r12
	mov	rdx, r13
	mov	r8, rax
	call	_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi
.Ltmp199:
# %bb.181:
	mov	rbx, rax
	mov	rdi, qword ptr [rsp + 176]
	cmp	rdi, rbp
	jne	.LBB60_170
	jmp	.LBB60_171
.LBB60_182:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 400]
	jne	.LBB60_217
# %bb.183:
.Ltmp184:
	call	_ZSt17__throw_bad_allocv@PLT
.Ltmp185:
# %bb.184:
.LBB60_185:
	mov	rcx, qword ptr [rdi]
.Ltmp195:
	mov	rbx, rdi
	mov	r14, rax
	call	qword ptr [rcx]
	mov	r9d, 48
	mov	rdi, rbx
	mov	ecx, 2
	mov	rax, r14
.Ltmp196:
	jmp	.LBB60_179
.LBB60_186:
	mov	ebx, 256
	jmp	.LBB60_78
.LBB60_187:
	lea	rdi, [rip + .L.str.3]
	jmp	.LBB60_195
.LBB60_188:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 400]
	jne	.LBB60_217
# %bb.189:
.Ltmp181:
	lea	rdi, [rip + .L.str.12]
	lea	rsi, [rip + .L.str.28]
	mov	rdx, qword ptr [rsp]            # 8-byte Reload
	mov	rcx, r12
	xor	eax, eax
	call	_ZSt24__throw_out_of_range_fmtPKcz@PLT
.Ltmp182:
# %bb.190:
.LBB60_191:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 400]
	jne	.LBB60_217
# %bb.192:
.Ltmp179:
	lea	rdi, [rip + .L.str.7]
	call	_ZSt20__throw_length_errorPKc@PLT
.Ltmp180:
# %bb.193:
.LBB60_194:
	lea	rdi, [rip + .L.str.8]
.LBB60_195:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 400]
	jne	.LBB60_217
# %bb.196:
.Ltmp186:
	call	_ZSt20__throw_length_errorPKc@PLT
.Ltmp187:
# %bb.197:
.LBB60_198:
.Ltmp197:
	jmp	.LBB60_209
.LBB60_199:
.Ltmp162:
	jmp	.LBB60_204
.LBB60_200:
.Ltmp165:
	jmp	.LBB60_204
.LBB60_201:
.Ltmp172:
	jmp	.LBB60_204
.LBB60_202:
.Ltmp183:
	jmp	.LBB60_204
.LBB60_203:
.Ltmp159:
	jmp	.LBB60_204
.LBB60_205:
.Ltmp191:
	mov	rbx, rax
	lea	rdi, [rsp + 144]
	call	_ZNSt6localeD1Ev@PLT
	jmp	.LBB60_210
.LBB60_206:
.Ltmp200:
	jmp	.LBB60_209
.LBB60_207:
.Ltmp194:
	jmp	.LBB60_209
.LBB60_208:
.Ltmp203:
.LBB60_209:
	mov	rbx, rax
.LBB60_210:
	mov	rdi, qword ptr [rsp + 176]
	cmp	rdi, rbp
	jne	.LBB60_214
# %bb.211:
	mov	rdi, qword ptr [rsp + 336]
	lea	rax, [rsp + 352]
	cmp	rdi, rax
	jne	.LBB60_216
.LBB60_212:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 400]
	jne	.LBB60_217
.LBB60_213:
	mov	rdi, rbx
	call	_Unwind_Resume@PLT
.LBB60_214:
	call	_ZdlPv@PLT
	mov	rdi, qword ptr [rsp + 336]
	lea	rax, [rsp + 352]
	cmp	rdi, rax
	je	.LBB60_212
	jmp	.LBB60_216
.LBB60_215:
.Ltmp188:
.LBB60_204:
	mov	rbx, rax
	mov	rdi, qword ptr [rsp + 336]
	lea	rax, [rsp + 352]
	cmp	rdi, rax
	je	.LBB60_212
.LBB60_216:
	call	_ZdlPv@PLT
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 400]
	je	.LBB60_213
.LBB60_217:
	call	__stack_chk_fail@PLT
.Lfunc_end60:
	.size	_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_, .Lfunc_end60-_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.cfi_endproc
	.section	.rodata._ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"aG",@progbits,_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.p2align	2, 0x0
.LJTI60_0:
	.long	.LBB60_13-.LJTI60_0
	.long	.LBB60_18-.LJTI60_0
	.long	.LBB60_17-.LJTI60_0
	.long	.LBB60_16-.LJTI60_0
	.long	.LBB60_15-.LJTI60_0
	.long	.LBB60_21-.LJTI60_0
	.long	.LBB60_20-.LJTI60_0
	.long	.LBB60_23-.LJTI60_0
	.long	.LBB60_22-.LJTI60_0
	.section	.gcc_except_table._ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"aG",@progbits,_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.p2align	2, 0x0
GCC_except_table60:
.Lexception16:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end16-.Lcst_begin16
.Lcst_begin16:
	.uleb128 .Ltmp157-.Lfunc_begin16        # >> Call Site 1 <<
	.uleb128 .Ltmp158-.Ltmp157              #   Call between .Ltmp157 and .Ltmp158
	.uleb128 .Ltmp159-.Lfunc_begin16        #     jumps to .Ltmp159
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp158-.Lfunc_begin16        # >> Call Site 2 <<
	.uleb128 .Ltmp166-.Ltmp158              #   Call between .Ltmp158 and .Ltmp166
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp166-.Lfunc_begin16        # >> Call Site 3 <<
	.uleb128 .Ltmp167-.Ltmp166              #   Call between .Ltmp166 and .Ltmp167
	.uleb128 .Ltmp188-.Lfunc_begin16        #     jumps to .Ltmp188
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp167-.Lfunc_begin16        # >> Call Site 4 <<
	.uleb128 .Ltmp160-.Ltmp167              #   Call between .Ltmp167 and .Ltmp160
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp160-.Lfunc_begin16        # >> Call Site 5 <<
	.uleb128 .Ltmp161-.Ltmp160              #   Call between .Ltmp160 and .Ltmp161
	.uleb128 .Ltmp162-.Lfunc_begin16        #     jumps to .Ltmp162
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp163-.Lfunc_begin16        # >> Call Site 6 <<
	.uleb128 .Ltmp164-.Ltmp163              #   Call between .Ltmp163 and .Ltmp164
	.uleb128 .Ltmp165-.Lfunc_begin16        #     jumps to .Ltmp165
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp164-.Lfunc_begin16        # >> Call Site 7 <<
	.uleb128 .Ltmp168-.Ltmp164              #   Call between .Ltmp164 and .Ltmp168
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp168-.Lfunc_begin16        # >> Call Site 8 <<
	.uleb128 .Ltmp169-.Ltmp168              #   Call between .Ltmp168 and .Ltmp169
	.uleb128 .Ltmp188-.Lfunc_begin16        #     jumps to .Ltmp188
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp170-.Lfunc_begin16        # >> Call Site 9 <<
	.uleb128 .Ltmp171-.Ltmp170              #   Call between .Ltmp170 and .Ltmp171
	.uleb128 .Ltmp172-.Lfunc_begin16        #     jumps to .Ltmp172
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp173-.Lfunc_begin16        # >> Call Site 10 <<
	.uleb128 .Ltmp176-.Ltmp173              #   Call between .Ltmp173 and .Ltmp176
	.uleb128 .Ltmp188-.Lfunc_begin16        #     jumps to .Ltmp188
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp176-.Lfunc_begin16        # >> Call Site 11 <<
	.uleb128 .Ltmp177-.Ltmp176              #   Call between .Ltmp176 and .Ltmp177
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp177-.Lfunc_begin16        # >> Call Site 12 <<
	.uleb128 .Ltmp178-.Ltmp177              #   Call between .Ltmp177 and .Ltmp178
	.uleb128 .Ltmp183-.Lfunc_begin16        #     jumps to .Ltmp183
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp178-.Lfunc_begin16        # >> Call Site 13 <<
	.uleb128 .Ltmp189-.Ltmp178              #   Call between .Ltmp178 and .Ltmp189
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp189-.Lfunc_begin16        # >> Call Site 14 <<
	.uleb128 .Ltmp190-.Ltmp189              #   Call between .Ltmp189 and .Ltmp190
	.uleb128 .Ltmp191-.Lfunc_begin16        #     jumps to .Ltmp191
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp190-.Lfunc_begin16        # >> Call Site 15 <<
	.uleb128 .Ltmp201-.Ltmp190              #   Call between .Ltmp190 and .Ltmp201
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp201-.Lfunc_begin16        # >> Call Site 16 <<
	.uleb128 .Ltmp202-.Ltmp201              #   Call between .Ltmp201 and .Ltmp202
	.uleb128 .Ltmp203-.Lfunc_begin16        #     jumps to .Ltmp203
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp202-.Lfunc_begin16        # >> Call Site 17 <<
	.uleb128 .Ltmp192-.Ltmp202              #   Call between .Ltmp202 and .Ltmp192
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp192-.Lfunc_begin16        # >> Call Site 18 <<
	.uleb128 .Ltmp193-.Ltmp192              #   Call between .Ltmp192 and .Ltmp193
	.uleb128 .Ltmp194-.Lfunc_begin16        #     jumps to .Ltmp194
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp198-.Lfunc_begin16        # >> Call Site 19 <<
	.uleb128 .Ltmp199-.Ltmp198              #   Call between .Ltmp198 and .Ltmp199
	.uleb128 .Ltmp200-.Lfunc_begin16        #     jumps to .Ltmp200
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp184-.Lfunc_begin16        # >> Call Site 20 <<
	.uleb128 .Ltmp185-.Ltmp184              #   Call between .Ltmp184 and .Ltmp185
	.uleb128 .Ltmp188-.Lfunc_begin16        #     jumps to .Ltmp188
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp195-.Lfunc_begin16        # >> Call Site 21 <<
	.uleb128 .Ltmp196-.Ltmp195              #   Call between .Ltmp195 and .Ltmp196
	.uleb128 .Ltmp197-.Lfunc_begin16        #     jumps to .Ltmp197
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp181-.Lfunc_begin16        # >> Call Site 22 <<
	.uleb128 .Ltmp180-.Ltmp181              #   Call between .Ltmp181 and .Ltmp180
	.uleb128 .Ltmp183-.Lfunc_begin16        #     jumps to .Ltmp183
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp186-.Lfunc_begin16        # >> Call Site 23 <<
	.uleb128 .Ltmp187-.Ltmp186              #   Call between .Ltmp186 and .Ltmp187
	.uleb128 .Ltmp188-.Lfunc_begin16        #     jumps to .Ltmp188
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp187-.Lfunc_begin16        # >> Call Site 24 <<
	.uleb128 .Lfunc_end60-.Ltmp187          #   Call between .Ltmp187 and .Lfunc_end60
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end16:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_,"axG",@progbits,_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_,comdat
	.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_ # -- Begin function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_
	.p2align	4, 0x90
	.type	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_,@function
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_: # @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	push	rax
	.cfi_def_cfa_offset 64
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	r14, rdx
	mov	r12, rsi
	mov	rbx, rdi
	mov	r13, qword ptr [rdi]
	lea	rbp, [rdi + 16]
	mov	eax, 15
	cmp	r13, rbp
	je	.LBB61_2
# %bb.1:
	mov	rax, qword ptr [rbx + 16]
.LBB61_2:
	cmp	rax, r12
	jae	.LBB61_3
# %bb.4:
	mov	qword ptr [rsp], r14            # 8-byte Spill
	test	r12, r12
	js	.LBB61_22
# %bb.5:
	add	rax, rax
	movabs	r14, 9223372036854775807
	cmp	rax, r14
	cmovb	r14, rax
	cmp	rax, r12
	cmovbe	r14, r12
	mov	rdi, r14
	inc	rdi
	js	.LBB61_23
# %bb.6:
	call	_Znwm@PLT
	mov	r15, rax
	mov	rdx, qword ptr [rbx + 8]
	cmp	rdx, -1
	je	.LBB61_10
# %bb.7:
	test	rdx, rdx
	jne	.LBB61_9
# %bb.8:
	movzx	eax, byte ptr [r13]
	mov	byte ptr [r15], al
.LBB61_10:
	cmp	r13, rbp
	je	.LBB61_12
.LBB61_11:
	mov	rdi, r13
	call	_ZdlPv@PLT
.LBB61_12:
	mov	qword ptr [rbx], r15
	mov	qword ptr [rbx + 16], r14
	mov	r14, qword ptr [rsp]            # 8-byte Reload
	jmp	.LBB61_13
.LBB61_3:
	mov	r15, r13
.LBB61_13:
	mov	rax, qword ptr [r14]
	lea	rdi, [r15 + 1]
	lea	rsi, [r15 + r12]
	dec	rsi
	mov	rcx, qword ptr [rax]
	cmp	byte ptr [rcx], 0
	je	.LBB61_15
# %bb.14:
	mov	rcx, qword ptr [rax + 8]
	mov	rdx, qword ptr [rax + 16]
	movsd	xmm0, qword ptr [rcx]           # xmm0 = mem[0],zero
	mov	edx, dword ptr [rdx]
	mov	rax, qword ptr [rax + 24]
	mov	ecx, dword ptr [rax]
	call	_ZSt8to_charsPcS_dSt12chars_formati@PLT
	jmp	.LBB61_18
.LBB61_15:
	mov	rcx, qword ptr [rax + 8]
	mov	rax, qword ptr [rax + 16]
	mov	edx, dword ptr [rax]
	movsd	xmm0, qword ptr [rcx]           # xmm0 = mem[0],zero
	test	edx, edx
	je	.LBB61_17
# %bb.16:
	call	_ZSt8to_charsPcS_dSt12chars_format@PLT
	jmp	.LBB61_18
.LBB61_9:
	inc	rdx
	mov	rdi, r15
	mov	rsi, r13
	call	memcpy@PLT
	cmp	r13, rbp
	jne	.LBB61_11
	jmp	.LBB61_12
.LBB61_17:
	call	_ZSt8to_charsPcS_d@PLT
.LBB61_18:
	mov	rcx, qword ptr [r14 + 8]
	mov	qword ptr [rcx], rax
	mov	dword ptr [rcx + 8], edx
	mov	rax, qword ptr [r14 + 8]
	cmp	dword ptr [rax + 8], 0
	je	.LBB61_20
# %bb.19:
	xor	eax, eax
	jmp	.LBB61_21
.LBB61_20:
	mov	rax, qword ptr [rax]
	sub	rax, r15
.LBB61_21:
	mov	qword ptr [rbx + 8], rax
	mov	rcx, qword ptr [rbx]
	mov	byte ptr [rcx + rax], 0
	add	rsp, 8
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB61_23:
	.cfi_def_cfa_offset 64
	call	_ZSt17__throw_bad_allocv@PLT
.LBB61_22:
	lea	rdi, [rip + .L.str.3]
	call	_ZSt20__throw_length_errorPKc@PLT
.Lfunc_end61:
	.size	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_, .Lfunc_end61-_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
.LCPI62_0:
	.long	0x7f800000                      # float +Inf
	.section	.text._ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"axG",@progbits,_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.weak	_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.p2align	4, 0x90
	.type	_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,@function
_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_: # @_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
.Lfunc_begin17:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception17
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 424
	.cfi_def_cfa_offset 480
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	fld	tbyte ptr [rsp + 480]
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 416], rax
	fstp	tbyte ptr [rsp + 144]
	lea	rax, [rsp + 368]
	mov	qword ptr [rsp + 352], rax
	mov	qword ptr [rsp + 360], 0
	mov	byte ptr [rsp + 368], 0
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 128], xmm0
	mov	qword ptr [rsp + 120], 6
	mov	eax, dword ptr [rdi]
	test	eax, 1536
	setne	byte ptr [rsp + 119]
	mov	qword ptr [rsp + 40], rdi       # 8-byte Spill
	mov	qword ptr [rsp + 48], rsi       # 8-byte Spill
	je	.LBB62_4
# %bb.1:
	mov	edx, eax
	shr	edx, 9
	and	edx, 3
	cmp	edx, 2
	je	.LBB62_5
# %bb.2:
	mov	rcx, -1
	cmp	edx, 1
	jne	.LBB62_12
# %bb.3:
	movzx	ecx, word ptr [rdi + 6]
	mov	qword ptr [rsp + 120], rcx
	lea	r15, [rsp + 225]
	lea	r14, [rsp + 352]
	mov	dword ptr [rsp + 112], 0
	mov	edx, eax
	shr	edx, 11
	and	edx, 15
	mov	r9b, 101
	xor	esi, esi
	lea	rdi, [rip + .LJTI62_0]
	movsxd	rdx, dword ptr [rdi + 4*rdx]
	add	rdx, rdi
	xor	edi, edi
	xor	r8d, r8d
	xor	ebp, ebp
	jmp	rdx
.LBB62_4:
	mov	ecx, 6
	lea	r15, [rsp + 225]
	lea	r14, [rsp + 352]
	mov	dword ptr [rsp + 112], 0
	mov	edx, eax
	shr	edx, 11
	and	edx, 15
	mov	r9b, 101
	xor	esi, esi
	lea	rdi, [rip + .LJTI62_0]
	movsxd	rdx, dword ptr [rdi + 4*rdx]
	add	rdx, rdi
	xor	edi, edi
	xor	r8d, r8d
	xor	ebp, ebp
	jmp	rdx
.LBB62_5:
	movzx	eax, word ptr [rdi + 6]
	mov	rdx, qword ptr [rsi]
	mov	r8d, edx
	and	r8d, 15
	cmp	r8, rax
	jbe	.LBB62_7
# %bb.6:
	mov	rbx, rdi
	shr	rdx, 4
	lea	ecx, [rax + 4*rax]
                                        # kill: def $cl killed $cl killed $ecx
	shr	rdx, cl
	and	dl, 31
	mov	rcx, qword ptr [rsi + 8]
	shl	eax, 4
	movaps	xmm0, xmmword ptr [rcx + rax]
	movaps	xmmword ptr [rsp + 80], xmm0
	mov	ecx, edx
	jmp	.LBB62_10
.LBB62_7:
	xor	ecx, ecx
	mov	rbx, rdi
	test	r8, r8
	jne	.LBB62_10
# %bb.8:
	shr	rdx, 4
	cmp	rdx, rax
	jbe	.LBB62_10
# %bb.9:
	mov	rcx, qword ptr [rsi + 8]
	shl	eax, 5
	movaps	xmm0, xmmword ptr [rcx + rax]
	movaps	xmmword ptr [rsp + 80], xmm0
	movzx	ecx, byte ptr [rcx + rax + 16]
.LBB62_10:
	movaps	xmm0, xmmword ptr [rsp + 80]
	movaps	xmmword ptr [rsp + 384], xmm0
	mov	byte ptr [rsp + 400], cl
.Ltmp204:
	movzx	edx, cl
	lea	rdi, [rsp + 384]
	lea	rsi, [rsp + 192]
	call	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE
.Ltmp205:
# %bb.11:
	mov	rcx, rax
	mov	eax, dword ptr [rbx]
.LBB62_12:
	mov	qword ptr [rsp + 120], rcx
	lea	r15, [rsp + 225]
	lea	r14, [rsp + 352]
	mov	dword ptr [rsp + 112], 0
	mov	edx, eax
	shr	edx, 11
	and	edx, 15
	mov	r9b, 101
	xor	esi, esi
	lea	rdi, [rip + .LJTI62_0]
	movsxd	rdx, dword ptr [rdi + 4*rdx]
	add	rdx, rdi
	xor	edi, edi
	xor	r8d, r8d
	xor	ebp, ebp
	jmp	rdx
.LBB62_13:
	cmp	byte ptr [rsp + 119], 0
	je	.LBB62_72
# %bb.14:
	mov	dword ptr [rsp + 112], 3
	mov	r9b, 101
	mov	edx, 3
	mov	dword ptr [rsp + 16], 0         # 4-byte Folded Spill
	xor	esi, esi
	jmp	.LBB62_24
.LBB62_15:
	mov	sil, 1
	mov	r9b, 69
.LBB62_16:
	mov	byte ptr [rsp + 119], 1
	mov	dword ptr [rsp + 112], 1
	mov	edx, 1
	mov	dword ptr [rsp + 16], 0         # 4-byte Folded Spill
	jmp	.LBB62_24
.LBB62_17:
	mov	bpl, 1
	mov	r9b, 80
.LBB62_18:
	and	eax, 30720
	cmp	eax, 4096
	movzx	eax, r9b
	mov	r9d, 112
	cmove	r9d, eax
	mov	dword ptr [rsp + 112], 4
	cmp	byte ptr [rsp + 119], 0
	lea	rax, [rsp + 119]
	mov	qword ptr [rsp + 80], rax
	lea	rax, [rsp + 144]
	mov	qword ptr [rsp + 88], rax
	lea	rax, [rsp + 112]
	mov	qword ptr [rsp + 96], rax
	lea	rax, [rsp + 120]
	mov	qword ptr [rsp + 104], rax
	je	.LBB62_70
# %bb.19:
	mov	dword ptr [rsp + 16], 0         # 4-byte Folded Spill
	mov	edx, 4
	jmp	.LBB62_25
.LBB62_20:
	mov	dil, 1
.LBB62_21:
	mov	byte ptr [rsp + 119], 1
	mov	dword ptr [rsp + 112], 2
	mov	r9b, 101
	mov	edx, 2
	mov	dword ptr [rsp + 16], 0         # 4-byte Folded Spill
	mov	esi, edi
	jmp	.LBB62_24
.LBB62_22:
	mov	r8b, 1
	mov	r9b, 69
.LBB62_23:
	mov	byte ptr [rsp + 119], 1
	mov	dword ptr [rsp + 112], 3
	mov	al, 1
	mov	dword ptr [rsp + 16], eax       # 4-byte Spill
	mov	edx, 3
	mov	esi, r8d
.LBB62_24:
	lea	rax, [rsp + 119]
	mov	qword ptr [rsp + 80], rax
	lea	rax, [rsp + 144]
	mov	qword ptr [rsp + 88], rax
	lea	rax, [rsp + 112]
	mov	qword ptr [rsp + 96], rax
	lea	rax, [rsp + 120]
	mov	qword ptr [rsp + 104], rax
	mov	ebp, esi
.LBB62_25:
	mov	dword ptr [rsp + 28], r9d       # 4-byte Spill
	fld	tbyte ptr [rsp + 144]
	fstp	tbyte ptr [rsp]
	mov	rdi, r15
	mov	rsi, r14
                                        # kill: def $ecx killed $ecx killed $rcx
	call	_ZSt8to_charsPcS_eSt12chars_formati@PLT
	mov	qword ptr [rsp + 128], rax
	mov	dword ptr [rsp + 136], edx
	cmp	edx, 75
	je	.LBB62_74
.LBB62_26:
	cmp	r15, rax
	setne	al
	and	bpl, al
	cmp	bpl, 1
	jne	.LBB62_29
# %bb.27:
	mov	rbx, r15
	.p2align	4, 0x90
.LBB62_28:                              # =>This Inner Loop Header: Depth=1
	movsx	edi, byte ptr [rbx]
	call	toupper@PLT
	mov	byte ptr [rbx], al
	inc	rbx
	cmp	rbx, qword ptr [rsp + 128]
	jne	.LBB62_28
.LBB62_29:
	movsx	rax, word ptr [rsp + 152]
	mov	r13d, 1
	test	rax, rax
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	js	.LBB62_36
# %bb.30:
	mov	eax, dword ptr [rcx]
	shr	eax, 2
	and	eax, 3
	cmp	eax, 3
	je	.LBB62_33
# %bb.31:
	cmp	eax, 1
	jne	.LBB62_35
# %bb.32:
	mov	byte ptr [r15 - 1], 43
	jmp	.LBB62_34
.LBB62_33:
	mov	byte ptr [r15 - 1], 32
.LBB62_34:
	dec	r15
	jmp	.LBB62_36
.LBB62_35:
	xor	r13d, r13d
.LBB62_36:
	mov	rbx, qword ptr [rsp + 128]
	mov	r12, rbx
	sub	r12, r15
	test	byte ptr [rcx], 16
	je	.LBB62_125
# %bb.37:
	fld	tbyte ptr [rsp + 144]
	fabs
	fld	dword ptr [rip + .LCPI62_0]
	fxch	st(1)
	fucompi	st, st(1)
	fstp	st(0)
	je	.LBB62_125
# %bb.38:
	test	r12, r12
	mov	qword ptr [rsp + 56], r14       # 8-byte Spill
	je	.LBB62_53
# %bb.39:
	mov	rdi, r15
	mov	esi, 46
	mov	rdx, r12
	call	memchr@PLT
	test	rax, rax
	je	.LBB62_51
# %bb.40:
	mov	rbp, rax
	sub	rbp, r15
	cmp	rbp, -1
	je	.LBB62_51
# %bb.41:
	lea	r14, [rbp + 1]
	mov	rdx, r12
	sub	rdx, r14
	jbe	.LBB62_44
# %bb.42:
	lea	rdi, [r15 + r14]
	movzx	esi, byte ptr [rsp + 28]        # 1-byte Folded Reload
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	call	memchr@PLT
	mov	rcx, rax
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	test	rcx, rcx
	je	.LBB62_44
# %bb.43:
	mov	rdx, rcx
	sub	rcx, r15
	mov	rdx, rcx
	cmp	rcx, -1
	jne	.LBB62_45
.LBB62_44:
	mov	rdx, r12
.LBB62_45:
	cmp	byte ptr [rsp + 16], 0          # 1-byte Folded Reload
	je	.LBB62_71
# %bb.46:
	cmp	byte ptr [r15 + r13], 48
	jne	.LBB62_83
# %bb.47:
	mov	rcx, -1
	cmp	r12, r14
	jbe	.LBB62_121
# %bb.48:
	not	rax
	add	rax, rbx
.LBB62_49:                              # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [r15 + r14], 48
	jne	.LBB62_120
# %bb.50:                               #   in Loop: Header=BB62_49 Depth=1
	inc	r14
	dec	rax
	jne	.LBB62_49
	jmp	.LBB62_121
.LBB62_51:
	movzx	esi, byte ptr [rsp + 28]        # 1-byte Folded Reload
	mov	rdi, r15
	mov	rdx, r12
	call	memchr@PLT
	test	rax, rax
	je	.LBB62_53
# %bb.52:
	mov	rbp, rax
	sub	rbp, r15
	cmp	rbp, -1
	jne	.LBB62_54
.LBB62_53:
	mov	rbp, r12
.LBB62_54:
	mov	rax, rbp
	sub	rax, r13
	mov	rsi, rbp
.LBB62_55:
	mov	rcx, qword ptr [rsp + 120]
	mov	rdx, rcx
	sub	rdx, rax
	test	rcx, rcx
	cmove	rdx, rcx
	xor	eax, eax
	cmp	byte ptr [rsp + 16], 0          # 1-byte Folded Reload
	cmovne	rax, rdx
	xor	r14d, r14d
	mov	qword ptr [rsp + 16], rsi       # 8-byte Spill
	cmp	rbp, rsi
	sete	r14b
	add	r14, rax
	je	.LBB62_125
# %bb.56:
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	r13, qword ptr [rsp + 360]
	test	r13, r13
	jne	.LBB62_61
# %bb.57:
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	sub	rax, rbx
	cmp	r14, rax
	ja	.LBB62_61
# %bb.58:
	mov	r13, qword ptr [rsp + 16]       # 8-byte Reload
	lea	rbx, [r15 + r13]
	lea	rdi, [rbx + r14]
	mov	rdx, r12
	sub	rdx, r13
	mov	rsi, rbx
	call	memmove@PLT
	cmp	rbp, r13
	jne	.LBB62_60
# %bb.59:
	inc	rbp
	mov	byte ptr [rbx], 46
	mov	r13, rbp
.LBB62_60:
	add	r13, r15
	mov	rdi, r13
	mov	esi, 48
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	call	memset@PLT
	add	r12, r14
	jmp	.LBB62_125
.LBB62_61:
	lea	rax, [r14 + r12]
	mov	rsi, qword ptr [rsp + 352]
	mov	ecx, 15
	lea	rdx, [rsp + 368]
	mov	qword ptr [rsp + 56], rsi       # 8-byte Spill
	cmp	rsi, rdx
	je	.LBB62_63
# %bb.62:
	mov	rcx, qword ptr [rsp + 368]
.LBB62_63:
	cmp	rcx, rax
	jae	.LBB62_88
# %bb.64:
	test	rax, rax
	js	.LBB62_187
# %bb.65:
	add	rcx, rcx
	movabs	rbx, 9223372036854775807
	cmp	rcx, rbx
	cmovb	rbx, rcx
	cmp	rcx, rax
	cmovbe	rbx, rax
	mov	rdi, rbx
	inc	rdi
	js	.LBB62_182
# %bb.66:
.Ltmp213:
	call	_Znwm@PLT
.Ltmp214:
# %bb.67:
	mov	rcx, rax
	cmp	r13, -1
	je	.LBB62_85
# %bb.68:
	test	r13, r13
	jne	.LBB62_84
# %bb.69:
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	eax, byte ptr [rax]
	mov	byte ptr [rcx], al
	jmp	.LBB62_85
.LBB62_70:
	mov	dword ptr [rsp + 28], r9d       # 4-byte Spill
	fld	tbyte ptr [rsp + 144]
	fstp	tbyte ptr [rsp]
	mov	rdi, r15
	mov	rsi, r14
	mov	edx, 4
	call	_ZSt8to_charsPcS_eSt12chars_format@PLT
	jmp	.LBB62_73
.LBB62_71:
                                        # implicit-def: $rax
	mov	rsi, rdx
	jmp	.LBB62_55
.LBB62_72:
	lea	rax, [rsp + 119]
	mov	qword ptr [rsp + 80], rax
	lea	rax, [rsp + 144]
	mov	qword ptr [rsp + 88], rax
	lea	rax, [rsp + 112]
	mov	qword ptr [rsp + 96], rax
	lea	rax, [rsp + 120]
	mov	qword ptr [rsp + 104], rax
	fld	tbyte ptr [rsp + 144]
	fstp	tbyte ptr [rsp]
	mov	rdi, r15
	mov	rsi, r14
	call	_ZSt8to_charsPcS_e@PLT
	mov	cl, 101
	mov	dword ptr [rsp + 28], ecx       # 4-byte Spill
	xor	ebp, ebp
.LBB62_73:
	mov	dword ptr [rsp + 16], 0         # 4-byte Folded Spill
	mov	qword ptr [rsp + 128], rax
	mov	dword ptr [rsp + 136], edx
	cmp	edx, 75
	jne	.LBB62_26
.LBB62_74:
	mov	rbx, qword ptr [rsp + 120]
	add	rbx, 8
	cmp	dword ptr [rsp + 112], 2
	jne	.LBB62_77
# %bb.75:
	fld	tbyte ptr [rsp + 144]
	fstp	tbyte ptr [rsp]
	lea	rdi, [rsp + 68]
	call	frexpl@PLT
	fstp	st(0)
	mov	eax, dword ptr [rsp + 68]
	test	eax, eax
	jle	.LBB62_77
# %bb.76:
	imul	eax, eax, 4004
	imul	rcx, rax, 995517945
	shr	rcx, 32
	sub	eax, ecx
	shr	eax
	add	eax, ecx
	shr	eax, 13
	add	rbx, rax
	inc	rbx
.LBB62_77:
	cmp	rbx, 128
	jbe	.LBB62_186
.LBB62_78:
.Ltmp207:
	lea	rdi, [rsp + 352]
	mov	rsi, rbx
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm
.Ltmp208:
# %bb.79:
	mov	r14d, 30
	lea	r12, [rsp + 80]
	lea	r13, [rsp + 128]
	lea	rbx, [rsp + 352]
	lea	r15, [rsp + 384]
.LBB62_80:                              # =>This Inner Loop Header: Depth=1
	mov	rsi, qword ptr [rsp + 368]
	add	rsi, rsi
	lea	rax, [rsp + 368]
	cmp	qword ptr [rsp + 352], rax
	cmove	rsi, r14
	mov	qword ptr [rsp + 384], r12
	mov	qword ptr [rsp + 392], r13
.Ltmp210:
	mov	rdi, rbx
	mov	rdx, r15
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_
.Ltmp211:
# %bb.81:                               #   in Loop: Header=BB62_80 Depth=1
	cmp	dword ptr [rsp + 136], 75
	je	.LBB62_80
# %bb.82:
	mov	r15, qword ptr [rsp + 352]
	mov	r14, qword ptr [rsp + 360]
	add	r14, r15
	inc	r15
	mov	rax, qword ptr [rsp + 128]
	jmp	.LBB62_26
.LBB62_83:
	not	r13
	mov	rsi, rdx
	add	r13, rdx
	mov	rax, r13
	jmp	.LBB62_55
.LBB62_84:
	lea	rdx, [r13 + 1]
	mov	rdi, rcx
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	mov	qword ptr [rsp + 72], rcx       # 8-byte Spill
	call	memcpy@PLT
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
.LBB62_85:
	lea	rax, [rsp + 368]
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	cmp	rdi, rax
	je	.LBB62_87
# %bb.86:
	mov	r13, rcx
	call	_ZdlPv@PLT
	mov	rcx, r13
	mov	r13, qword ptr [rsp + 360]
.LBB62_87:
	mov	qword ptr [rsp + 352], rcx
	mov	qword ptr [rsp + 368], rbx
.LBB62_88:
	test	r13, r13
	je	.LBB62_92
# %bb.89:
.Ltmp215:
	lea	rdi, [rsp + 352]
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	mov	rdx, r14
	mov	ecx, 48
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc
.Ltmp216:
# %bb.90:
	cmp	rbp, qword ptr [rsp + 16]       # 8-byte Folded Reload
	jne	.LBB62_124
# %bb.91:
	mov	rax, qword ptr [rsp + 352]
	mov	byte ptr [rax + rbp], 46
	jmp	.LBB62_124
.LBB62_92:
	mov	r14, qword ptr [rsp + 16]       # 8-byte Reload
	cmp	r12, r14
	mov	r8, r14
	cmovb	r8, r12
.Ltmp217:
	lea	rdi, [rsp + 352]
	xor	esi, esi
	xor	edx, edx
	mov	rcx, r15
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm
.Ltmp218:
# %bb.93:
	cmp	rbp, r14
	jne	.LBB62_100
# %bb.94:
	mov	rax, qword ptr [rsp + 352]
	mov	r14, qword ptr [rsp + 360]
	lea	rbx, [r14 + 1]
	mov	ecx, 15
	lea	rdx, [rsp + 368]
	cmp	rax, rdx
	je	.LBB62_96
# %bb.95:
	mov	rcx, qword ptr [rsp + 368]
.LBB62_96:
	cmp	rbx, rcx
	jbe	.LBB62_99
# %bb.97:
.Ltmp220:
	lea	rdi, [rsp + 352]
	mov	r8d, 1
	mov	rsi, r14
	xor	edx, edx
	xor	ecx, ecx
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
.Ltmp221:
# %bb.98:
	mov	rax, qword ptr [rsp + 352]
.LBB62_99:
	mov	byte ptr [rax + r14], 46
	mov	qword ptr [rsp + 360], rbx
	mov	rax, qword ptr [rsp + 352]
	mov	byte ptr [rax + r14 + 1], 0
	mov	r14, qword ptr [rsp + 16]       # 8-byte Reload
.LBB62_100:
	movabs	rbx, 9223372036854775807
	cmp	qword ptr [rsp + 32], 0         # 8-byte Folded Reload
	je	.LBB62_111
# %bb.101:
	mov	r14, qword ptr [rsp + 360]
	mov	rax, rbx
	sub	rax, r14
	cmp	rax, qword ptr [rsp + 32]       # 8-byte Folded Reload
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	jb	.LBB62_194
# %bb.102:
	lea	r13, [r14 + rax]
	mov	rdi, qword ptr [rsp + 352]
	mov	eax, 15
	lea	rcx, [rsp + 368]
	cmp	rdi, rcx
	je	.LBB62_104
# %bb.103:
	mov	rax, qword ptr [rsp + 368]
.LBB62_104:
	cmp	r13, rax
	mov	r8, qword ptr [rsp + 32]        # 8-byte Reload
	jbe	.LBB62_107
# %bb.105:
.Ltmp222:
	lea	rdi, [rsp + 352]
	mov	rsi, r14
	xor	edx, edx
	xor	ecx, ecx
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
.Ltmp223:
# %bb.106:
	mov	rdi, qword ptr [rsp + 352]
	mov	r8, qword ptr [rsp + 32]        # 8-byte Reload
.LBB62_107:
	add	rdi, r14
	cmp	r8, 1
	jne	.LBB62_109
# %bb.108:
	mov	byte ptr [rdi], 48
	jmp	.LBB62_110
.LBB62_109:
	mov	esi, 48
	mov	rdx, r8
	call	memset@PLT
.LBB62_110:
	mov	r14, qword ptr [rsp + 16]       # 8-byte Reload
	mov	qword ptr [rsp + 360], r13
	mov	rax, qword ptr [rsp + 352]
	mov	byte ptr [rax + r13], 0
.LBB62_111:
	mov	r8, r12
	sub	r8, r14
	jb	.LBB62_188
# %bb.112:
	mov	rsi, qword ptr [rsp + 360]
	sub	rbx, rsi
	cmp	rbx, r8
	jb	.LBB62_191
# %bb.113:
	lea	rbx, [rsi + r8]
	mov	rdi, qword ptr [rsp + 352]
	mov	eax, 15
	lea	rcx, [rsp + 368]
	cmp	rdi, rcx
	je	.LBB62_115
# %bb.114:
	mov	rax, qword ptr [rsp + 368]
.LBB62_115:
	add	r15, r14
	cmp	rbx, rax
	jbe	.LBB62_117
# %bb.116:
.Ltmp224:
	lea	rdi, [rsp + 352]
	xor	edx, edx
	mov	rcx, r15
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
.Ltmp225:
	jmp	.LBB62_123
.LBB62_117:
	cmp	r12, r14
	je	.LBB62_123
# %bb.118:
	add	rdi, rsi
	cmp	r8, 1
	jne	.LBB62_122
# %bb.119:
	movzx	eax, byte ptr [r15]
	mov	byte ptr [rdi], al
	jmp	.LBB62_123
.LBB62_120:
	mov	rcx, r14
.LBB62_121:
	mov	rsi, rdx
	mov	rax, rdx
	sub	rax, rcx
	jmp	.LBB62_55
.LBB62_122:
	mov	rsi, r15
	mov	rdx, r8
	call	memcpy@PLT
.LBB62_123:
	mov	qword ptr [rsp + 360], rbx
	mov	rax, qword ptr [rsp + 352]
	mov	byte ptr [rax + rbx], 0
.LBB62_124:
	mov	r15, qword ptr [rsp + 352]
	mov	r12, qword ptr [rsp + 360]
.LBB62_125:
	lea	rbp, [rsp + 208]
	mov	qword ptr [rsp + 192], rbp
	mov	qword ptr [rsp + 200], 0
	mov	byte ptr [rsp + 208], 0
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	mov	eax, dword ptr [rax]
	test	al, 32
	je	.LBB62_135
# %bb.127:
	fld	tbyte ptr [rsp + 144]
	fabs
	fld	dword ptr [rip + .LCPI62_0]
	fxch	st(1)
	fucompi	st, st(1)
	fstp	st(0)
	je	.LBB62_135
# %bb.128:
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	lea	rbx, [rax + 24]
	cmp	byte ptr [rax + 32], 0
	jne	.LBB62_130
# %bb.129:
	mov	rdi, rbx
	call	_ZNSt6localeC1Ev@PLT
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	mov	byte ptr [rax + 32], 1
.LBB62_130:
	lea	r14, [rsp + 160]
	mov	rdi, r14
	mov	rsi, rbx
	call	_ZNSt6localeC1ERKS_@PLT
.Ltmp236:
	movzx	r8d, byte ptr [rsp + 28]        # 1-byte Folded Reload
	lea	rdi, [rsp + 384]
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	mov	rdx, r12
	mov	rcx, r15
	mov	r9, r14
	call	_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale
.Ltmp237:
# %bb.131:
	mov	rdi, qword ptr [rsp + 192]
	cmp	rdi, rbp
	je	.LBB62_143
# %bb.132:
	mov	rsi, qword ptr [rsp + 384]
	lea	rax, [rsp + 400]
	cmp	rsi, rax
	je	.LBB62_147
# %bb.133:
	mov	rcx, qword ptr [rsp + 208]
	mov	qword ptr [rsp + 192], rsi
	movups	xmm0, xmmword ptr [rsp + 392]
	movups	xmmword ptr [rsp + 200], xmm0
	test	rdi, rdi
	je	.LBB62_145
# %bb.134:
	mov	qword ptr [rsp + 384], rdi
	mov	qword ptr [rsp + 400], rcx
	jmp	.LBB62_152
.LBB62_135:
	mov	r13, r15
	shr	eax, 7
	and	eax, 3
	cmp	eax, 2
	je	.LBB62_136
.LBB62_157:
	cmp	eax, 1
	jne	.LBB62_161
# %bb.158:
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	movzx	eax, word ptr [rax + 4]
	sub	rax, r12
	ja	.LBB62_159
.LBB62_161:
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	mov	rbx, qword ptr [rax + 16]
	test	r12, r12
	je	.LBB62_169
# %bb.162:
	mov	r14, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	sub	r14, rdi
	add	r14, qword ptr [rbx + 16]
	cmp	r14, r12
	ja	.LBB62_168
	.p2align	4, 0x90
.LBB62_163:                             # =>This Inner Loop Header: Depth=1
	test	r14, r14
	je	.LBB62_165
# %bb.164:                              #   in Loop: Header=BB62_163 Depth=1
	mov	rsi, r13
	mov	rdx, r14
	call	memcpy@PLT
	mov	rdi, qword ptr [rbx + 24]
.LBB62_165:                             #   in Loop: Header=BB62_163 Depth=1
	add	rdi, r14
	mov	qword ptr [rbx + 24], rdi
	mov	rax, qword ptr [rbx]
.Ltmp248:
	mov	rdi, rbx
	call	qword ptr [rax]
.Ltmp249:
# %bb.166:                              #   in Loop: Header=BB62_163 Depth=1
	sub	r12, r14
	add	r13, r14
	mov	r14, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	sub	r14, rdi
	add	r14, qword ptr [rbx + 16]
	cmp	r14, r12
	jbe	.LBB62_163
# %bb.167:
	test	r12, r12
	je	.LBB62_169
.LBB62_168:
	mov	rsi, r13
	mov	rdx, r12
	call	memcpy@PLT
	add	qword ptr [rbx + 24], r12
.LBB62_169:
	mov	rdi, qword ptr [rsp + 192]
	cmp	rdi, rbp
	je	.LBB62_171
.LBB62_170:
	call	_ZdlPv@PLT
.LBB62_171:
	mov	rdi, qword ptr [rsp + 352]
	lea	rax, [rsp + 368]
	cmp	rdi, rax
	je	.LBB62_173
# %bb.172:
	call	_ZdlPv@PLT
.LBB62_173:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 416]
	jne	.LBB62_217
# %bb.174:
	mov	rax, rbx
	add	rsp, 424
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB62_143:
	.cfi_def_cfa_offset 480
	mov	rcx, qword ptr [rsp + 384]
	lea	rax, [rsp + 400]
	cmp	rcx, rax
	je	.LBB62_146
# %bb.144:
	mov	qword ptr [rsp + 192], rcx
	movups	xmm0, xmmword ptr [rsp + 392]
	movups	xmmword ptr [rsp + 200], xmm0
.LBB62_145:
	mov	qword ptr [rsp + 384], rax
	mov	rdi, rax
	jmp	.LBB62_152
.LBB62_146:
	mov	rsi, rax
.LBB62_147:
	mov	rdx, qword ptr [rsp + 392]
	test	rdx, rdx
	je	.LBB62_151
# %bb.148:
	cmp	rdx, 1
	jne	.LBB62_150
# %bb.149:
	movzx	eax, byte ptr [rsi]
	mov	byte ptr [rdi], al
	jmp	.LBB62_151
.LBB62_150:
	call	memcpy@PLT
.LBB62_151:
	mov	rax, qword ptr [rsp + 392]
	mov	qword ptr [rsp + 200], rax
	mov	rcx, qword ptr [rsp + 192]
	mov	byte ptr [rcx + rax], 0
	mov	rdi, qword ptr [rsp + 384]
.LBB62_152:
	mov	qword ptr [rsp + 392], 0
	mov	byte ptr [rdi], 0
	mov	rdi, qword ptr [rsp + 384]
	lea	rax, [rsp + 400]
	cmp	rdi, rax
	je	.LBB62_154
# %bb.153:
	call	_ZdlPv@PLT
.LBB62_154:
	lea	rdi, [rsp + 160]
	call	_ZNSt6localeD1Ev@PLT
	mov	rax, qword ptr [rsp + 200]
	mov	r13, r15
	test	rax, rax
	je	.LBB62_156
# %bb.155:
	mov	r13, qword ptr [rsp + 192]
	mov	r12, rax
.LBB62_156:
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	mov	eax, dword ptr [rax]
	shr	eax, 7
	and	eax, 3
	cmp	eax, 2
	jne	.LBB62_157
.LBB62_136:
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	movzx	eax, word ptr [rax + 4]
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	mov	rdx, qword ptr [rdi]
	mov	esi, edx
	and	esi, 15
	cmp	rsi, rax
	jbe	.LBB62_138
# %bb.137:
	shr	rdx, 4
	lea	ecx, [rax + 4*rax]
                                        # kill: def $cl killed $cl killed $ecx
	shr	rdx, cl
	and	dl, 31
	mov	rcx, qword ptr [rdi + 8]
	shl	eax, 4
	movaps	xmm0, xmmword ptr [rcx + rax]
	movaps	xmmword ptr [rsp + 160], xmm0
	mov	ecx, edx
	jmp	.LBB62_141
.LBB62_138:
	xor	ecx, ecx
	test	rsi, rsi
	jne	.LBB62_141
# %bb.139:
	shr	rdx, 4
	cmp	rdx, rax
	jbe	.LBB62_141
# %bb.140:
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	mov	rcx, qword ptr [rcx + 8]
	shl	eax, 5
	movaps	xmm0, xmmword ptr [rcx + rax]
	movaps	xmmword ptr [rsp + 160], xmm0
	movzx	ecx, byte ptr [rcx + rax + 16]
.LBB62_141:
	movaps	xmm0, xmmword ptr [rsp + 160]
	movaps	xmmword ptr [rsp + 384], xmm0
	mov	byte ptr [rsp + 400], cl
.Ltmp239:
	movzx	edx, cl
	lea	rdi, [rsp + 384]
	lea	rsi, [rsp + 191]
	call	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE
.Ltmp240:
# %bb.142:
	sub	rax, r12
	jbe	.LBB62_161
.LBB62_159:
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	mov	edx, dword ptr [rsi]
	mov	ecx, edx
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	mov	rdi, qword ptr [rdi + 16]
	and	ecx, 3
	je	.LBB62_175
# %bb.160:
	mov	r9d, dword ptr [rsi + 8]
	jmp	.LBB62_180
.LBB62_175:
	mov	ecx, 2
	mov	r9d, 32
	test	dl, 64
	je	.LBB62_180
# %bb.176:
	fld	tbyte ptr [rsp + 144]
	fabs
	fld	dword ptr [rip + .LCPI62_0]
	fxch	st(1)
	fucompi	st, st(1)
	fstp	st(0)
	je	.LBB62_180
# %bb.177:
	movzx	edx, byte ptr [r15]
	lea	rsi, [rip + _ZNSt8__detail31__from_chars_alnum_to_val_tableILb0EE5valueE]
	mov	r9d, 48
	cmp	byte ptr [rdx + rsi], 16
	jb	.LBB62_180
# %bb.178:
	movzx	edx, byte ptr [r13]
	mov	rsi, qword ptr [rdi + 24]
	lea	r8, [rsi + 1]
	mov	qword ptr [rdi + 24], r8
	mov	byte ptr [rsi], dl
	mov	rdx, qword ptr [rdi + 24]
	sub	rdx, qword ptr [rdi + 8]
	cmp	rdx, qword ptr [rdi + 16]
	je	.LBB62_185
.LBB62_179:
	inc	r13
	dec	r12
.LBB62_180:
.Ltmp245:
	mov	rsi, r12
	mov	rdx, r13
	mov	r8, rax
	call	_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi
.Ltmp246:
# %bb.181:
	mov	rbx, rax
	mov	rdi, qword ptr [rsp + 192]
	cmp	rdi, rbp
	jne	.LBB62_170
	jmp	.LBB62_171
.LBB62_182:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 416]
	jne	.LBB62_217
# %bb.183:
.Ltmp231:
	call	_ZSt17__throw_bad_allocv@PLT
.Ltmp232:
# %bb.184:
.LBB62_185:
	mov	rcx, qword ptr [rdi]
.Ltmp242:
	mov	rbx, rdi
	mov	r14, rax
	call	qword ptr [rcx]
	mov	r9d, 48
	mov	rdi, rbx
	mov	ecx, 2
	mov	rax, r14
.Ltmp243:
	jmp	.LBB62_179
.LBB62_186:
	mov	ebx, 256
	jmp	.LBB62_78
.LBB62_187:
	lea	rdi, [rip + .L.str.3]
	jmp	.LBB62_195
.LBB62_188:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 416]
	jne	.LBB62_217
# %bb.189:
.Ltmp228:
	lea	rdi, [rip + .L.str.12]
	lea	rsi, [rip + .L.str.28]
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	mov	rcx, r12
	xor	eax, eax
	call	_ZSt24__throw_out_of_range_fmtPKcz@PLT
.Ltmp229:
# %bb.190:
.LBB62_191:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 416]
	jne	.LBB62_217
# %bb.192:
.Ltmp226:
	lea	rdi, [rip + .L.str.7]
	call	_ZSt20__throw_length_errorPKc@PLT
.Ltmp227:
# %bb.193:
.LBB62_194:
	lea	rdi, [rip + .L.str.8]
.LBB62_195:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 416]
	jne	.LBB62_217
# %bb.196:
.Ltmp233:
	call	_ZSt20__throw_length_errorPKc@PLT
.Ltmp234:
# %bb.197:
.LBB62_198:
.Ltmp244:
	jmp	.LBB62_209
.LBB62_199:
.Ltmp209:
	jmp	.LBB62_204
.LBB62_200:
.Ltmp212:
	jmp	.LBB62_204
.LBB62_201:
.Ltmp219:
	jmp	.LBB62_204
.LBB62_202:
.Ltmp230:
	jmp	.LBB62_204
.LBB62_203:
.Ltmp206:
	jmp	.LBB62_204
.LBB62_205:
.Ltmp238:
	mov	rbx, rax
	lea	rdi, [rsp + 160]
	call	_ZNSt6localeD1Ev@PLT
	jmp	.LBB62_210
.LBB62_206:
.Ltmp247:
	jmp	.LBB62_209
.LBB62_207:
.Ltmp241:
	jmp	.LBB62_209
.LBB62_208:
.Ltmp250:
.LBB62_209:
	mov	rbx, rax
.LBB62_210:
	mov	rdi, qword ptr [rsp + 192]
	cmp	rdi, rbp
	jne	.LBB62_214
# %bb.211:
	mov	rdi, qword ptr [rsp + 352]
	lea	rax, [rsp + 368]
	cmp	rdi, rax
	jne	.LBB62_216
.LBB62_212:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 416]
	jne	.LBB62_217
.LBB62_213:
	mov	rdi, rbx
	call	_Unwind_Resume@PLT
.LBB62_214:
	call	_ZdlPv@PLT
	mov	rdi, qword ptr [rsp + 352]
	lea	rax, [rsp + 368]
	cmp	rdi, rax
	je	.LBB62_212
	jmp	.LBB62_216
.LBB62_215:
.Ltmp235:
.LBB62_204:
	mov	rbx, rax
	mov	rdi, qword ptr [rsp + 352]
	lea	rax, [rsp + 368]
	cmp	rdi, rax
	je	.LBB62_212
.LBB62_216:
	call	_ZdlPv@PLT
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 416]
	je	.LBB62_213
.LBB62_217:
	call	__stack_chk_fail@PLT
.Lfunc_end62:
	.size	_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_, .Lfunc_end62-_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.cfi_endproc
	.section	.rodata._ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"aG",@progbits,_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.p2align	2, 0x0
.LJTI62_0:
	.long	.LBB62_13-.LJTI62_0
	.long	.LBB62_18-.LJTI62_0
	.long	.LBB62_17-.LJTI62_0
	.long	.LBB62_16-.LJTI62_0
	.long	.LBB62_15-.LJTI62_0
	.long	.LBB62_21-.LJTI62_0
	.long	.LBB62_20-.LJTI62_0
	.long	.LBB62_23-.LJTI62_0
	.long	.LBB62_22-.LJTI62_0
	.section	.gcc_except_table._ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"aG",@progbits,_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.p2align	2, 0x0
GCC_except_table62:
.Lexception17:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end17-.Lcst_begin17
.Lcst_begin17:
	.uleb128 .Ltmp204-.Lfunc_begin17        # >> Call Site 1 <<
	.uleb128 .Ltmp205-.Ltmp204              #   Call between .Ltmp204 and .Ltmp205
	.uleb128 .Ltmp206-.Lfunc_begin17        #     jumps to .Ltmp206
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp205-.Lfunc_begin17        # >> Call Site 2 <<
	.uleb128 .Ltmp213-.Ltmp205              #   Call between .Ltmp205 and .Ltmp213
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp213-.Lfunc_begin17        # >> Call Site 3 <<
	.uleb128 .Ltmp214-.Ltmp213              #   Call between .Ltmp213 and .Ltmp214
	.uleb128 .Ltmp235-.Lfunc_begin17        #     jumps to .Ltmp235
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp214-.Lfunc_begin17        # >> Call Site 4 <<
	.uleb128 .Ltmp207-.Ltmp214              #   Call between .Ltmp214 and .Ltmp207
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp207-.Lfunc_begin17        # >> Call Site 5 <<
	.uleb128 .Ltmp208-.Ltmp207              #   Call between .Ltmp207 and .Ltmp208
	.uleb128 .Ltmp209-.Lfunc_begin17        #     jumps to .Ltmp209
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp210-.Lfunc_begin17        # >> Call Site 6 <<
	.uleb128 .Ltmp211-.Ltmp210              #   Call between .Ltmp210 and .Ltmp211
	.uleb128 .Ltmp212-.Lfunc_begin17        #     jumps to .Ltmp212
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp211-.Lfunc_begin17        # >> Call Site 7 <<
	.uleb128 .Ltmp215-.Ltmp211              #   Call between .Ltmp211 and .Ltmp215
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp215-.Lfunc_begin17        # >> Call Site 8 <<
	.uleb128 .Ltmp216-.Ltmp215              #   Call between .Ltmp215 and .Ltmp216
	.uleb128 .Ltmp235-.Lfunc_begin17        #     jumps to .Ltmp235
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp217-.Lfunc_begin17        # >> Call Site 9 <<
	.uleb128 .Ltmp218-.Ltmp217              #   Call between .Ltmp217 and .Ltmp218
	.uleb128 .Ltmp219-.Lfunc_begin17        #     jumps to .Ltmp219
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp220-.Lfunc_begin17        # >> Call Site 10 <<
	.uleb128 .Ltmp223-.Ltmp220              #   Call between .Ltmp220 and .Ltmp223
	.uleb128 .Ltmp235-.Lfunc_begin17        #     jumps to .Ltmp235
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp223-.Lfunc_begin17        # >> Call Site 11 <<
	.uleb128 .Ltmp224-.Ltmp223              #   Call between .Ltmp223 and .Ltmp224
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp224-.Lfunc_begin17        # >> Call Site 12 <<
	.uleb128 .Ltmp225-.Ltmp224              #   Call between .Ltmp224 and .Ltmp225
	.uleb128 .Ltmp230-.Lfunc_begin17        #     jumps to .Ltmp230
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp225-.Lfunc_begin17        # >> Call Site 13 <<
	.uleb128 .Ltmp236-.Ltmp225              #   Call between .Ltmp225 and .Ltmp236
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp236-.Lfunc_begin17        # >> Call Site 14 <<
	.uleb128 .Ltmp237-.Ltmp236              #   Call between .Ltmp236 and .Ltmp237
	.uleb128 .Ltmp238-.Lfunc_begin17        #     jumps to .Ltmp238
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp237-.Lfunc_begin17        # >> Call Site 15 <<
	.uleb128 .Ltmp248-.Ltmp237              #   Call between .Ltmp237 and .Ltmp248
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp248-.Lfunc_begin17        # >> Call Site 16 <<
	.uleb128 .Ltmp249-.Ltmp248              #   Call between .Ltmp248 and .Ltmp249
	.uleb128 .Ltmp250-.Lfunc_begin17        #     jumps to .Ltmp250
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp249-.Lfunc_begin17        # >> Call Site 17 <<
	.uleb128 .Ltmp239-.Ltmp249              #   Call between .Ltmp249 and .Ltmp239
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp239-.Lfunc_begin17        # >> Call Site 18 <<
	.uleb128 .Ltmp240-.Ltmp239              #   Call between .Ltmp239 and .Ltmp240
	.uleb128 .Ltmp241-.Lfunc_begin17        #     jumps to .Ltmp241
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp245-.Lfunc_begin17        # >> Call Site 19 <<
	.uleb128 .Ltmp246-.Ltmp245              #   Call between .Ltmp245 and .Ltmp246
	.uleb128 .Ltmp247-.Lfunc_begin17        #     jumps to .Ltmp247
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp231-.Lfunc_begin17        # >> Call Site 20 <<
	.uleb128 .Ltmp232-.Ltmp231              #   Call between .Ltmp231 and .Ltmp232
	.uleb128 .Ltmp235-.Lfunc_begin17        #     jumps to .Ltmp235
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp242-.Lfunc_begin17        # >> Call Site 21 <<
	.uleb128 .Ltmp243-.Ltmp242              #   Call between .Ltmp242 and .Ltmp243
	.uleb128 .Ltmp244-.Lfunc_begin17        #     jumps to .Ltmp244
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp228-.Lfunc_begin17        # >> Call Site 22 <<
	.uleb128 .Ltmp227-.Ltmp228              #   Call between .Ltmp228 and .Ltmp227
	.uleb128 .Ltmp230-.Lfunc_begin17        #     jumps to .Ltmp230
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp233-.Lfunc_begin17        # >> Call Site 23 <<
	.uleb128 .Ltmp234-.Ltmp233              #   Call between .Ltmp233 and .Ltmp234
	.uleb128 .Ltmp235-.Lfunc_begin17        #     jumps to .Ltmp235
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp234-.Lfunc_begin17        # >> Call Site 24 <<
	.uleb128 .Lfunc_end62-.Ltmp234          #   Call between .Ltmp234 and .Lfunc_end62
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end17:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_,"axG",@progbits,_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_,comdat
	.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_ # -- Begin function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_
	.p2align	4, 0x90
	.type	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_,@function
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_: # @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 24
	.cfi_def_cfa_offset 80
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	r14, rdx
	mov	r12, rsi
	mov	rbx, rdi
	mov	r13, qword ptr [rdi]
	lea	rbp, [rdi + 16]
	mov	eax, 15
	cmp	r13, rbp
	je	.LBB63_2
# %bb.1:
	mov	rax, qword ptr [rbx + 16]
.LBB63_2:
	cmp	rax, r12
	jae	.LBB63_3
# %bb.4:
	mov	qword ptr [rsp + 16], r14       # 8-byte Spill
	test	r12, r12
	js	.LBB63_22
# %bb.5:
	add	rax, rax
	movabs	r14, 9223372036854775807
	cmp	rax, r14
	cmovb	r14, rax
	cmp	rax, r12
	cmovbe	r14, r12
	mov	rdi, r14
	inc	rdi
	js	.LBB63_23
# %bb.6:
	call	_Znwm@PLT
	mov	r15, rax
	mov	rdx, qword ptr [rbx + 8]
	cmp	rdx, -1
	je	.LBB63_10
# %bb.7:
	test	rdx, rdx
	jne	.LBB63_9
# %bb.8:
	movzx	eax, byte ptr [r13]
	mov	byte ptr [r15], al
.LBB63_10:
	cmp	r13, rbp
	je	.LBB63_12
.LBB63_11:
	mov	rdi, r13
	call	_ZdlPv@PLT
.LBB63_12:
	mov	qword ptr [rbx], r15
	mov	qword ptr [rbx + 16], r14
	mov	r14, qword ptr [rsp + 16]       # 8-byte Reload
	jmp	.LBB63_13
.LBB63_3:
	mov	r15, r13
.LBB63_13:
	mov	rax, qword ptr [r14]
	lea	rdi, [r15 + 1]
	lea	rsi, [r15 + r12]
	dec	rsi
	mov	rcx, qword ptr [rax]
	cmp	byte ptr [rcx], 0
	je	.LBB63_15
# %bb.14:
	mov	rcx, qword ptr [rax + 8]
	mov	rdx, qword ptr [rax + 16]
	fld	tbyte ptr [rcx]
	mov	edx, dword ptr [rdx]
	mov	rax, qword ptr [rax + 24]
	mov	ecx, dword ptr [rax]
	fstp	tbyte ptr [rsp]
	call	_ZSt8to_charsPcS_eSt12chars_formati@PLT
	jmp	.LBB63_18
.LBB63_15:
	mov	rcx, qword ptr [rax + 8]
	mov	rax, qword ptr [rax + 16]
	mov	edx, dword ptr [rax]
	fld	tbyte ptr [rcx]
	test	edx, edx
	je	.LBB63_17
# %bb.16:
	fstp	tbyte ptr [rsp]
	call	_ZSt8to_charsPcS_eSt12chars_format@PLT
	jmp	.LBB63_18
.LBB63_9:
	inc	rdx
	mov	rdi, r15
	mov	rsi, r13
	call	memcpy@PLT
	cmp	r13, rbp
	jne	.LBB63_11
	jmp	.LBB63_12
.LBB63_17:
	fstp	tbyte ptr [rsp]
	call	_ZSt8to_charsPcS_e@PLT
.LBB63_18:
	mov	rcx, qword ptr [r14 + 8]
	mov	qword ptr [rcx], rax
	mov	dword ptr [rcx + 8], edx
	mov	rax, qword ptr [r14 + 8]
	cmp	dword ptr [rax + 8], 0
	je	.LBB63_20
# %bb.19:
	xor	eax, eax
	jmp	.LBB63_21
.LBB63_20:
	mov	rax, qword ptr [rax]
	sub	rax, r15
.LBB63_21:
	mov	qword ptr [rbx + 8], rax
	mov	rcx, qword ptr [rbx]
	mov	byte ptr [rcx + rax], 0
	add	rsp, 24
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB63_23:
	.cfi_def_cfa_offset 80
	call	_ZSt17__throw_bad_allocv@PLT
.LBB63_22:
	lea	rdi, [rip + .L.str.3]
	call	_ZSt20__throw_length_errorPKc@PLT
.Lfunc_end63:
	.size	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_, .Lfunc_end63-_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE_EEvmSG_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE,"axG",@progbits,_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE,comdat
	.weak	_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE # -- Begin function _ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE
	.p2align	4, 0x90
	.type	_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE,@function
_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE: # @_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE
	.cfi_startproc
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	r12
	.cfi_def_cfa_offset 32
	push	rbx
	.cfi_def_cfa_offset 40
	sub	rsp, 24
	.cfi_def_cfa_offset 64
	.cfi_offset rbx, -40
	.cfi_offset r12, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	rbx, rdi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 16], rax
	mov	rax, qword ptr [rsi]
	mov	r14, qword ptr [rsi + 8]
	mov	qword ptr [rsp], 0
	mov	dword ptr [rsp + 8], 32
	cmp	rax, r14
	je	.LBB64_23
# %bb.1:
	cmp	byte ptr [rax], 125
	je	.LBB64_23
# %bb.2:
	mov	r15, rsi
	mov	rdi, rsp
	mov	rsi, rax
	mov	rdx, r14
	call	_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_
	cmp	rax, r14
	je	.LBB64_23
# %bb.3:
	movzx	ecx, byte ptr [rax]
	cmp	cl, 125
	je	.LBB64_23
# %bb.4:
	mov	byte ptr [rsp + 15], 0
	cmp	cl, 48
	je	.LBB64_5
# %bb.7:
	lea	rdx, [rsp + 4]
	lea	rcx, [rsp + 15]
	mov	rdi, rax
	mov	rsi, r14
	mov	r8, r15
	mov	r12, rax
	call	_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE
	cmp	rax, r12
	je	.LBB64_9
# %bb.8:
	movzx	ecx, byte ptr [rsp + 15]
	shl	ecx, 7
	mov	edx, -385
	and	edx, dword ptr [rsp]
	add	ecx, edx
	add	ecx, 128
	mov	dword ptr [rsp], ecx
.LBB64_9:
	cmp	rax, r14
	je	.LBB64_23
# %bb.10:
	movzx	ecx, byte ptr [rax]
	cmp	ecx, 125
	je	.LBB64_23
# %bb.11:
	cmp	ecx, 46
	jne	.LBB64_17
# %bb.12:
	inc	rax
	mov	byte ptr [rsp + 15], 0
	cmp	rax, r14
	je	.LBB64_14
# %bb.13:
	lea	rdx, [rsp + 6]
	lea	rcx, [rsp + 15]
	mov	rdi, rax
	mov	rsi, r14
	mov	r8, r15
	mov	r15, rax
	call	_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE
	cmp	rax, r15
	je	.LBB64_14
# %bb.16:
	movzx	ecx, byte ptr [rsp + 15]
	mov	edx, -1537
	and	edx, dword ptr [rsp]
	shl	ecx, 9
	add	ecx, edx
	add	ecx, 512
	mov	dword ptr [rsp], ecx
.LBB64_17:
	cmp	rax, r14
	je	.LBB64_23
# %bb.18:
	movzx	ecx, byte ptr [rax]
	cmp	cl, 125
	je	.LBB64_23
# %bb.19:
	xor	edx, edx
	cmp	cl, 115
	sete	dl
	add	rax, rdx
	cmp	rax, r14
	je	.LBB64_23
# %bb.20:
	cmp	byte ptr [rax], 125
	jne	.LBB64_21
.LBB64_23:
	mov	ecx, dword ptr [rsp + 8]
	mov	dword ptr [rbx + 8], ecx
	mov	rcx, qword ptr [rsp]
	mov	qword ptr [rbx], rcx
	mov	rcx, qword ptr fs:[40]
	cmp	rcx, qword ptr [rsp + 16]
	jne	.LBB64_25
# %bb.24:
	add	rsp, 24
	.cfi_def_cfa_offset 40
	pop	rbx
	.cfi_def_cfa_offset 32
	pop	r12
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.LBB64_5:
	.cfi_def_cfa_offset 64
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 16]
	jne	.LBB64_25
# %bb.6:
	lea	rdi, [rip + .L.str.15]
	call	_ZSt20__throw_format_errorPKc
.LBB64_14:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 16]
	jne	.LBB64_25
# %bb.15:
	lea	rdi, [rip + .L.str.31]
	call	_ZSt20__throw_format_errorPKc
.LBB64_21:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 16]
	jne	.LBB64_25
# %bb.22:
	call	_ZNSt8__format29__failed_to_parse_format_specEv
.LBB64_25:
	call	__stack_chk_fail@PLT
.Lfunc_end64:
	.size	_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE, .Lfunc_end64-_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE,"axG",@progbits,_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE,comdat
	.weak	_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE # -- Begin function _ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE
	.p2align	4, 0x90
	.type	_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE,@function
_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE: # @_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE
	.cfi_startproc
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	r12
	.cfi_def_cfa_offset 32
	push	rbx
	.cfi_def_cfa_offset 40
	sub	rsp, 88
	.cfi_def_cfa_offset 128
	.cfi_offset rbx, -40
	.cfi_offset r12, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	rbx, rcx
	mov	r12, rdx
	mov	r15, rsi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 80], rax
	mov	qword ptr [rsp], rsi
	mov	qword ptr [rsp + 8], rdx
	mov	eax, dword ptr [rdi]
	test	eax, 1920
	je	.LBB65_1
# %bb.8:
	mov	r14, rdi
	test	eax, 1536
	je	.LBB65_19
# %bb.9:
	shr	eax, 9
	and	eax, 3
	cmp	eax, 2
	je	.LBB65_12
# %bb.10:
	mov	rsi, -1
	cmp	eax, 1
	jne	.LBB65_18
# %bb.11:
	movzx	esi, word ptr [r14 + 6]
	jmp	.LBB65_18
.LBB65_1:
	mov	rbx, qword ptr [rbx + 16]
	test	r15, r15
	je	.LBB65_21
# %bb.2:
	mov	r14, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	sub	r14, rdi
	add	r14, qword ptr [rbx + 16]
	cmp	r14, r15
	jbe	.LBB65_3
	jmp	.LBB65_7
	.p2align	4, 0x90
.LBB65_5:                               #   in Loop: Header=BB65_3 Depth=1
	add	rdi, r14
	mov	qword ptr [rbx + 24], rdi
	add	r12, r14
	sub	r15, r14
	mov	rax, qword ptr [rbx]
	mov	rdi, rbx
	call	qword ptr [rax]
	mov	r14, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	sub	r14, rdi
	add	r14, qword ptr [rbx + 16]
	cmp	r14, r15
	ja	.LBB65_6
.LBB65_3:                               # =>This Inner Loop Header: Depth=1
	test	r14, r14
	je	.LBB65_5
# %bb.4:                                #   in Loop: Header=BB65_3 Depth=1
	mov	rsi, r12
	mov	rdx, r14
	call	memcpy@PLT
	mov	rdi, qword ptr [rbx + 24]
	jmp	.LBB65_5
.LBB65_19:
	mov	rdi, r15
	mov	rsi, r12
	call	_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE
	jmp	.LBB65_20
.LBB65_12:
	movzx	eax, word ptr [r14 + 6]
	mov	rdx, qword ptr [rbx]
	mov	esi, edx
	and	esi, 15
	cmp	rsi, rax
	jbe	.LBB65_14
# %bb.13:
	shr	rdx, 4
	lea	ecx, [rax + 4*rax]
                                        # kill: def $cl killed $cl killed $ecx
	shr	rdx, cl
	and	dl, 31
	mov	rcx, qword ptr [rbx + 8]
	shl	eax, 4
	movaps	xmm0, xmmword ptr [rcx + rax]
	movaps	xmmword ptr [rsp + 16], xmm0
	mov	ecx, edx
	jmp	.LBB65_17
.LBB65_6:
	test	r15, r15
	je	.LBB65_21
.LBB65_7:
	mov	rsi, r12
	mov	rdx, r15
	call	memcpy@PLT
	add	qword ptr [rbx + 24], r15
	jmp	.LBB65_21
.LBB65_14:
	xor	ecx, ecx
	test	rsi, rsi
	jne	.LBB65_17
# %bb.15:
	shr	rdx, 4
	cmp	rdx, rax
	jbe	.LBB65_17
# %bb.16:
	mov	rcx, qword ptr [rbx + 8]
	shl	eax, 5
	movaps	xmm0, xmmword ptr [rcx + rax]
	movaps	xmmword ptr [rsp + 16], xmm0
	movzx	ecx, byte ptr [rcx + rax + 16]
.LBB65_17:
	movaps	xmm0, xmmword ptr [rsp + 16]
	movaps	xmmword ptr [rsp + 48], xmm0
	mov	byte ptr [rsp + 64], cl
	movzx	edx, cl
	lea	rdi, [rsp + 48]
	lea	rsi, [rsp + 47]
	call	_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE
	mov	rsi, rax
.LBB65_18:
	mov	rdi, rsp
	call	_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm
	mov	r15, qword ptr [rsp]
	mov	r12, qword ptr [rsp + 8]
.LBB65_20:
	mov	rdi, r15
	mov	rsi, r12
	mov	rdx, rax
	mov	rcx, rbx
	mov	r8, r14
	mov	r9d, 1
	call	_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE
	mov	rbx, rax
.LBB65_21:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 80]
	jne	.LBB65_23
# %bb.22:
	mov	rax, rbx
	add	rsp, 88
	.cfi_def_cfa_offset 40
	pop	rbx
	.cfi_def_cfa_offset 32
	pop	r12
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.LBB65_23:
	.cfi_def_cfa_offset 128
	call	__stack_chk_fail@PLT
.Lfunc_end65:
	.size	_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE, .Lfunc_end65-_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm,"axG",@progbits,_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm,comdat
	.weak	_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm # -- Begin function _ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm
	.p2align	4, 0x90
	.type	_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm,@function
_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm: # @_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 152
	.cfi_def_cfa_offset 208
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 144], rax
	mov	rax, qword ptr [rdi]
	test	rax, rax
	je	.LBB66_9
# %bb.1:
	mov	r14, rsi
	mov	rbx, rdi
	mov	rcx, qword ptr [rdi + 8]
	add	rax, rcx
	mov	qword ptr [rsp + 72], rcx
	mov	qword ptr [rsp + 80], rcx
	mov	word ptr [rsp + 88], 0
	mov	byte ptr [rsp + 90], 0
	mov	qword ptr [rsp + 96], rax
	lea	rdi, [rsp + 64]
	call	_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev
	movups	xmm0, xmmword ptr [rsp + 64]
	movups	xmm1, xmmword ptr [rsp + 80]
	movaps	xmmword ptr [rsp + 16], xmm1
	mov	r13, qword ptr [rsp + 96]
	mov	qword ptr [rsp + 32], r13
	movaps	xmmword ptr [rsp], xmm0
	movups	xmmword ptr [rsp + 112], xmm0
	movups	xmmword ptr [rsp + 128], xmm1
	cmp	qword ptr [rsp + 16], r13
	je	.LBB66_5
# %bb.2:
	movzx	eax, byte ptr [rsp + 24]
	mov	eax, dword ptr [rsp + 4*rax]
	mov	ecx, eax
	shl	ecx, 4
	or	ecx, 15
	mov	esi, 1700
	lea	rdx, [rip + _ZNSt9__unicode9__v15_1_011__gcb_edgesE]
	.p2align	4, 0x90
.LBB66_3:                               # =>This Inner Loop Header: Depth=1
	mov	rdi, rdx
	mov	r8, rsi
	shr	r8
	mov	r9, r8
	not	r9
	add	r9, rsi
	cmp	dword ptr [rdx + 4*r8], ecx
	lea	rdx, [rdx + 4*r8 + 4]
	cmovae	r9, r8
	cmovae	rdx, rdi
	mov	rsi, r9
	test	r9, r9
	jg	.LBB66_3
# %bb.4:
	mov	ecx, dword ptr [rdx - 4]
	and	ecx, 15
	jmp	.LBB66_6
.LBB66_5:
                                        # implicit-def: $eax
                                        # implicit-def: $ecx
.LBB66_6:
	mov	dword ptr [rsp], eax
	mov	dword ptr [rsp + 4], ecx
	mov	word ptr [rsp + 8], 0
	mov	byte ptr [rsp + 10], 0
	movups	xmm0, xmmword ptr [rsp + 107]
	movups	xmm1, xmmword ptr [rsp + 123]
	movups	xmmword ptr [rsp + 11], xmm0
	movups	xmmword ptr [rsp + 27], xmm1
	mov	rcx, qword ptr [rsp + 136]
	mov	qword ptr [rsp + 40], rcx
	mov	qword ptr [rsp + 48], r13
	mov	ecx, 1
	cmp	eax, 4352
	jae	.LBB66_10
# %bb.7:
	cmp	rcx, r14
	jbe	.LBB66_13
.LBB66_8:
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbx], xmm0
.LBB66_9:
	xor	r15d, r15d
	jmp	.LBB66_21
.LBB66_10:
	mov	edx, 200
	lea	rcx, [rip + _ZNSt9__unicode9__v15_1_013__width_edgesE]
.LBB66_11:                              # =>This Inner Loop Header: Depth=1
	mov	rsi, rcx
	mov	rcx, rdx
	shr	rcx
	mov	rdi, rcx
	not	rdi
	add	rdi, rdx
	cmp	dword ptr [rsi + 4*rcx], eax
	cmova	rdi, rcx
	lea	rcx, [rsi + 4*rcx + 4]
	cmova	rcx, rsi
	mov	rdx, rdi
	test	rdi, rdi
	jg	.LBB66_11
# %bb.12:
	lea	rax, [rip + _ZNSt9__unicode9__v15_1_013__width_edgesE]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 2
	shr	rcx, 63
	add	rcx, rax
	and	rcx, -2
	neg	rcx
	add	rcx, rax
	inc	rcx
	cmp	rcx, r14
	ja	.LBB66_8
.LBB66_13:
	mov	r12, rsp
	lea	rbp, [rip + _ZNSt9__unicode9__v15_1_013__width_edgesE]
	.p2align	4, 0x90
.LBB66_14:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_18 Depth 2
	mov	r15, rcx
	mov	rdi, r12
	call	_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv
	cmp	qword ptr [rax + 32], r13
	je	.LBB66_21
# %bb.15:                               #   in Loop: Header=BB66_14 Depth=1
	mov	eax, dword ptr [rsp]
	mov	ecx, 1
	cmp	eax, 4352
	jae	.LBB66_17
# %bb.16:                               #   in Loop: Header=BB66_14 Depth=1
	add	rcx, r15
	cmp	rcx, r14
	jbe	.LBB66_14
	jmp	.LBB66_20
.LBB66_17:                              #   in Loop: Header=BB66_14 Depth=1
	mov	edx, 200
	mov	rcx, rbp
.LBB66_18:                              #   Parent Loop BB66_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rsi, rcx
	mov	rcx, rdx
	shr	rcx
	mov	rdi, rcx
	not	rdi
	add	rdi, rdx
	cmp	dword ptr [rsi + 4*rcx], eax
	cmova	rdi, rcx
	lea	rcx, [rsi + 4*rcx + 4]
	cmova	rcx, rsi
	mov	rdx, rdi
	test	rdi, rdi
	jg	.LBB66_18
# %bb.19:                               #   in Loop: Header=BB66_14 Depth=1
	sub	rcx, rbp
	mov	rax, rcx
	sar	rax, 2
	shr	rcx, 63
	add	rcx, rax
	and	rcx, -2
	neg	rcx
	add	rcx, rax
	inc	rcx
	add	rcx, r15
	cmp	rcx, r14
	jbe	.LBB66_14
.LBB66_20:
	mov	rax, qword ptr [rsp + 32]
	sub	rax, qword ptr [rbx + 8]
	mov	qword ptr [rbx], rax
.LBB66_21:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 144]
	jne	.LBB66_23
# %bb.22:
	mov	rax, r15
	add	rsp, 152
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB66_23:
	.cfi_def_cfa_offset 208
	call	__stack_chk_fail@PLT
.Lfunc_end66:
	.size	_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm, .Lfunc_end66-_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE,"axG",@progbits,_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE,comdat
	.weak	_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE # -- Begin function _ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE
	.p2align	4, 0x90
	.type	_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE,@function
_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE: # @_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE
	.cfi_startproc
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	r12
	.cfi_def_cfa_offset 32
	push	rbx
	.cfi_def_cfa_offset 40
	sub	rsp, 152
	.cfi_def_cfa_offset 192
	.cfi_offset rbx, -40
	.cfi_offset r12, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 144], rax
	test	rdi, rdi
	je	.LBB67_1
# %bb.2:
	add	rdi, rsi
	mov	qword ptr [rsp + 72], rsi
	mov	qword ptr [rsp + 80], rsi
	mov	word ptr [rsp + 88], 0
	mov	byte ptr [rsp + 90], 0
	mov	qword ptr [rsp + 96], rdi
	lea	rdi, [rsp + 64]
	call	_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev
	movups	xmm0, xmmword ptr [rsp + 64]
	movups	xmm1, xmmword ptr [rsp + 80]
	movaps	xmmword ptr [rsp + 16], xmm1
	mov	r15, qword ptr [rsp + 96]
	mov	qword ptr [rsp + 32], r15
	movaps	xmmword ptr [rsp], xmm0
	movups	xmmword ptr [rsp + 112], xmm0
	movups	xmmword ptr [rsp + 128], xmm1
	cmp	qword ptr [rsp + 16], r15
	je	.LBB67_3
# %bb.4:
	movzx	eax, byte ptr [rsp + 24]
	mov	eax, dword ptr [rsp + 4*rax]
	mov	ecx, eax
	shl	ecx, 4
	or	ecx, 15
	mov	esi, 1700
	lea	rdx, [rip + _ZNSt9__unicode9__v15_1_011__gcb_edgesE]
	.p2align	4, 0x90
.LBB67_5:                               # =>This Inner Loop Header: Depth=1
	mov	rdi, rdx
	mov	r8, rsi
	shr	r8
	mov	r9, r8
	not	r9
	add	r9, rsi
	cmp	dword ptr [rdx + 4*r8], ecx
	lea	rdx, [rdx + 4*r8 + 4]
	cmovae	r9, r8
	cmovae	rdx, rdi
	mov	rsi, r9
	test	r9, r9
	jg	.LBB67_5
# %bb.6:
	mov	ecx, dword ptr [rdx - 4]
	and	ecx, 15
	jmp	.LBB67_7
.LBB67_3:
                                        # implicit-def: $eax
                                        # implicit-def: $ecx
.LBB67_7:
	mov	dword ptr [rsp], eax
	mov	dword ptr [rsp + 4], ecx
	mov	word ptr [rsp + 8], 0
	mov	byte ptr [rsp + 10], 0
	movups	xmm0, xmmword ptr [rsp + 107]
	movups	xmm1, xmmword ptr [rsp + 123]
	movups	xmmword ptr [rsp + 11], xmm0
	movups	xmmword ptr [rsp + 27], xmm1
	mov	rcx, qword ptr [rsp + 136]
	mov	qword ptr [rsp + 40], rcx
	mov	qword ptr [rsp + 48], r15
	mov	ebx, 1
	cmp	eax, 4352
	jae	.LBB67_8
# %bb.11:
	mov	rdi, rsp
	call	_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv
	cmp	qword ptr [rax + 32], r15
	je	.LBB67_18
.LBB67_12:
	mov	r14, rsp
	lea	r12, [rip + _ZNSt9__unicode9__v15_1_013__width_edgesE]
	.p2align	4, 0x90
.LBB67_13:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_15 Depth 2
	mov	eax, dword ptr [rsp]
	mov	ecx, 1
	cmp	eax, 4352
	jae	.LBB67_14
.LBB67_17:                              #   in Loop: Header=BB67_13 Depth=1
	add	rbx, rcx
	mov	rdi, r14
	call	_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv
	cmp	qword ptr [rax + 32], r15
	jne	.LBB67_13
	jmp	.LBB67_18
.LBB67_14:                              #   in Loop: Header=BB67_13 Depth=1
	mov	edx, 200
	mov	rcx, r12
	.p2align	4, 0x90
.LBB67_15:                              #   Parent Loop BB67_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rsi, rcx
	mov	rcx, rdx
	shr	rcx
	mov	rdi, rcx
	not	rdi
	add	rdi, rdx
	cmp	dword ptr [rsi + 4*rcx], eax
	cmova	rdi, rcx
	lea	rcx, [rsi + 4*rcx + 4]
	cmova	rcx, rsi
	mov	rdx, rdi
	test	rdi, rdi
	jg	.LBB67_15
# %bb.16:                               #   in Loop: Header=BB67_13 Depth=1
	sub	rcx, r12
	mov	rax, rcx
	sar	rax, 2
	shr	rcx, 63
	add	rcx, rax
	and	rcx, -2
	neg	rcx
	add	rcx, rax
	inc	rcx
	jmp	.LBB67_17
.LBB67_1:
	xor	ebx, ebx
	jmp	.LBB67_18
.LBB67_8:
	mov	edx, 200
	lea	rcx, [rip + _ZNSt9__unicode9__v15_1_013__width_edgesE]
.LBB67_9:                               # =>This Inner Loop Header: Depth=1
	mov	rsi, rcx
	mov	rcx, rdx
	shr	rcx
	mov	rdi, rcx
	not	rdi
	add	rdi, rdx
	cmp	dword ptr [rsi + 4*rcx], eax
	cmova	rdi, rcx
	lea	rcx, [rsi + 4*rcx + 4]
	cmova	rcx, rsi
	mov	rdx, rdi
	test	rdi, rdi
	jg	.LBB67_9
# %bb.10:
	lea	rax, [rip + _ZNSt9__unicode9__v15_1_013__width_edgesE]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 2
	shr	rcx, 63
	add	rcx, rax
	and	rcx, -2
	neg	rcx
	lea	rbx, [rax + rcx]
	inc	rbx
	mov	rdi, rsp
	call	_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv
	cmp	qword ptr [rax + 32], r15
	jne	.LBB67_12
.LBB67_18:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 144]
	jne	.LBB67_20
# %bb.19:
	mov	rax, rbx
	add	rsp, 152
	.cfi_def_cfa_offset 40
	pop	rbx
	.cfi_def_cfa_offset 32
	pop	r12
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.LBB67_20:
	.cfi_def_cfa_offset 192
	call	__stack_chk_fail@PLT
.Lfunc_end67:
	.size	_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE, .Lfunc_end67-_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv,"axG",@progbits,_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv,comdat
	.weak	_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv # -- Begin function _ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv
	.p2align	4, 0x90
	.type	_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv,@function
_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv: # @_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 104
	.cfi_def_cfa_offset 160
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	rbx, rdi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 96], rax
	mov	r12, qword ptr [rdi + 48]
	cmp	qword ptr [rdi + 32], r12
	je	.LBB68_34
# %bb.1:
	lea	rcx, [rbx + 16]
	mov	ebp, dword ptr [rbx + 4]
	mov	rax, qword ptr [rcx + 32]
	mov	qword ptr [rsp + 80], rax
	movups	xmm0, xmmword ptr [rcx]
	mov	qword ptr [rsp + 40], rcx       # 8-byte Spill
	movups	xmm1, xmmword ptr [rcx + 16]
	movaps	xmmword ptr [rsp + 64], xmm1
	movaps	xmmword ptr [rsp + 48], xmm0
	lea	r13, [rip + _ZNSt9__unicode9__v15_1_011__gcb_edgesE]
	xor	r14d, r14d
	jmp	.LBB68_2
	.p2align	4, 0x90
.LBB68_31:                              #   in Loop: Header=BB68_2 Depth=1
	mov	rax, qword ptr [rsp + 80]
	mov	qword ptr [rsp + 32], rax
	movaps	xmm0, xmmword ptr [rsp + 48]
	movaps	xmm1, xmmword ptr [rsp + 64]
	movups	xmmword ptr [rsp + 16], xmm1
	movups	xmmword ptr [rsp], xmm0
	mov	rdi, rbx
	mov	edx, ebp
	call	_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE
	test	al, al
	jne	.LBB68_32
.LBB68_2:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_11 Depth 2
                                        #     Child Loop BB68_20 Depth 2
                                        #     Child Loop BB68_25 Depth 2
	mov	esi, ebp
	movzx	eax, byte ptr [rsp + 72]
	lea	ecx, [rax + 1]
	movzx	edx, byte ptr [rsp + 73]
	cmp	ecx, edx
	jne	.LBB68_7
# %bb.3:                                #   in Loop: Header=BB68_2 Depth=1
	mov	rdi, qword ptr [rsp + 64]
	mov	r8, qword ptr [rsp + 80]
	cmp	rdi, r8
	je	.LBB68_7
# %bb.4:                                #   in Loop: Header=BB68_2 Depth=1
	movzx	eax, byte ptr [rsp + 74]
	add	rdi, rax
	mov	qword ptr [rsp + 64], rdi
	cmp	rdi, r8
	je	.LBB68_5
# %bb.6:                                #   in Loop: Header=BB68_2 Depth=1
	lea	rdi, [rsp + 48]
	mov	ebp, esi
	call	_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev
	mov	esi, ebp
	cmp	qword ptr [rsp + 64], r12
	jne	.LBB68_10
	jmp	.LBB68_33
	.p2align	4, 0x90
.LBB68_7:                               #   in Loop: Header=BB68_2 Depth=1
	cmp	ecx, edx
	jae	.LBB68_9
# %bb.8:                                #   in Loop: Header=BB68_2 Depth=1
	inc	al
	mov	byte ptr [rsp + 72], al
.LBB68_9:                               #   in Loop: Header=BB68_2 Depth=1
	cmp	qword ptr [rsp + 64], r12
	je	.LBB68_33
.LBB68_10:                              #   in Loop: Header=BB68_2 Depth=1
	movzx	eax, byte ptr [rsp + 72]
	mov	r15d, dword ptr [rsp + 4*rax + 48]
	mov	eax, r15d
	shl	eax, 4
	or	eax, 15
	mov	edx, 1700
	mov	rcx, r13
	.p2align	4, 0x90
.LBB68_11:                              #   Parent Loop BB68_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rdi, rcx
	mov	r8, rdx
	shr	r8
	mov	r9, r8
	not	r9
	add	r9, rdx
	cmp	dword ptr [rcx + 4*r8], eax
	lea	rcx, [rcx + 4*r8 + 4]
	cmovae	r9, r8
	cmovae	rcx, rdi
	mov	rdx, r9
	test	r9, r9
	jg	.LBB68_11
# %bb.12:                               #   in Loop: Header=BB68_2 Depth=1
	mov	ebp, dword ptr [rcx - 4]
	and	ebp, 15
	movzx	ecx, byte ptr [rbx + 8]
	cmp	ecx, 1
	je	.LBB68_22
# %bb.13:                               #   in Loop: Header=BB68_2 Depth=1
	cmp	ecx, 3
	je	.LBB68_28
# %bb.14:                               #   in Loop: Header=BB68_2 Depth=1
	cmp	ebp, 4
	je	.LBB68_15
# %bb.16:                               #   in Loop: Header=BB68_2 Depth=1
	mov	al, 3
	cmp	ebp, 10
	jne	.LBB68_27
# %bb.17:                               #   in Loop: Header=BB68_2 Depth=1
	mov	al, 1
	cmp	cl, 2
	je	.LBB68_27
# %bb.18:                               #   in Loop: Header=BB68_2 Depth=1
	mov	ecx, dword ptr [rbx]
	mov	al, 3
	cmp	ecx, 169
	jb	.LBB68_27
# %bb.19:                               #   in Loop: Header=BB68_2 Depth=1
	mov	edx, 156
	lea	rax, [rip + _ZNSt9__unicode9__v15_1_014__xpicto_edgesE]
.LBB68_20:                              #   Parent Loop BB68_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rdi, rdx
	shr	rdi
	mov	r8, rdi
	not	r8
	add	r8, rdx
	cmp	dword ptr [rax + 4*rdi], ecx
	cmova	r8, rdi
	lea	rdx, [rax + 4*rdi + 4]
	cmovbe	rax, rdx
	mov	rdx, r8
	test	r8, r8
	jg	.LBB68_20
# %bb.21:                               #   in Loop: Header=BB68_2 Depth=1
	test	al, 4
	sete	al
	add	al, al
	or	al, 1
	jmp	.LBB68_27
	.p2align	4, 0x90
.LBB68_22:                              #   in Loop: Header=BB68_2 Depth=1
	mov	al, 3
	cmp	r15d, 169
	jb	.LBB68_27
# %bb.23:                               #   in Loop: Header=BB68_2 Depth=1
	test	ebp, ebp
	jne	.LBB68_27
# %bb.24:                               #   in Loop: Header=BB68_2 Depth=1
	mov	ecx, 156
	lea	rax, [rip + _ZNSt9__unicode9__v15_1_014__xpicto_edgesE]
.LBB68_25:                              #   Parent Loop BB68_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rdx, rcx
	shr	rdx
	mov	rdi, rdx
	not	rdi
	add	rdi, rcx
	cmp	dword ptr [rax + 4*rdx], r15d
	cmova	rdi, rdx
	lea	rcx, [rax + 4*rdx + 4]
	cmovbe	rax, rcx
	mov	rcx, rdi
	test	rdi, rdi
	jg	.LBB68_25
# %bb.26:                               #   in Loop: Header=BB68_2 Depth=1
	test	al, 4
	sete	al
	or	al, 2
	jmp	.LBB68_27
.LBB68_5:                               #   in Loop: Header=BB68_2 Depth=1
	mov	byte ptr [rsp + 72], 0
	cmp	qword ptr [rsp + 64], r12
	jne	.LBB68_10
	jmp	.LBB68_33
.LBB68_15:                              #   in Loop: Header=BB68_2 Depth=1
	mov	eax, ecx
	.p2align	4, 0x90
.LBB68_27:                              #   in Loop: Header=BB68_2 Depth=1
	mov	byte ptr [rbx + 8], al
.LBB68_28:                              #   in Loop: Header=BB68_2 Depth=1
	movzx	eax, byte ptr [rbx + 9]
	inc	al
	cmp	ebp, 13
	movzx	eax, al
	cmovne	eax, r14d
	mov	byte ptr [rbx + 9], al
	lea	eax, [r15 - 2381]
	rol	eax, 25
	cmp	eax, 8
	ja	.LBB68_31
# %bb.29:                               #   in Loop: Header=BB68_2 Depth=1
	mov	ecx, 347
	bt	ecx, eax
	jae	.LBB68_31
# %bb.30:                               #   in Loop: Header=BB68_2 Depth=1
	mov	byte ptr [rbx + 10], 1
	jmp	.LBB68_31
.LBB68_32:
	mov	dword ptr [rbx], r15d
	mov	dword ptr [rbx + 4], ebp
	mov	word ptr [rbx + 8], 0
	mov	byte ptr [rbx + 10], 0
.LBB68_33:
	mov	rax, qword ptr [rsp + 80]
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	mov	qword ptr [rcx + 32], rax
	movaps	xmm0, xmmword ptr [rsp + 48]
	movaps	xmm1, xmmword ptr [rsp + 64]
	movups	xmmword ptr [rcx + 16], xmm1
	movups	xmmword ptr [rcx], xmm0
.LBB68_34:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 96]
	jne	.LBB68_36
# %bb.35:
	mov	rax, rbx
	add	rsp, 104
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB68_36:
	.cfi_def_cfa_offset 160
	call	__stack_chk_fail@PLT
.Lfunc_end68:
	.size	_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv, .Lfunc_end68-_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE,"axG",@progbits,_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE,comdat
	.weak	_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE # -- Begin function _ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE
	.p2align	4, 0x90
	.type	_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE,@function
_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE: # @_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 72
	.cfi_def_cfa_offset 128
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	r15d, esi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 64], rax
	lea	eax, [r15 - 1]
	mov	bl, 1
	cmp	eax, 2
	jb	.LBB69_12
# %bb.1:
	mov	r14d, edx
	cmp	r15d, 3
	jne	.LBB69_3
# %bb.2:
	cmp	r14d, 2
	setne	bl
	jmp	.LBB69_12
.LBB69_3:
	lea	eax, [r14 - 1]
	cmp	eax, 3
	jb	.LBB69_12
# %bb.4:
	lea	eax, [r15 - 7]
	cmp	eax, 5
	ja	.LBB69_9
# %bb.5:
	lea	rcx, [rip + .LJTI69_0]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB69_6:
	and	r14d, -2
	cmp	r14d, 8
	setne	bl
	jmp	.LBB69_12
.LBB69_7:
	cmp	r14d, 9
	setne	bl
	jmp	.LBB69_12
.LBB69_8:
	add	r14d, -7
	test	r14d, -6
	setne	bl
	jmp	.LBB69_12
.LBB69_9:
	cmp	r14d, 10
	ja	.LBB69_14
# %bb.10:
	mov	eax, 1104
	bt	eax, r14d
	jae	.LBB69_14
.LBB69_11:
	xor	ebx, ebx
.LBB69_12:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 64]
	jne	.LBB69_24
# %bb.13:
	mov	eax, ebx
	add	rsp, 72
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB69_14:
	.cfi_def_cfa_offset 128
	cmp	r15d, 5
	je	.LBB69_11
# %bb.16:
	cmp	byte ptr [rdi + 10], 0
	je	.LBB69_18
# %bb.17:
	mov	eax, dword ptr [rdi]
	shl	eax, 2
	cmp	eax, 3074
	jae	.LBB69_25
.LBB69_18:
	cmp	r15d, 10
	jne	.LBB69_21
# %bb.19:
	cmp	byte ptr [rdi + 8], 2
	je	.LBB69_11
.LBB69_21:
	cmp	r15d, 13
	jne	.LBB69_12
# %bb.22:
	cmp	r14d, 13
	jne	.LBB69_12
# %bb.23:
	test	byte ptr [rdi + 9], 1
	sete	bl
	jmp	.LBB69_12
.LBB69_24:
	call	__stack_chk_fail@PLT
.LBB69_25:
	mov	r13, rdi
	lea	r12, [rsp + 128]
	or	eax, 3
	mov	edx, 389
	lea	rcx, [rip + _ZNSt9__unicode9__v15_1_012__incb_edgesE]
.LBB69_26:                              # =>This Inner Loop Header: Depth=1
	mov	rsi, rcx
	mov	rdi, rdx
	shr	rdi
	mov	r8, rdi
	not	r8
	add	r8, rdx
	cmp	dword ptr [rcx + 4*rdi], eax
	lea	rcx, [rcx + 4*rdi + 4]
	cmovae	r8, rdi
	cmovae	rcx, rsi
	mov	rdx, r8
	test	r8, r8
	jg	.LBB69_26
# %bb.27:
	mov	eax, dword ptr [rcx - 4]
	and	eax, 3
	cmp	eax, 1
	mov	rdi, r13
	jne	.LBB69_18
# %bb.28:
	movzx	ebp, byte ptr [r12 + 24]
	mov	eax, dword ptr [r12 + 4*rbp]
	shl	eax, 2
	cmp	eax, 3074
	jb	.LBB69_18
# %bb.29:
	or	eax, 3
	mov	edx, 389
	lea	rcx, [rip + _ZNSt9__unicode9__v15_1_012__incb_edgesE]
.LBB69_30:                              # =>This Inner Loop Header: Depth=1
	mov	rsi, rcx
	mov	rdi, rdx
	shr	rdi
	mov	r8, rdi
	not	r8
	add	r8, rdx
	cmp	dword ptr [rcx + 4*rdi], eax
	lea	rcx, [rcx + 4*rdi + 4]
	cmovae	r8, rdi
	cmovae	rcx, rsi
	mov	rdx, r8
	test	r8, r8
	jg	.LBB69_30
# %bb.31:
	mov	eax, dword ptr [rcx - 4]
	and	eax, 3
	cmp	eax, 1
	mov	rdi, r13
	jne	.LBB69_18
# %bb.32:
	mov	rax, qword ptr [rdi + 48]
	mov	qword ptr [rsp + 48], rax
	movups	xmm0, xmmword ptr [rdi + 16]
	movups	xmm1, xmmword ptr [rdi + 32]
	movaps	xmmword ptr [rsp + 32], xmm1
	movaps	xmmword ptr [rsp + 16], xmm0
	lea	rdi, [rsp + 16]
	call	_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv
	mov	r12, qword ptr [r12 + 16]
	cmp	qword ptr [rax + 16], r12
	jne	.LBB69_35
# %bb.33:
	cmp	byte ptr [rax + 24], bpl
	jne	.LBB69_35
# %bb.34:
	mov	rdi, r13
	jmp	.LBB69_18
.LBB69_35:
	xor	ecx, ecx
.LBB69_36:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_40 Depth 2
	movzx	eax, byte ptr [rsp + 40]
	mov	eax, dword ptr [rsp + 4*rax + 16]
	lea	edx, [rax - 2381]
	rol	edx, 25
	cmp	edx, 9
	jae	.LBB69_38
# %bb.37:                               #   in Loop: Header=BB69_36 Depth=1
	mov	sil, 1
	mov	dword ptr [rsp + 12], esi       # 4-byte Spill
	mov	esi, 347
	bt	esi, edx
	jb	.LBB69_45
.LBB69_38:                              #   in Loop: Header=BB69_36 Depth=1
	shl	eax, 2
	cmp	eax, 3074
	jb	.LBB69_47
# %bb.39:                               #   in Loop: Header=BB69_36 Depth=1
	or	eax, 3
	mov	esi, 389
	lea	rdx, [rip + _ZNSt9__unicode9__v15_1_012__incb_edgesE]
.LBB69_40:                              #   Parent Loop BB69_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rdi, rdx
	mov	r8, rsi
	shr	r8
	mov	r9, r8
	not	r9
	add	r9, rsi
	cmp	dword ptr [rdx + 4*r8], eax
	lea	rdx, [rdx + 4*r8 + 4]
	cmovae	r9, r8
	cmovae	rdx, rdi
	mov	rsi, r9
	test	r9, r9
	jg	.LBB69_40
# %bb.41:                               #   in Loop: Header=BB69_36 Depth=1
	mov	eax, dword ptr [rdx - 4]
	and	eax, 3
	cmp	eax, 2
	je	.LBB69_44
# %bb.42:                               #   in Loop: Header=BB69_36 Depth=1
	cmp	eax, 1
	jne	.LBB69_47
# %bb.43:                               #   in Loop: Header=BB69_36 Depth=1
	mov	dword ptr [rsp + 12], 0         # 4-byte Folded Spill
	jmp	.LBB69_45
.LBB69_44:                              #   in Loop: Header=BB69_36 Depth=1
                                        # kill: def $cl killed $cl killed $ecx def $ecx
	mov	dword ptr [rsp + 12], ecx       # 4-byte Spill
.LBB69_45:                              #   in Loop: Header=BB69_36 Depth=1
	lea	rdi, [rsp + 16]
	call	_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv
	mov	ecx, dword ptr [rsp + 12]       # 4-byte Reload
                                        # kill: def $cl killed $cl killed $ecx def $ecx
	cmp	qword ptr [rax + 16], r12
	jne	.LBB69_36
# %bb.46:                               #   in Loop: Header=BB69_36 Depth=1
	mov	ecx, dword ptr [rsp + 12]       # 4-byte Reload
                                        # kill: def $cl killed $cl killed $ecx def $ecx
	cmp	byte ptr [rax + 24], bpl
	jne	.LBB69_36
.LBB69_47:
	cmp	qword ptr [rsp + 32], r12
	mov	rdi, r13
	jne	.LBB69_18
# %bb.48:
	cmp	byte ptr [rsp + 40], bpl
	jne	.LBB69_18
# %bb.49:
	and	cl, 1
	jne	.LBB69_11
	jmp	.LBB69_18
.Lfunc_end69:
	.size	_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE, .Lfunc_end69-_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE
	.cfi_endproc
	.section	.rodata._ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE,"aG",@progbits,_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE,comdat
	.p2align	2, 0x0
.LJTI69_0:
	.long	.LBB69_8-.LJTI69_0
	.long	.LBB69_6-.LJTI69_0
	.long	.LBB69_7-.LJTI69_0
	.long	.LBB69_9-.LJTI69_0
	.long	.LBB69_6-.LJTI69_0
	.long	.LBB69_7-.LJTI69_0
                                        # -- End function
	.section	.text._ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE,"axG",@progbits,_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE,comdat
	.weak	_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE # -- Begin function _ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE
	.p2align	4, 0x90
	.type	_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE,@function
_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE: # @_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE
	.cfi_startproc
# %bb.0:
	push	r15
	.cfi_def_cfa_offset 16
	push	r14
	.cfi_def_cfa_offset 24
	push	rbx
	.cfi_def_cfa_offset 32
	sub	rsp, 32
	.cfi_def_cfa_offset 64
	.cfi_offset rbx, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov	rbx, rdi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 24], rax
	mov	qword ptr [rsp + 8], 0
	mov	dword ptr [rsp + 16], 32
	mov	rax, qword ptr [rsi]
	mov	r14, qword ptr [rsi + 8]
	cmp	rax, r14
	je	.LBB70_11
# %bb.1:
	cmp	byte ptr [rax], 125
	je	.LBB70_11
# %bb.2:
	mov	r15, rsi
	lea	rdi, [rsp + 8]
	mov	rsi, rax
	mov	rdx, r14
	call	_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_
	cmp	rax, r14
	je	.LBB70_11
# %bb.3:
	movzx	ecx, byte ptr [rax]
	cmp	cl, 125
	je	.LBB70_11
# %bb.4:
	mov	byte ptr [rsp + 23], 0
	cmp	cl, 48
	je	.LBB70_5
# %bb.7:
	lea	rdx, [rsp + 12]
	lea	rcx, [rsp + 23]
	mov	rdi, rax
	mov	rsi, r14
	mov	r8, r15
	mov	r15, rax
	call	_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE
	mov	rcx, rax
	cmp	rax, r15
	je	.LBB70_9
# %bb.8:
	movzx	eax, byte ptr [rsp + 23]
	shl	eax, 7
	mov	edx, -385
	and	edx, dword ptr [rsp + 8]
	add	eax, edx
	add	eax, 128
	mov	dword ptr [rsp + 8], eax
.LBB70_9:
	cmp	rcx, r14
	je	.LBB70_10
# %bb.13:
	xor	eax, eax
	cmp	byte ptr [rcx], 112
	sete	al
	add	rax, rcx
	cmp	rax, r14
	je	.LBB70_11
# %bb.14:
	cmp	byte ptr [rax], 125
	je	.LBB70_11
# %bb.15:
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 24]
	jne	.LBB70_17
# %bb.16:
	call	_ZNSt8__format29__failed_to_parse_format_specEv
.LBB70_10:
	mov	rax, r14
.LBB70_11:
	mov	ecx, dword ptr [rsp + 16]
	mov	dword ptr [rbx + 8], ecx
	mov	rcx, qword ptr [rsp + 8]
	mov	qword ptr [rbx], rcx
	mov	rcx, qword ptr fs:[40]
	cmp	rcx, qword ptr [rsp + 24]
	jne	.LBB70_17
# %bb.12:
	add	rsp, 32
	.cfi_def_cfa_offset 32
	pop	rbx
	.cfi_def_cfa_offset 24
	pop	r14
	.cfi_def_cfa_offset 16
	pop	r15
	.cfi_def_cfa_offset 8
	ret
.LBB70_5:
	.cfi_def_cfa_offset 64
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 24]
	jne	.LBB70_17
# %bb.6:
	lea	rdi, [rip + .L.str.15]
	call	_ZSt20__throw_format_errorPKc
.LBB70_17:
	call	__stack_chk_fail@PLT
.Lfunc_end70:
	.size	_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE, .Lfunc_end70-_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"axG",@progbits,_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.weak	_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ # -- Begin function _ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.p2align	4, 0x90
	.type	_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,@function
_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_: # @_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 200
	.cfi_def_cfa_offset 256
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	r11, rcx
	mov	r14, rdi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 192], rax
	mov	r12d, dword ptr [rdi]
	mov	eax, r12d
	and	eax, 30720
	cmp	eax, 14336
	jne	.LBB71_5
# %bb.1:
	cmp	rsi, 128
	sbb	rdx, 0
	jge	.LBB71_2
# %bb.4:
	mov	byte ptr [rsp + 48], sil
	lea	rsi, [rsp + 48]
	mov	edi, 1
	mov	edx, 1
	mov	rcx, r11
	mov	r8, r14
	mov	r9d, 1
	call	_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE
	jmp	.LBB71_72
.LBB71_5:
	xor	r13d, r13d
	mov	rbp, rsi
	neg	rbp
	sbb	r13, rdx
	test	rdx, rdx
	cmovns	rbp, rsi
	cmovns	r13, rdx
	lea	r9, [rsp + 51]
	mov	ecx, r12d
	shr	ecx, 11
	and	ecx, 15
	lea	rdi, [rip + .LJTI71_0]
	movsxd	rcx, dword ptr [rdi + 4*rcx]
	add	rcx, rdi
	mov	dword ptr [rsp + 28], r12d      # 4-byte Spill
	mov	qword ptr [rsp + 40], rdx       # 8-byte Spill
	jmp	rcx
.LBB71_15:
	mov	rax, rbp
	or	rax, r13
	je	.LBB71_16
# %bb.17:
	cmp	rbp, 10
	mov	rax, r13
	sbb	rax, 0
	jae	.LBB71_19
# %bb.18:
	mov	r12d, 1
	mov	eax, ebp
	jmp	.LBB71_34
.LBB71_46:
	cmp	eax, 10240
	lea	rcx, [rip + .L.str.23]
	lea	r10, [rip + .L.str.24]
	cmove	r10, rcx
	mov	rcx, rbp
	or	rcx, r13
	mov	qword ptr [rsp + 16], r11       # 8-byte Spill
	mov	qword ptr [rsp + 8], r14        # 8-byte Spill
	je	.LBB71_47
# %bb.48:
	mov	qword ptr [rsp + 32], r10       # 8-byte Spill
	bsr	rcx, r13
	xor	ecx, 63
	bsr	rsi, rbp
	xor	esi, 63
	or	esi, 64
	test	r13, r13
	cmovne	esi, ecx
	mov	r15d, 131
	sub	r15d, esi
	shr	r15d, 2
	cmp	rbp, 256
	mov	rcx, r13
	sbb	rcx, 0
	lea	rcx, [rip + .L__const._ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_.__digits]
	jb	.LBB71_49
# %bb.50:
	lea	edi, [r15 - 2]
	mov	r8d, 65535
	mov	rbx, r13
	.p2align	4, 0x90
.LBB71_51:                              # =>This Inner Loop Header: Depth=1
	lea	esi, [rdi + 1]
	mov	r9d, ebp
	and	r9d, 15
	movzx	r9d, byte ptr [r9 + rcx]
	mov	byte ptr [rsp + rsi + 51], r9b
	mov	rsi, r13
	shld	rsi, rbp, 56
	shr	rbx, 8
	mov	r9d, ebp
	shr	r9d, 4
	and	r9d, 15
	movzx	r9d, byte ptr [r9 + rcx]
	mov	r10d, edi
	mov	byte ptr [rsp + r10 + 51], r9b
	add	edi, -2
	cmp	r8, rbp
	mov	r9d, 0
	sbb	r9, r13
	mov	rbp, rsi
	mov	r13, rbx
	jb	.LBB71_51
# %bb.52:
	cmp	rsi, 16
	mov	rdi, rbx
	sbb	rdi, 0
	jb	.LBB71_54
.LBB71_53:
	shld	rbx, rsi, 60
	and	esi, 15
	movzx	esi, byte ptr [rsi + rcx]
	mov	byte ptr [rsp + 52], sil
	mov	rsi, rbx
.LBB71_54:
	lea	r9, [rsp + 51]
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	movzx	ecx, byte ptr [rsi + rcx]
	jmp	.LBB71_55
.LBB71_6:
	cmp	eax, 4096
	lea	rax, [rip + .L.str.20]
	lea	r10, [rip + .L.str.21]
	cmove	r10, rax
	mov	rax, rbp
	or	rax, r13
	mov	qword ptr [rsp + 16], r11       # 8-byte Spill
	mov	qword ptr [rsp + 8], r14        # 8-byte Spill
	je	.LBB71_7
# %bb.8:
	bsr	rax, r13
	xor	eax, 63
	bsr	rsi, rbp
	xor	esi, 63
	or	esi, 64
	test	r13, r13
	cmovne	esi, eax
	mov	ecx, 128
	sub	ecx, esi
	mov	r8, rsi
	xor	r8, 127
	mov	al, 49
	je	.LBB71_14
# %bb.9:
	test	r8b, 1
	je	.LBB71_11
# %bb.10:
	mov	edi, ebp
	and	dil, 1
	or	dil, 48
	mov	byte ptr [rsp + r8 + 51], dil
	shrd	rbp, r13, 1
	shr	r13
	dec	r8
.LBB71_11:
	cmp	esi, 126
	je	.LBB71_14
# %bb.12:
	add	r8, -2
	mov	rsi, r8
	.p2align	4, 0x90
.LBB71_13:                              # =>This Inner Loop Header: Depth=1
	mov	edi, ebp
	and	dil, 1
	or	dil, 48
	mov	byte ptr [rsp + r8 + 53], dil
	mov	edi, ebp
	shr	dil
	and	dil, 1
	or	dil, 48
	mov	byte ptr [rsp + r8 + 52], dil
	shrd	rbp, r13, 2
	shr	r13, 2
	add	rsi, -2
	test	r8d, r8d
	mov	r8, rsi
	jne	.LBB71_13
	jmp	.LBB71_14
.LBB71_36:
	mov	qword ptr [rsp + 8], r14        # 8-byte Spill
	mov	qword ptr [rsp + 16], r11       # 8-byte Spill
	xor	r10d, r10d
	xor	r14d, r14d
	or	rsi, rdx
	setne	r14b
	lea	rax, [rip + .L.str.22]
	cmovne	r10, rax
	mov	rax, rbp
	or	rax, r13
	je	.LBB71_37
# %bb.38:
	bsr	rax, r13
	xor	eax, 63
	bsr	rcx, rbp
	xor	ecx, 63
	or	cl, 64
	test	r13, r13
	movzx	ecx, cl
	cmovne	ecx, eax
	mov	al, -126
	sub	al, cl
	movzx	eax, al
	imul	ebx, eax, 171
	shr	ebx, 9
	cmp	rbp, 64
	mov	rax, r13
	sbb	rax, 0
	jb	.LBB71_39
# %bb.40:
	lea	edx, [rbx - 2]
	mov	esi, 4095
	mov	rcx, r13
	.p2align	4, 0x90
.LBB71_41:                              # =>This Inner Loop Header: Depth=1
	lea	eax, [rdx + 1]
	mov	edi, ebp
	and	dil, 7
	or	dil, 48
	mov	byte ptr [rsp + rax + 51], dil
	mov	rax, r13
	shld	rax, rbp, 58
	shr	rcx, 6
	mov	edi, ebp
	shr	dil, 3
	and	dil, 7
	or	dil, 48
	mov	r8d, edx
	mov	byte ptr [rsp + r8 + 51], dil
	add	edx, -2
	cmp	rsi, rbp
	mov	edi, 0
	sbb	rdi, r13
	mov	rbp, rax
	mov	r13, rcx
	jb	.LBB71_41
	jmp	.LBB71_42
.LBB71_47:
	mov	r15d, 1
	mov	cl, 48
.LBB71_55:
	mov	byte ptr [rsp + 51], cl
	lea	rbx, [rsp + r15]
	add	rbx, 51
	mov	r14d, 2
	cmp	eax, 12288
	jne	.LBB71_59
# %bb.56:
	mov	r13, r10
	mov	ebp, r12d
	xor	r12d, r12d
	.p2align	4, 0x90
.LBB71_57:                              # =>This Inner Loop Header: Depth=1
	movsx	edi, byte ptr [rsp + r12 + 51]
	call	toupper@PLT
	mov	byte ptr [rsp + r12 + 51], al
	inc	r12
	cmp	r15, r12
	jne	.LBB71_57
# %bb.58:
	lea	r9, [rsp + 51]
	mov	r12d, ebp
	mov	r10, r13
	jmp	.LBB71_59
.LBB71_16:
	mov	r12d, 1
	mov	al, 48
	jmp	.LBB71_35
.LBB71_7:
	mov	ecx, 1
	mov	al, 48
.LBB71_14:
	mov	ebx, ecx
	mov	r14d, 2
	jmp	.LBB71_45
.LBB71_49:
	mov	rsi, rbp
	mov	rbx, r13
	cmp	rsi, 16
	mov	rdi, rbx
	sbb	rdi, 0
	jae	.LBB71_53
	jmp	.LBB71_54
.LBB71_19:
	mov	qword ptr [rsp + 8], r14        # 8-byte Spill
	mov	qword ptr [rsp + 16], r11       # 8-byte Spill
	lea	rbx, [rsp + 179]
	mov	r12d, 4
	mov	r14, rbp
	mov	r15, r13
	.p2align	4, 0x90
.LBB71_20:                              # =>This Inner Loop Header: Depth=1
	mov	eax, 99
	cmp	rax, r14
	mov	eax, 0
	sbb	rax, r15
	jae	.LBB71_21
# %bb.22:                               #   in Loop: Header=BB71_20 Depth=1
	mov	eax, 999
	cmp	rax, r14
	mov	eax, 0
	sbb	rax, r15
	jae	.LBB71_23
# %bb.24:                               #   in Loop: Header=BB71_20 Depth=1
	cmp	r14, 10000
	mov	rax, r15
	sbb	rax, 0
	jb	.LBB71_27
# %bb.25:                               #   in Loop: Header=BB71_20 Depth=1
	mov	edx, 10000
	mov	rdi, r14
	mov	rsi, r15
	xor	ecx, ecx
	call	__udivti3@PLT
	lea	r9, [rsp + 51]
	add	r12d, 4
	mov	ecx, 99999
	cmp	rcx, r14
	mov	ecx, 0
	sbb	rcx, r15
	mov	r14, rax
	mov	r15, rdx
	jb	.LBB71_20
# %bb.26:
	add	r12d, -3
	jmp	.LBB71_27
.LBB71_37:
	mov	ebx, 1
	mov	al, 48
	jmp	.LBB71_45
.LBB71_39:
	mov	rax, rbp
	mov	rcx, r13
.LBB71_42:
	cmp	rax, 8
	sbb	rcx, 0
	jb	.LBB71_44
# %bb.43:
	mov	ecx, eax
	shr	ecx, 3
	and	al, 7
	or	al, 48
	mov	byte ptr [rsp + 52], al
	mov	eax, ecx
.LBB71_44:
	or	al, 48
.LBB71_45:
	mov	byte ptr [rsp + 51], al
	add	rbx, r9
.LBB71_59:
	test	r12b, 16
	je	.LBB71_60
# %bb.61:
	test	r14, r14
	je	.LBB71_60
# %bb.62:
	mov	r15, r9
	sub	r15, r14
	mov	rdi, r15
	mov	rsi, r10
	mov	rdx, r14
	call	memcpy@PLT
	lea	r9, [rsp + 51]
	jmp	.LBB71_63
.LBB71_60:
	mov	r15, r9
.LBB71_63:
	mov	r11, qword ptr [rsp + 16]       # 8-byte Reload
	mov	r14, qword ptr [rsp + 8]        # 8-byte Reload
	jmp	.LBB71_64
.LBB71_21:
	add	r12d, -2
	jmp	.LBB71_27
.LBB71_23:
	dec	r12d
.LBB71_27:
	mov	r15, r9
	cmp	r12d, 128
	mov	r11, qword ptr [rsp + 16]       # 8-byte Reload
	mov	r14, qword ptr [rsp + 8]        # 8-byte Reload
	ja	.LBB71_64
# %bb.28:
	cmp	rbp, 100
	mov	rax, r13
	sbb	rax, 0
	jb	.LBB71_29
# %bb.30:
	lea	ebx, [r12 - 2]
	lea	r14, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	.p2align	4, 0x90
.LBB71_31:                              # =>This Inner Loop Header: Depth=1
	lea	r15d, [rbx + 1]
	mov	edx, 100
	mov	rdi, rbp
	mov	rsi, r13
	xor	ecx, ecx
	call	__udivti3@PLT
	imul	rcx, rax, 100
	mov	rsi, rbp
	sub	rsi, rcx
	movzx	ecx, byte ptr [r14 + 2*rsi]
	movzx	esi, byte ptr [r14 + 2*rsi + 1]
	mov	byte ptr [rsp + r15 + 51], sil
	mov	esi, ebx
	mov	byte ptr [rsp + rsi + 51], cl
	add	ebx, -2
	mov	ecx, 9999
	cmp	rcx, rbp
	mov	ecx, 0
	sbb	rcx, r13
	mov	rbp, rax
	mov	r13, rdx
	jb	.LBB71_31
	jmp	.LBB71_32
.LBB71_29:
	mov	rax, rbp
	mov	rdx, r13
.LBB71_32:
	cmp	rax, 10
	sbb	rdx, 0
	mov	r11, qword ptr [rsp + 16]       # 8-byte Reload
	mov	r14, qword ptr [rsp + 8]        # 8-byte Reload
	jb	.LBB71_33
# %bb.74:
	lea	rcx, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	movzx	edx, byte ptr [rcx + 2*rax + 1]
	movzx	eax, byte ptr [rcx + 2*rax]
	mov	byte ptr [rsp + 52], dl
                                        # kill: def $al killed $al def $rax
	lea	r9, [rsp + 51]
	jmp	.LBB71_35
.LBB71_33:
	lea	r9, [rsp + 51]
.LBB71_34:
	or	al, 48
.LBB71_35:
	mov	ebx, r12d
	mov	byte ptr [rsp + 51], al
	add	rbx, r9
	mov	r15, r9
.LBB71_64:
	cmp	qword ptr [rsp + 40], 0         # 8-byte Folded Reload
	js	.LBB71_65
# %bb.66:
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	shr	eax, 2
	and	eax, 3
	cmp	eax, 1
	je	.LBB71_67
# %bb.68:
	cmp	eax, 3
	jne	.LBB71_71
# %bb.69:
	mov	al, 32
	jmp	.LBB71_70
.LBB71_65:
	mov	al, 45
	jmp	.LBB71_70
.LBB71_67:
	mov	al, 43
.LBB71_70:
	dec	r15
	mov	byte ptr [r15], al
.LBB71_71:
	sub	rbx, r15
	sub	r9, r15
	mov	rdi, r14
	mov	rsi, rbx
	mov	rdx, r15
	mov	rcx, r9
	mov	r8, r11
	call	_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_
.LBB71_72:
	mov	rcx, qword ptr fs:[40]
	cmp	rcx, qword ptr [rsp + 192]
	jne	.LBB71_73
# %bb.75:
	add	rsp, 200
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB71_2:
	.cfi_def_cfa_offset 256
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 192]
	jne	.LBB71_73
# %bb.3:
	lea	rdi, [rip + .L.str.25]
	call	_ZSt20__throw_format_errorPKc
.LBB71_73:
	call	__stack_chk_fail@PLT
.Lfunc_end71:
	.size	_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_, .Lfunc_end71-_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.cfi_endproc
	.section	.rodata._ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"aG",@progbits,_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.p2align	2, 0x0
.LJTI71_0:
	.long	.LBB71_15-.LJTI71_0
	.long	.LBB71_15-.LJTI71_0
	.long	.LBB71_6-.LJTI71_0
	.long	.LBB71_6-.LJTI71_0
	.long	.LBB71_36-.LJTI71_0
	.long	.LBB71_46-.LJTI71_0
	.long	.LBB71_46-.LJTI71_0
                                        # -- End function
	.section	.text._ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"axG",@progbits,_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.weak	_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ # -- Begin function _ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.p2align	4, 0x90
	.type	_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,@function
_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_: # @_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.cfi_startproc
# %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	push	r15
	.cfi_def_cfa_offset 24
	push	r14
	.cfi_def_cfa_offset 32
	push	r13
	.cfi_def_cfa_offset 40
	push	r12
	.cfi_def_cfa_offset 48
	push	rbx
	.cfi_def_cfa_offset 56
	sub	rsp, 184
	.cfi_def_cfa_offset 240
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov	r14, rcx
	mov	r13, rdx
	mov	r12, rsi
	mov	r11, rdi
	mov	rax, qword ptr fs:[40]
	mov	qword ptr [rsp + 176], rax
	mov	r9d, dword ptr [rdi]
	mov	eax, r9d
	and	eax, 30720
	cmp	eax, 14336
	jne	.LBB72_5
# %bb.1:
	cmp	r12, 128
	sbb	r13, 0
	jae	.LBB72_2
# %bb.4:
	mov	byte ptr [rsp + 32], r12b
	lea	rsi, [rsp + 32]
	mov	edi, 1
	mov	edx, 1
	mov	rcx, r14
	mov	r8, r11
	mov	r9d, 1
	call	_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE
	jmp	.LBB72_70
.LBB72_5:
	lea	r15, [rsp + 35]
	mov	ecx, r9d
	shr	ecx, 11
	and	ecx, 15
	lea	rdx, [rip + .LJTI72_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	dword ptr [rsp + 12], r9d       # 4-byte Spill
	jmp	rcx
.LBB72_15:
	mov	rax, r12
	or	rax, r13
	je	.LBB72_16
# %bb.17:
	cmp	r12, 10
	mov	rax, r13
	sbb	rax, 0
	jae	.LBB72_19
# %bb.18:
	mov	ebp, 1
	mov	eax, r12d
	jmp	.LBB72_34
.LBB72_51:
	mov	qword ptr [rsp + 16], r14       # 8-byte Spill
	cmp	eax, 10240
	lea	rcx, [rip + .L.str.23]
	lea	rbp, [rip + .L.str.24]
	cmove	rbp, rcx
	mov	rcx, r12
	or	rcx, r13
	je	.LBB72_52
# %bb.53:
	bsr	rcx, r13
	xor	ecx, 63
	bsr	rdx, r12
	xor	edx, 63
	or	edx, 64
	test	r13, r13
	cmovne	edx, ecx
	mov	r14d, 131
	sub	r14d, edx
	shr	r14d, 2
	cmp	r12, 256
	mov	rcx, r13
	sbb	rcx, 0
	lea	rcx, [rip + .L__const._ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_.__digits]
	jb	.LBB72_54
# %bb.55:
	lea	edi, [r14 - 2]
	mov	r8d, 65535
	mov	rdx, r13
	.p2align	4, 0x90
.LBB72_56:                              # =>This Inner Loop Header: Depth=1
	lea	esi, [rdi + 1]
	mov	r9d, r12d
	and	r9d, 15
	movzx	r9d, byte ptr [r9 + rcx]
	mov	byte ptr [rsp + rsi + 35], r9b
	mov	rsi, r13
	shld	rsi, r12, 56
	shr	rdx, 8
	mov	r9d, r12d
	shr	r9d, 4
	and	r9d, 15
	movzx	r9d, byte ptr [r9 + rcx]
	mov	r10d, edi
	mov	byte ptr [rsp + r10 + 35], r9b
	add	edi, -2
	cmp	r8, r12
	mov	r9d, 0
	sbb	r9, r13
	mov	r12, rsi
	mov	r13, rdx
	jb	.LBB72_56
# %bb.57:
	cmp	rsi, 16
	mov	rdi, rdx
	sbb	rdi, 0
	jb	.LBB72_59
.LBB72_58:
	shld	rdx, rsi, 60
	and	esi, 15
	movzx	esi, byte ptr [rsi + rcx]
	mov	byte ptr [rsp + 36], sil
	mov	rsi, rdx
.LBB72_59:
	movzx	ecx, byte ptr [rsi + rcx]
	jmp	.LBB72_60
.LBB72_6:
	cmp	eax, 4096
	lea	rax, [rip + .L.str.20]
	lea	rsi, [rip + .L.str.21]
	cmove	rsi, rax
	mov	rax, r12
	or	rax, r13
	je	.LBB72_7
# %bb.8:
	bsr	rax, r13
	xor	eax, 63
	bsr	r8, r12
	xor	r8d, 63
	or	r8d, 64
	test	r13, r13
	cmovne	r8d, eax
	mov	ecx, 128
	sub	ecx, r8d
	mov	rdx, r8
	xor	rdx, 127
	mov	al, 49
	je	.LBB72_14
# %bb.9:
	test	dl, 1
	je	.LBB72_11
# %bb.10:
	mov	edi, r12d
	and	dil, 1
	or	dil, 48
	mov	byte ptr [rsp + rdx + 35], dil
	shrd	r12, r13, 1
	shr	r13
	dec	rdx
.LBB72_11:
	cmp	r8d, 126
	je	.LBB72_14
# %bb.12:
	add	rdx, -2
	mov	r8, rdx
	.p2align	4, 0x90
.LBB72_13:                              # =>This Inner Loop Header: Depth=1
	mov	edi, r12d
	and	dil, 1
	or	dil, 48
	mov	byte ptr [rsp + rdx + 37], dil
	mov	edi, r12d
	shr	dil
	and	dil, 1
	or	dil, 48
	mov	byte ptr [rsp + rdx + 36], dil
	shrd	r12, r13, 2
	shr	r13, 2
	add	r8, -2
	test	edx, edx
	mov	rdx, r8
	jne	.LBB72_13
	jmp	.LBB72_14
.LBB72_38:
	mov	rax, r12
	or	rax, r13
	je	.LBB72_39
# %bb.40:
	bsr	rax, r13
	xor	eax, 63
	bsr	rcx, r12
	xor	ecx, 63
	or	cl, 64
	test	r13, r13
	movzx	ecx, cl
	cmovne	ecx, eax
	mov	al, -126
	sub	al, cl
	movzx	eax, al
	imul	ebx, eax, 171
	shr	ebx, 9
	cmp	r12, 64
	mov	rax, r13
	sbb	rax, 0
	jb	.LBB72_41
# %bb.42:
	lea	edx, [rbx - 2]
	mov	esi, 4095
	mov	rcx, r13
	.p2align	4, 0x90
.LBB72_43:                              # =>This Inner Loop Header: Depth=1
	lea	eax, [rdx + 1]
	mov	edi, r12d
	and	dil, 7
	or	dil, 48
	mov	byte ptr [rsp + rax + 35], dil
	mov	rax, r13
	shld	rax, r12, 58
	shr	rcx, 6
	mov	edi, r12d
	shr	dil, 3
	and	dil, 7
	or	dil, 48
	mov	r8d, edx
	mov	byte ptr [rsp + r8 + 35], dil
	add	edx, -2
	cmp	rsi, r12
	mov	edi, 0
	sbb	rdi, r13
	mov	r12, rax
	mov	r13, rcx
	jb	.LBB72_43
	jmp	.LBB72_44
.LBB72_52:
	mov	r14d, 1
	mov	cl, 48
.LBB72_60:
	mov	byte ptr [rsp + 35], cl
	lea	rbx, [rsp + r14]
	add	rbx, 35
	mov	r12d, 2
	cmp	eax, 12288
	jne	.LBB72_61
# %bb.63:
	mov	r13, r15
	xor	r15d, r15d
	.p2align	4, 0x90
.LBB72_64:                              # =>This Inner Loop Header: Depth=1
	movsx	edi, byte ptr [rsp + r15 + 35]
	call	toupper@PLT
	mov	byte ptr [rsp + r15 + 35], al
	inc	r15
	cmp	r14, r15
	jne	.LBB72_64
# %bb.65:
	mov	r14, qword ptr [rsp + 16]       # 8-byte Reload
	mov	r15, r13
	jmp	.LBB72_62
.LBB72_61:
	mov	r14, qword ptr [rsp + 16]       # 8-byte Reload
.LBB72_62:
	mov	r9d, dword ptr [rsp + 12]       # 4-byte Reload
	mov	rsi, rbp
	test	r9b, 16
	jne	.LBB72_49
	jmp	.LBB72_36
.LBB72_16:
	mov	ebp, 1
	mov	al, 48
	jmp	.LBB72_35
.LBB72_7:
	mov	ecx, 1
	mov	al, 48
.LBB72_14:
	mov	ebx, ecx
	mov	r12d, 2
	jmp	.LBB72_47
.LBB72_54:
	mov	rsi, r12
	mov	rdx, r13
	cmp	rsi, 16
	mov	rdi, rdx
	sbb	rdi, 0
	jae	.LBB72_58
	jmp	.LBB72_59
.LBB72_19:
	mov	qword ptr [rsp + 16], r14       # 8-byte Spill
	lea	rbx, [rsp + 163]
	mov	ebp, 4
	mov	r15, r12
	mov	r14, r13
	.p2align	4, 0x90
.LBB72_20:                              # =>This Inner Loop Header: Depth=1
	mov	eax, 99
	cmp	rax, r15
	mov	eax, 0
	sbb	rax, r14
	jae	.LBB72_21
# %bb.22:                               #   in Loop: Header=BB72_20 Depth=1
	mov	eax, 999
	cmp	rax, r15
	mov	eax, 0
	sbb	rax, r14
	jae	.LBB72_23
# %bb.24:                               #   in Loop: Header=BB72_20 Depth=1
	cmp	r15, 10000
	mov	rax, r14
	sbb	rax, 0
	jb	.LBB72_27
# %bb.25:                               #   in Loop: Header=BB72_20 Depth=1
	mov	edx, 10000
	mov	rdi, r15
	mov	rsi, r14
	xor	ecx, ecx
	call	__udivti3@PLT
	add	ebp, 4
	mov	ecx, 99999
	cmp	rcx, r15
	mov	ecx, 0
	sbb	rcx, r14
	mov	r15, rax
	mov	r14, rdx
	jb	.LBB72_20
# %bb.26:
	add	ebp, -3
	jmp	.LBB72_27
.LBB72_39:
	mov	ebx, 1
	mov	al, 48
	xor	esi, esi
	xor	r12d, r12d
	jmp	.LBB72_47
.LBB72_41:
	mov	rax, r12
	mov	rcx, r13
.LBB72_44:
	cmp	rax, 8
	sbb	rcx, 0
	jb	.LBB72_46
# %bb.45:
	mov	ecx, eax
	shr	ecx, 3
	and	al, 7
	or	al, 48
	mov	byte ptr [rsp + 36], al
	mov	eax, ecx
.LBB72_46:
	or	al, 48
	mov	r12d, 1
	lea	rsi, [rip + .L.str.22]
.LBB72_47:
	mov	byte ptr [rsp + 35], al
	add	rbx, r15
	test	r9b, 16
	je	.LBB72_36
.LBB72_49:
	test	r12, r12
	je	.LBB72_36
# %bb.50:
	sub	r15, r12
	mov	rdi, r15
	mov	rdx, r12
	call	memcpy@PLT
	jmp	.LBB72_36
.LBB72_21:
	add	ebp, -2
	jmp	.LBB72_27
.LBB72_23:
	dec	ebp
.LBB72_27:
	lea	r15, [rsp + 35]
	cmp	ebp, 128
	mov	r14, qword ptr [rsp + 16]       # 8-byte Reload
	ja	.LBB72_36
# %bb.28:
	cmp	r12, 100
	mov	rax, r13
	sbb	rax, 0
	jb	.LBB72_29
# %bb.30:
	lea	ebx, [rbp - 2]
	lea	r14, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	.p2align	4, 0x90
.LBB72_31:                              # =>This Inner Loop Header: Depth=1
	lea	r15d, [rbx + 1]
	mov	edx, 100
	mov	rdi, r12
	mov	rsi, r13
	xor	ecx, ecx
	call	__udivti3@PLT
	imul	rcx, rax, 100
	mov	rsi, r12
	sub	rsi, rcx
	movzx	ecx, byte ptr [r14 + 2*rsi]
	movzx	esi, byte ptr [r14 + 2*rsi + 1]
	mov	byte ptr [rsp + r15 + 35], sil
	mov	esi, ebx
	mov	byte ptr [rsp + rsi + 35], cl
	add	ebx, -2
	mov	ecx, 9999
	cmp	rcx, r12
	mov	ecx, 0
	sbb	rcx, r13
	mov	r12, rax
	mov	r13, rdx
	jb	.LBB72_31
# %bb.32:
	cmp	rax, 10
	sbb	rdx, 0
	mov	r14, qword ptr [rsp + 16]       # 8-byte Reload
	jb	.LBB72_33
.LBB72_72:
	lea	rcx, [rip + .L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits]
	movzx	edx, byte ptr [rcx + 2*rax + 1]
	movzx	eax, byte ptr [rcx + 2*rax]
	mov	byte ptr [rsp + 36], dl
                                        # kill: def $al killed $al def $rax
	lea	r15, [rsp + 35]
	jmp	.LBB72_35
.LBB72_29:
	mov	rax, r12
	mov	rdx, r13
	cmp	rax, 10
	sbb	rdx, 0
	mov	r14, qword ptr [rsp + 16]       # 8-byte Reload
	jae	.LBB72_72
.LBB72_33:
	lea	r15, [rsp + 35]
.LBB72_34:
	or	al, 48
.LBB72_35:
	mov	ebx, ebp
	mov	byte ptr [rsp + 35], al
	add	rbx, r15
.LBB72_36:
	mov	eax, dword ptr [rsp + 12]       # 4-byte Reload
	shr	eax, 2
	and	eax, 3
	cmp	eax, 1
	je	.LBB72_37
# %bb.66:
	cmp	eax, 3
	jne	.LBB72_69
# %bb.67:
	mov	al, 32
	jmp	.LBB72_68
.LBB72_37:
	mov	al, 43
.LBB72_68:
	dec	r15
	mov	byte ptr [r15], al
.LBB72_69:
	sub	rbx, r15
	lea	rcx, [rsp + 35]
	sub	rcx, r15
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	mov	rsi, rbx
	mov	rdx, r15
	mov	r8, r14
	call	_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_
.LBB72_70:
	mov	rcx, qword ptr fs:[40]
	cmp	rcx, qword ptr [rsp + 176]
	jne	.LBB72_71
# %bb.73:
	add	rsp, 184
	.cfi_def_cfa_offset 56
	pop	rbx
	.cfi_def_cfa_offset 48
	pop	r12
	.cfi_def_cfa_offset 40
	pop	r13
	.cfi_def_cfa_offset 32
	pop	r14
	.cfi_def_cfa_offset 24
	pop	r15
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
.LBB72_2:
	.cfi_def_cfa_offset 240
	mov	rax, qword ptr fs:[40]
	cmp	rax, qword ptr [rsp + 176]
	jne	.LBB72_71
# %bb.3:
	lea	rdi, [rip + .L.str.25]
	call	_ZSt20__throw_format_errorPKc
.LBB72_71:
	call	__stack_chk_fail@PLT
.Lfunc_end72:
	.size	_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_, .Lfunc_end72-_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_
	.cfi_endproc
	.section	.rodata._ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,"aG",@progbits,_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_,comdat
	.p2align	2, 0x0
.LJTI72_0:
	.long	.LBB72_15-.LJTI72_0
	.long	.LBB72_15-.LJTI72_0
	.long	.LBB72_6-.LJTI72_0
	.long	.LBB72_6-.LJTI72_0
	.long	.LBB72_38-.LJTI72_0
	.long	.LBB72_51-.LJTI72_0
	.long	.LBB72_51-.LJTI72_0
                                        # -- End function
	.section	.text._ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv,"axG",@progbits,_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv,comdat
	.weak	_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv # -- Begin function _ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv
	.p2align	4, 0x90
	.type	_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv,@function
_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv: # @_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv
	.cfi_startproc
# %bb.0:
	push	rbx
	.cfi_def_cfa_offset 16
	.cfi_offset rbx, -16
	mov	rbx, rdi
	mov	rax, qword ptr [rdi + 8]
	movzx	ecx, byte ptr [rax]
	cmp	ecx, 58
	je	.LBB73_4
# %bb.1:
	cmp	ecx, 125
	jne	.LBB73_6
# %bb.2:
	cmp	dword ptr [rbx + 24], 1
	je	.LBB73_31
# %bb.3:
	mov	dword ptr [rbx + 24], 2
	mov	rsi, qword ptr [rbx + 32]
	lea	rax, [rsi + 1]
	mov	qword ptr [rbx + 32], rax
	jmp	.LBB73_28
.LBB73_4:
	cmp	dword ptr [rbx + 24], 1
	je	.LBB73_31
# %bb.5:
	mov	dword ptr [rbx + 24], 2
	mov	rsi, qword ptr [rbx + 32]
	lea	rcx, [rsi + 1]
	mov	qword ptr [rbx + 32], rcx
	inc	rax
	mov	qword ptr [rbx + 8], rax
	jmp	.LBB73_28
.LBB73_6:
	cmp	cl, 48
	jne	.LBB73_8
# %bb.7:
	inc	rax
	xor	edx, edx
	mov	rcx, rax
	jmp	.LBB73_21
.LBB73_8:
	lea	edx, [rcx - 49]
	cmp	dl, 8
	ja	.LBB73_32
# %bb.9:
	mov	rsi, qword ptr [rbx + 16]
	movzx	edx, cx
	add	edx, -48
	lea	rcx, [rax + 1]
	cmp	rcx, rsi
	je	.LBB73_21
# %bb.10:
	movzx	edi, byte ptr [rcx]
	lea	r8d, [rdi - 48]
	cmp	r8b, 9
	ja	.LBB73_22
# %bb.11:
	mov	edi, 12
	xor	edx, edx
	mov	rcx, rax
	.p2align	4, 0x90
.LBB73_12:                              # =>This Inner Loop Header: Depth=1
	movzx	r8d, byte ptr [rcx]
	add	r8b, -48
	cmp	r8b, 9
	ja	.LBB73_19
# %bb.13:                               #   in Loop: Header=BB73_12 Depth=1
	movzx	r8d, r8b
	test	edi, edi
	js	.LBB73_15
# %bb.14:                               #   in Loop: Header=BB73_12 Depth=1
	add	edx, edx
	lea	r9d, [rdx + 4*rdx]
	movzx	edx, r8w
	add	edx, r9d
.LBB73_17:                              #   in Loop: Header=BB73_12 Depth=1
	inc	rcx
	add	edi, -4
	cmp	rcx, rsi
	jne	.LBB73_12
	jmp	.LBB73_18
.LBB73_15:                              #   in Loop: Header=BB73_12 Depth=1
	movzx	r9d, dx
	cmp	r9d, 6553
	ja	.LBB73_32
# %bb.16:                               #   in Loop: Header=BB73_12 Depth=1
	add	edx, edx
	lea	edx, [rdx + 4*rdx]
	add	dx, r8w
	jae	.LBB73_17
	jmp	.LBB73_32
.LBB73_18:
	mov	rcx, rsi
.LBB73_19:
	cmp	rcx, rax
	je	.LBB73_32
# %bb.20:
	test	rcx, rcx
	je	.LBB73_32
.LBB73_21:
	movzx	edi, byte ptr [rcx]
.LBB73_22:
	cmp	dil, 58
	je	.LBB73_24
# %bb.23:
	movzx	eax, dil
	cmp	eax, 125
	jne	.LBB73_32
.LBB73_24:
	cmp	dword ptr [rbx + 24], 2
	je	.LBB73_31
# %bb.25:
	movzx	esi, dx
	mov	dword ptr [rbx + 24], 1
	cmp	byte ptr [rcx], 58
	jne	.LBB73_27
# %bb.26:
	inc	rcx
.LBB73_27:
	mov	qword ptr [rbx + 8], rcx
.LBB73_28:
	mov	rax, qword ptr [rbx]
	mov	rdi, rbx
	call	qword ptr [rax + 8]
	mov	rax, qword ptr [rbx + 8]
	cmp	rax, qword ptr [rbx + 16]
	je	.LBB73_33
# %bb.29:
	cmp	byte ptr [rax], 125
	jne	.LBB73_33
# %bb.30:
	inc	rax
	mov	qword ptr [rbx + 8], rax
	pop	rbx
	.cfi_def_cfa_offset 8
	ret
.LBB73_32:
	.cfi_def_cfa_offset 16
	call	_ZNSt8__format33__invalid_arg_id_in_format_stringEv
.LBB73_33:
	call	_ZNSt8__format39__unmatched_left_brace_in_format_stringEv
.LBB73_31:
	call	_ZNSt8__format39__conflicting_indexing_in_format_stringEv
.Lfunc_end73:
	.size	_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv, .Lfunc_end73-_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8__format40__unmatched_right_brace_in_format_stringEv,"axG",@progbits,_ZNSt8__format40__unmatched_right_brace_in_format_stringEv,comdat
	.weak	_ZNSt8__format40__unmatched_right_brace_in_format_stringEv # -- Begin function _ZNSt8__format40__unmatched_right_brace_in_format_stringEv
	.p2align	4, 0x90
	.type	_ZNSt8__format40__unmatched_right_brace_in_format_stringEv,@function
_ZNSt8__format40__unmatched_right_brace_in_format_stringEv: # @_ZNSt8__format40__unmatched_right_brace_in_format_stringEv
	.cfi_startproc
# %bb.0:
	push	rax
	.cfi_def_cfa_offset 16
	lea	rdi, [rip + .L.str.34]
	call	_ZSt20__throw_format_errorPKc
.Lfunc_end74:
	.size	_ZNSt8__format40__unmatched_right_brace_in_format_stringEv, .Lfunc_end74-_ZNSt8__format40__unmatched_right_brace_in_format_stringEv
	.cfi_endproc
                                        # -- End function
	.type	_ZZ8generatemE4rdev,@object     # @_ZZ8generatemE4rdev
	.local	_ZZ8generatemE4rdev
	.comm	_ZZ8generatemE4rdev,5000,8
	.type	_ZGVZ8generatemE4rdev,@object   # @_ZGVZ8generatemE4rdev
	.local	_ZGVZ8generatemE4rdev
	.comm	_ZGVZ8generatemE4rdev,8,8
	.hidden	__dso_handle
	.type	.L.str,@object                  # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"%d"
	.size	.L.str, 3

	.type	.L.str.1,@object                # @.str.1
.L.str.1:
	.asciz	"default"
	.size	.L.str.1, 8

	.type	.L.str.3,@object                # @.str.3
.L.str.3:
	.asciz	"basic_string::_M_create"
	.size	.L.str.3, 24

	.type	.L.str.4,@object                # @.str.4
.L.str.4:
	.asciz	"cannot create std::vector larger than max_size()"
	.size	.L.str.4, 49

	.type	.L.str.5,@object                # @.str.5
.L.str.5:
	.asciz	"vector::_M_realloc_append"
	.size	.L.str.5, 26

	.type	.L.str.6,@object                # @.str.6
.L.str.6:
	.asciz	"{}\n"
	.size	.L.str.6, 4

	.type	_ZTVNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE,@object # @_ZTVNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
	.section	.data.rel.ro._ZTVNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE,"awG",@progbits,_ZTVNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE,comdat
	.weak	_ZTVNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
	.p2align	3, 0x0
_ZTVNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE:
	.quad	0
	.quad	_ZTINSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
	.quad	_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv
	.quad	_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEm
	.quad	_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_bumpEm
	.size	_ZTVNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE, 40

	.type	_ZTSNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE,@object # @_ZTSNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
	.section	.rodata._ZTSNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE,"aG",@progbits,_ZTSNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE,comdat
	.weak	_ZTSNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
_ZTSNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE:
	.asciz	"NSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE"
	.size	_ZTSNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE, 78

	.type	_ZTSNSt8__format9_Buf_sinkIcEE,@object # @_ZTSNSt8__format9_Buf_sinkIcEE
	.section	.rodata._ZTSNSt8__format9_Buf_sinkIcEE,"aG",@progbits,_ZTSNSt8__format9_Buf_sinkIcEE,comdat
	.weak	_ZTSNSt8__format9_Buf_sinkIcEE
_ZTSNSt8__format9_Buf_sinkIcEE:
	.asciz	"NSt8__format9_Buf_sinkIcEE"
	.size	_ZTSNSt8__format9_Buf_sinkIcEE, 27

	.type	_ZTSNSt8__format5_SinkIcEE,@object # @_ZTSNSt8__format5_SinkIcEE
	.section	.rodata._ZTSNSt8__format5_SinkIcEE,"aG",@progbits,_ZTSNSt8__format5_SinkIcEE,comdat
	.weak	_ZTSNSt8__format5_SinkIcEE
_ZTSNSt8__format5_SinkIcEE:
	.asciz	"NSt8__format5_SinkIcEE"
	.size	_ZTSNSt8__format5_SinkIcEE, 23

	.type	_ZTINSt8__format5_SinkIcEE,@object # @_ZTINSt8__format5_SinkIcEE
	.section	.data.rel.ro._ZTINSt8__format5_SinkIcEE,"awG",@progbits,_ZTINSt8__format5_SinkIcEE,comdat
	.weak	_ZTINSt8__format5_SinkIcEE
	.p2align	3, 0x0
_ZTINSt8__format5_SinkIcEE:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
	.quad	_ZTSNSt8__format5_SinkIcEE
	.size	_ZTINSt8__format5_SinkIcEE, 16

	.type	_ZTINSt8__format9_Buf_sinkIcEE,@object # @_ZTINSt8__format9_Buf_sinkIcEE
	.section	.data.rel.ro._ZTINSt8__format9_Buf_sinkIcEE,"awG",@progbits,_ZTINSt8__format9_Buf_sinkIcEE,comdat
	.weak	_ZTINSt8__format9_Buf_sinkIcEE
	.p2align	3, 0x0
_ZTINSt8__format9_Buf_sinkIcEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSNSt8__format9_Buf_sinkIcEE
	.quad	_ZTINSt8__format5_SinkIcEE
	.size	_ZTINSt8__format9_Buf_sinkIcEE, 24

	.type	_ZTINSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE,@object # @_ZTINSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
	.section	.data.rel.ro._ZTINSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE,"awG",@progbits,_ZTINSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE,comdat
	.weak	_ZTINSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
	.p2align	3, 0x0
_ZTINSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
	.quad	_ZTINSt8__format9_Buf_sinkIcEE
	.size	_ZTINSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE, 24

	.type	.L.str.7,@object                # @.str.7
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.7:
	.asciz	"basic_string::append"
	.size	.L.str.7, 21

	.type	.L.str.8,@object                # @.str.8
.L.str.8:
	.asciz	"basic_string::_M_replace_aux"
	.size	.L.str.8, 29

	.type	_ZTVNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE,@object # @_ZTVNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE
	.section	.data.rel.ro._ZTVNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE,"awG",@progbits,_ZTVNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE,comdat
	.weak	_ZTVNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE
	.p2align	3, 0x0
_ZTVNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE:
	.quad	0
	.quad	_ZTINSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE
	.quad	_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv
	.quad	_ZNSt8__format5_SinkIcE10_M_reserveEm
	.quad	_ZNSt8__format5_SinkIcE7_M_bumpEm
	.size	_ZTVNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE, 40

	.type	_ZTSNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE,@object # @_ZTSNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE
	.section	.rodata._ZTSNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE,"aG",@progbits,_ZTSNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE,comdat
	.weak	_ZTSNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE
_ZTSNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE:
	.asciz	"NSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE"
	.size	_ZTSNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE, 48

	.type	_ZTINSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE,@object # @_ZTINSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE
	.section	.data.rel.ro._ZTINSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE,"awG",@progbits,_ZTINSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE,comdat
	.weak	_ZTINSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE
	.p2align	3, 0x0
_ZTINSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE
	.quad	_ZTINSt8__format9_Buf_sinkIcEE
	.size	_ZTINSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE, 24

	.type	.L.str.9,@object                # @.str.9
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.9:
	.asciz	"false"
	.size	.L.str.9, 6

	.type	.L.str.10,@object               # @.str.10
.L.str.10:
	.asciz	"true"
	.size	.L.str.10, 5

	.type	.Lreltable._ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE,@object # @reltable._ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE
	.section	.rodata,"a",@progbits
	.p2align	2, 0x0
.Lreltable._ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE:
	.long	.L.str.9-.Lreltable._ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE
	.long	.L.str.10-.Lreltable._ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE
	.size	.Lreltable._ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE, 8

	.type	_ZTVNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE,@object # @_ZTVNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE
	.section	.data.rel.ro._ZTVNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE,"awG",@progbits,_ZTVNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE,comdat
	.weak	_ZTVNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE
	.p2align	3, 0x0
_ZTVNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE:
	.quad	0
	.quad	_ZTINSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE
	.quad	_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE11_M_on_charsEPKc
	.quad	_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEm
	.size	_ZTVNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE, 32

	.type	_ZTSNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE,@object # @_ZTSNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE
	.section	.rodata._ZTSNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE,"aG",@progbits,_ZTSNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE,comdat
	.weak	_ZTSNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE
_ZTSNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE:
	.asciz	"NSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE"
	.size	_ZTSNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE, 57

	.type	_ZTSNSt8__format8_ScannerIcEE,@object # @_ZTSNSt8__format8_ScannerIcEE
	.section	.rodata._ZTSNSt8__format8_ScannerIcEE,"aG",@progbits,_ZTSNSt8__format8_ScannerIcEE,comdat
	.weak	_ZTSNSt8__format8_ScannerIcEE
_ZTSNSt8__format8_ScannerIcEE:
	.asciz	"NSt8__format8_ScannerIcEE"
	.size	_ZTSNSt8__format8_ScannerIcEE, 26

	.type	_ZTINSt8__format8_ScannerIcEE,@object # @_ZTINSt8__format8_ScannerIcEE
	.section	.data.rel.ro._ZTINSt8__format8_ScannerIcEE,"awG",@progbits,_ZTINSt8__format8_ScannerIcEE,comdat
	.weak	_ZTINSt8__format8_ScannerIcEE
	.p2align	3, 0x0
_ZTINSt8__format8_ScannerIcEE:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
	.quad	_ZTSNSt8__format8_ScannerIcEE
	.size	_ZTINSt8__format8_ScannerIcEE, 16

	.type	_ZTINSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE,@object # @_ZTINSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE
	.section	.data.rel.ro._ZTINSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE,"awG",@progbits,_ZTINSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE,comdat
	.weak	_ZTINSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE
	.p2align	3, 0x0
_ZTINSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE
	.quad	_ZTINSt8__format8_ScannerIcEE
	.size	_ZTINSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE, 24

	.type	.L.str.11,@object               # @.str.11
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.11:
	.asciz	"basic_string_view::copy"
	.size	.L.str.11, 24

	.type	.L.str.12,@object               # @.str.12
.L.str.12:
	.asciz	"%s: __pos (which is %zu) > __size (which is %zu)"
	.size	.L.str.12, 49

	.type	.L.str.13,@object               # @.str.13
.L.str.13:
	.asciz	"format error: invalid arg-id in format string"
	.size	.L.str.13, 46

	.type	_ZTSSt12format_error,@object    # @_ZTSSt12format_error
	.section	.rodata._ZTSSt12format_error,"aG",@progbits,_ZTSSt12format_error,comdat
	.weak	_ZTSSt12format_error
_ZTSSt12format_error:
	.asciz	"St12format_error"
	.size	_ZTSSt12format_error, 17

	.type	_ZTISt12format_error,@object    # @_ZTISt12format_error
	.section	.data.rel.ro._ZTISt12format_error,"awG",@progbits,_ZTISt12format_error,comdat
	.weak	_ZTISt12format_error
	.p2align	3, 0x0
_ZTISt12format_error:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSSt12format_error
	.quad	_ZTISt13runtime_error
	.size	_ZTISt12format_error, 24

	.type	_ZTVSt12format_error,@object    # @_ZTVSt12format_error
	.section	.data.rel.ro._ZTVSt12format_error,"awG",@progbits,_ZTVSt12format_error,comdat
	.weak	_ZTVSt12format_error
	.p2align	3, 0x0
_ZTVSt12format_error:
	.quad	0
	.quad	_ZTISt12format_error
	.quad	_ZNSt13runtime_errorD2Ev
	.quad	_ZNSt12format_errorD0Ev
	.quad	_ZNKSt13runtime_error4whatEv
	.size	_ZTVSt12format_error, 40

	.type	.L.str.14,@object               # @.str.14
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.14:
	.asciz	"format error: format-spec contains invalid formatting options for 'bool'"
	.size	.L.str.14, 73

	.type	.L.str.15,@object               # @.str.15
.L.str.15:
	.asciz	"format error: width must be non-zero in format string"
	.size	.L.str.15, 54

	.type	.L.str.16,@object               # @.str.16
.L.str.16:
	.asciz	"format error: invalid width or precision in format-spec"
	.size	.L.str.16, 56

	.type	_ZNSt8__detail31__from_chars_alnum_to_val_tableILb0EE5valueE,@object # @_ZNSt8__detail31__from_chars_alnum_to_val_tableILb0EE5valueE
	.section	.rodata._ZNSt8__detail31__from_chars_alnum_to_val_tableILb0EE5valueE,"aG",@progbits,_ZNSt8__detail31__from_chars_alnum_to_val_tableILb0EE5valueE,comdat
	.weak	_ZNSt8__detail31__from_chars_alnum_to_val_tableILb0EE5valueE
_ZNSt8__detail31__from_chars_alnum_to_val_tableILb0EE5valueE:
	.ascii	"\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\000\001\002\003\004\005\006\007\b\t\177\177\177\177\177\177\177\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037 !\"#\177\177\177\177\177\177\n\013\f\r
	.size	_ZNSt8__detail31__from_chars_alnum_to_val_tableILb0EE5valueE, 256

	.type	.L.str.17,@object               # @.str.17
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.17:
	.asciz	"format error: unmatched '{' in format string"
	.size	.L.str.17, 45

	.type	.L.str.18,@object               # @.str.18
.L.str.18:
	.asciz	"format error: conflicting indexing style in format string"
	.size	.L.str.18, 58

	.type	.L.str.19,@object               # @.str.19
.L.str.19:
	.asciz	"format error: failed to parse format-spec"
	.size	.L.str.19, 42

	.type	.L.str.20,@object               # @.str.20
.L.str.20:
	.asciz	"0b"
	.size	.L.str.20, 3

	.type	.L.str.21,@object               # @.str.21
.L.str.21:
	.asciz	"0B"
	.size	.L.str.21, 3

	.type	.L.str.22,@object               # @.str.22
.L.str.22:
	.asciz	"0"
	.size	.L.str.22, 2

	.type	.L.str.23,@object               # @.str.23
.L.str.23:
	.asciz	"0x"
	.size	.L.str.23, 3

	.type	.L.str.24,@object               # @.str.24
.L.str.24:
	.asciz	"0X"
	.size	.L.str.24, 3

	.type	.L.str.25,@object               # @.str.25
.L.str.25:
	.asciz	"format error: integer not representable as character"
	.size	.L.str.25, 53

	.type	.L.str.27,@object               # @.str.27
.L.str.27:
	.asciz	"format error: argument used for width or precision must be a non-negative integer"
	.size	.L.str.27, 82

	.type	.L.str.28,@object               # @.str.28
.L.str.28:
	.asciz	"basic_string_view::substr"
	.size	.L.str.28, 26

	.type	.L.str.29,@object               # @.str.29
.L.str.29:
	.asciz	"basic_string::_M_replace"
	.size	.L.str.29, 25

	.type	.L.str.30,@object               # @.str.30
.L.str.30:
	.asciz	"format error: format-spec contains invalid formatting options for 'charT'"
	.size	.L.str.30, 74

	.type	.L.str.31,@object               # @.str.31
.L.str.31:
	.asciz	"format error: missing precision after '.' in format string"
	.size	.L.str.31, 59

	.type	.L.str.32,@object               # @.str.32
.L.str.32:
	.asciz	"basic_string::insert"
	.size	.L.str.32, 21

	.type	.L.str.33,@object               # @.str.33
.L.str.33:
	.asciz	"%s: __pos (which is %zu) > this->size() (which is %zu)"
	.size	.L.str.33, 55

	.type	_ZNSt9__unicode9__v15_1_011__gcb_edgesE,@object # @_ZNSt9__unicode9__v15_1_011__gcb_edgesE
	.section	.rodata._ZNSt9__unicode9__v15_1_011__gcb_edgesE,"aG",@progbits,_ZNSt9__unicode9__v15_1_011__gcb_edgesE,comdat
	.weak	_ZNSt9__unicode9__v15_1_011__gcb_edgesE
	.p2align	4, 0x0
_ZNSt9__unicode9__v15_1_011__gcb_edgesE:
	.long	1                               # 0x1
	.long	162                             # 0xa2
	.long	177                             # 0xb1
	.long	211                             # 0xd3
	.long	225                             # 0xe1
	.long	512                             # 0x200
	.long	2033                            # 0x7f1
	.long	2560                            # 0xa00
	.long	2769                            # 0xad1
	.long	2784                            # 0xae0
	.long	12292                           # 0x3004
	.long	14080                           # 0x3700
	.long	18484                           # 0x4834
	.long	18592                           # 0x48a0
	.long	22804                           # 0x5914
	.long	23520                           # 0x5be0
	.long	23540                           # 0x5bf4
	.long	23552                           # 0x5c00
	.long	23572                           # 0x5c14
	.long	23600                           # 0x5c30
	.long	23620                           # 0x5c44
	.long	23648                           # 0x5c60
	.long	23668                           # 0x5c74
	.long	23680                           # 0x5c80
	.long	24581                           # 0x6005
	.long	24672                           # 0x6060
	.long	24836                           # 0x6104
	.long	25008                           # 0x61b0
	.long	25025                           # 0x61c1
	.long	25040                           # 0x61d0
	.long	25780                           # 0x64b4
	.long	26112                           # 0x6600
	.long	26372                           # 0x6704
	.long	26384                           # 0x6710
	.long	28004                           # 0x6d64
	.long	28117                           # 0x6dd5
	.long	28128                           # 0x6de0
	.long	28148                           # 0x6df4
	.long	28240                           # 0x6e50
	.long	28276                           # 0x6e74
	.long	28304                           # 0x6e90
	.long	28324                           # 0x6ea4
	.long	28384                           # 0x6ee0
	.long	28917                           # 0x70f5
	.long	28928                           # 0x7100
	.long	28948                           # 0x7114
	.long	28960                           # 0x7120
	.long	29444                           # 0x7304
	.long	29872                           # 0x74b0
	.long	31332                           # 0x7a64
	.long	31504                           # 0x7b10
	.long	32436                           # 0x7eb4
	.long	32576                           # 0x7f40
	.long	32724                           # 0x7fd4
	.long	32736                           # 0x7fe0
	.long	33124                           # 0x8164
	.long	33184                           # 0x81a0
	.long	33204                           # 0x81b4
	.long	33344                           # 0x8240
	.long	33364                           # 0x8254
	.long	33408                           # 0x8280
	.long	33428                           # 0x8294
	.long	33504                           # 0x82e0
	.long	34196                           # 0x8594
	.long	34240                           # 0x85c0
	.long	35077                           # 0x8905
	.long	35104                           # 0x8920
	.long	35204                           # 0x8984
	.long	35328                           # 0x8a00
	.long	36004                           # 0x8ca4
	.long	36389                           # 0x8e25
	.long	36404                           # 0x8e34
	.long	36918                           # 0x9036
	.long	36928                           # 0x9040
	.long	37796                           # 0x93a4
	.long	37814                           # 0x93b6
	.long	37828                           # 0x93c4
	.long	37840                           # 0x93d0
	.long	37862                           # 0x93e6
	.long	37908                           # 0x9414
	.long	38038                           # 0x9496
	.long	38100                           # 0x94d4
	.long	38118                           # 0x94e6
	.long	38144                           # 0x9500
	.long	38164                           # 0x9514
	.long	38272                           # 0x9580
	.long	38436                           # 0x9624
	.long	38464                           # 0x9640
	.long	38932                           # 0x9814
	.long	38950                           # 0x9826
	.long	38976                           # 0x9840
	.long	39876                           # 0x9bc4
	.long	39888                           # 0x9bd0
	.long	39908                           # 0x9be4
	.long	39926                           # 0x9bf6
	.long	39956                           # 0x9c14
	.long	40016                           # 0x9c50
	.long	40054                           # 0x9c76
	.long	40080                           # 0x9c90
	.long	40118                           # 0x9cb6
	.long	40148                           # 0x9cd4
	.long	40160                           # 0x9ce0
	.long	40308                           # 0x9d74
	.long	40320                           # 0x9d80
	.long	40484                           # 0x9e24
	.long	40512                           # 0x9e40
	.long	40932                           # 0x9fe4
	.long	40944                           # 0x9ff0
	.long	40980                           # 0xa014
	.long	41014                           # 0xa036
	.long	41024                           # 0xa040
	.long	41924                           # 0xa3c4
	.long	41936                           # 0xa3d0
	.long	41958                           # 0xa3e6
	.long	42004                           # 0xa414
	.long	42032                           # 0xa430
	.long	42100                           # 0xa474
	.long	42128                           # 0xa490
	.long	42164                           # 0xa4b4
	.long	42208                           # 0xa4e0
	.long	42260                           # 0xa514
	.long	42272                           # 0xa520
	.long	42756                           # 0xa704
	.long	42784                           # 0xa720
	.long	42836                           # 0xa754
	.long	42848                           # 0xa760
	.long	43028                           # 0xa814
	.long	43062                           # 0xa836
	.long	43072                           # 0xa840
	.long	43972                           # 0xabc4
	.long	43984                           # 0xabd0
	.long	44006                           # 0xabe6
	.long	44052                           # 0xac14
	.long	44128                           # 0xac60
	.long	44148                           # 0xac74
	.long	44182                           # 0xac96
	.long	44192                           # 0xaca0
	.long	44214                           # 0xacb6
	.long	44244                           # 0xacd4
	.long	44256                           # 0xace0
	.long	44580                           # 0xae24
	.long	44608                           # 0xae40
	.long	44964                           # 0xafa4
	.long	45056                           # 0xb000
	.long	45076                           # 0xb014
	.long	45094                           # 0xb026
	.long	45120                           # 0xb040
	.long	46020                           # 0xb3c4
	.long	46032                           # 0xb3d0
	.long	46052                           # 0xb3e4
	.long	46086                           # 0xb406
	.long	46100                           # 0xb414
	.long	46160                           # 0xb450
	.long	46198                           # 0xb476
	.long	46224                           # 0xb490
	.long	46262                           # 0xb4b6
	.long	46292                           # 0xb4d4
	.long	46304                           # 0xb4e0
	.long	46420                           # 0xb554
	.long	46464                           # 0xb580
	.long	46628                           # 0xb624
	.long	46656                           # 0xb640
	.long	47140                           # 0xb824
	.long	47152                           # 0xb830
	.long	48100                           # 0xbbe4
	.long	48118                           # 0xbbf6
	.long	48132                           # 0xbc04
	.long	48150                           # 0xbc16
	.long	48176                           # 0xbc30
	.long	48230                           # 0xbc66
	.long	48272                           # 0xbc90
	.long	48294                           # 0xbca6
	.long	48340                           # 0xbcd4
	.long	48352                           # 0xbce0
	.long	48500                           # 0xbd74
	.long	48512                           # 0xbd80
	.long	49156                           # 0xc004
	.long	49174                           # 0xc016
	.long	49220                           # 0xc044
	.long	49232                           # 0xc050
	.long	50116                           # 0xc3c4
	.long	50128                           # 0xc3d0
	.long	50148                           # 0xc3e4
	.long	50198                           # 0xc416
	.long	50256                           # 0xc450
	.long	50276                           # 0xc464
	.long	50320                           # 0xc490
	.long	50340                           # 0xc4a4
	.long	50400                           # 0xc4e0
	.long	50516                           # 0xc554
	.long	50544                           # 0xc570
	.long	50724                           # 0xc624
	.long	50752                           # 0xc640
	.long	51220                           # 0xc814
	.long	51238                           # 0xc826
	.long	51264                           # 0xc840
	.long	52164                           # 0xcbc4
	.long	52176                           # 0xcbd0
	.long	52198                           # 0xcbe6
	.long	52212                           # 0xcbf4
	.long	52230                           # 0xcc06
	.long	52260                           # 0xcc24
	.long	52278                           # 0xcc36
	.long	52304                           # 0xcc50
	.long	52324                           # 0xcc64
	.long	52342                           # 0xcc76
	.long	52368                           # 0xcc90
	.long	52390                           # 0xcca6
	.long	52420                           # 0xccc4
	.long	52448                           # 0xcce0
	.long	52564                           # 0xcd54
	.long	52592                           # 0xcd70
	.long	52772                           # 0xce24
	.long	52800                           # 0xce40
	.long	53046                           # 0xcf36
	.long	53056                           # 0xcf40
	.long	53252                           # 0xd004
	.long	53286                           # 0xd026
	.long	53312                           # 0xd040
	.long	54196                           # 0xd3b4
	.long	54224                           # 0xd3d0
	.long	54244                           # 0xd3e4
	.long	54262                           # 0xd3f6
	.long	54292                           # 0xd414
	.long	54352                           # 0xd450
	.long	54374                           # 0xd466
	.long	54416                           # 0xd490
	.long	54438                           # 0xd4a6
	.long	54484                           # 0xd4d4
	.long	54501                           # 0xd4e5
	.long	54512                           # 0xd4f0
	.long	54644                           # 0xd574
	.long	54656                           # 0xd580
	.long	54820                           # 0xd624
	.long	54848                           # 0xd640
	.long	55316                           # 0xd814
	.long	55334                           # 0xd826
	.long	55360                           # 0xd840
	.long	56484                           # 0xdca4
	.long	56496                           # 0xdcb0
	.long	56564                           # 0xdcf4
	.long	56582                           # 0xdd06
	.long	56612                           # 0xdd24
	.long	56656                           # 0xdd50
	.long	56676                           # 0xdd64
	.long	56688                           # 0xdd70
	.long	56710                           # 0xdd86
	.long	56820                           # 0xddf4
	.long	56832                           # 0xde00
	.long	57126                           # 0xdf26
	.long	57152                           # 0xdf40
	.long	58132                           # 0xe314
	.long	58144                           # 0xe320
	.long	58166                           # 0xe336
	.long	58180                           # 0xe344
	.long	58288                           # 0xe3b0
	.long	58484                           # 0xe474
	.long	58608                           # 0xe4f0
	.long	60180                           # 0xeb14
	.long	60192                           # 0xeb20
	.long	60214                           # 0xeb36
	.long	60228                           # 0xeb44
	.long	60368                           # 0xebd0
	.long	60548                           # 0xec84
	.long	60656                           # 0xecf0
	.long	61828                           # 0xf184
	.long	61856                           # 0xf1a0
	.long	62292                           # 0xf354
	.long	62304                           # 0xf360
	.long	62324                           # 0xf374
	.long	62336                           # 0xf380
	.long	62356                           # 0xf394
	.long	62368                           # 0xf3a0
	.long	62438                           # 0xf3e6
	.long	62464                           # 0xf400
	.long	63252                           # 0xf714
	.long	63478                           # 0xf7f6
	.long	63492                           # 0xf804
	.long	63568                           # 0xf850
	.long	63588                           # 0xf864
	.long	63616                           # 0xf880
	.long	63700                           # 0xf8d4
	.long	63872                           # 0xf980
	.long	63892                           # 0xf994
	.long	64464                           # 0xfbd0
	.long	64612                           # 0xfc64
	.long	64624                           # 0xfc70
	.long	66260                           # 0x102d4
	.long	66326                           # 0x10316
	.long	66340                           # 0x10324
	.long	66432                           # 0x10380
	.long	66452                           # 0x10394
	.long	66486                           # 0x103b6
	.long	66516                           # 0x103d4
	.long	66544                           # 0x103f0
	.long	66918                           # 0x10566
	.long	66948                           # 0x10584
	.long	66976                           # 0x105a0
	.long	67044                           # 0x105e4
	.long	67088                           # 0x10610
	.long	67348                           # 0x10714
	.long	67408                           # 0x10750
	.long	67620                           # 0x10824
	.long	67632                           # 0x10830
	.long	67654                           # 0x10846
	.long	67668                           # 0x10854
	.long	67696                           # 0x10870
	.long	67796                           # 0x108d4
	.long	67808                           # 0x108e0
	.long	68052                           # 0x109d4
	.long	68064                           # 0x109e0
	.long	69639                           # 0x11007
	.long	71176                           # 0x11608
	.long	72329                           # 0x11a89
	.long	73728                           # 0x12000
	.long	79316                           # 0x135d4
	.long	79360                           # 0x13600
	.long	94500                           # 0x17124
	.long	94550                           # 0x17156
	.long	94560                           # 0x17160
	.long	95012                           # 0x17324
	.long	95046                           # 0x17346
	.long	95056                           # 0x17350
	.long	95524                           # 0x17524
	.long	95552                           # 0x17540
	.long	96036                           # 0x17724
	.long	96064                           # 0x17740
	.long	97092                           # 0x17b44
	.long	97126                           # 0x17b66
	.long	97140                           # 0x17b74
	.long	97254                           # 0x17be6
	.long	97380                           # 0x17c64
	.long	97398                           # 0x17c76
	.long	97428                           # 0x17c94
	.long	97600                           # 0x17d40
	.long	97748                           # 0x17dd4
	.long	97760                           # 0x17de0
	.long	98484                           # 0x180b4
	.long	98529                           # 0x180e1
	.long	98548                           # 0x180f4
	.long	98560                           # 0x18100
	.long	100436                          # 0x18854
	.long	100464                          # 0x18870
	.long	101012                          # 0x18a94
	.long	101024                          # 0x18aa0
	.long	102916                          # 0x19204
	.long	102966                          # 0x19236
	.long	103028                          # 0x19274
	.long	103062                          # 0x19296
	.long	103104                          # 0x192c0
	.long	103174                          # 0x19306
	.long	103204                          # 0x19324
	.long	103222                          # 0x19336
	.long	103316                          # 0x19394
	.long	103360                          # 0x193c0
	.long	106868                          # 0x1a174
	.long	106902                          # 0x1a196
	.long	106932                          # 0x1a1b4
	.long	106944                          # 0x1a1c0
	.long	107862                          # 0x1a556
	.long	107876                          # 0x1a564
	.long	107894                          # 0x1a576
	.long	107908                          # 0x1a584
	.long	108016                          # 0x1a5f0
	.long	108036                          # 0x1a604
	.long	108048                          # 0x1a610
	.long	108068                          # 0x1a624
	.long	108080                          # 0x1a630
	.long	108116                          # 0x1a654
	.long	108246                          # 0x1a6d6
	.long	108340                          # 0x1a734
	.long	108496                          # 0x1a7d0
	.long	108532                          # 0x1a7f4
	.long	108544                          # 0x1a800
	.long	109316                          # 0x1ab04
	.long	109808                          # 0x1acf0
	.long	110596                          # 0x1b004
	.long	110662                          # 0x1b046
	.long	110672                          # 0x1b050
	.long	111428                          # 0x1b344
	.long	111542                          # 0x1b3b6
	.long	111556                          # 0x1b3c4
	.long	111574                          # 0x1b3d6
	.long	111652                          # 0x1b424
	.long	111670                          # 0x1b436
	.long	111696                          # 0x1b450
	.long	112308                          # 0x1b6b4
	.long	112448                          # 0x1b740
	.long	112644                          # 0x1b804
	.long	112678                          # 0x1b826
	.long	112688                          # 0x1b830
	.long	113174                          # 0x1ba16
	.long	113188                          # 0x1ba24
	.long	113254                          # 0x1ba66
	.long	113284                          # 0x1ba84
	.long	113318                          # 0x1baa6
	.long	113332                          # 0x1bab4
	.long	113376                          # 0x1bae0
	.long	114276                          # 0x1be64
	.long	114294                          # 0x1be76
	.long	114308                          # 0x1be84
	.long	114342                          # 0x1bea6
	.long	114388                          # 0x1bed4
	.long	114406                          # 0x1bee6
	.long	114420                          # 0x1bef4
	.long	114470                          # 0x1bf26
	.long	114496                          # 0x1bf40
	.long	115270                          # 0x1c246
	.long	115396                          # 0x1c2c4
	.long	115526                          # 0x1c346
	.long	115556                          # 0x1c364
	.long	115584                          # 0x1c380
	.long	118020                          # 0x1cd04
	.long	118064                          # 0x1cd30
	.long	118084                          # 0x1cd44
	.long	118294                          # 0x1ce16
	.long	118308                          # 0x1ce24
	.long	118416                          # 0x1ce90
	.long	118484                          # 0x1ced4
	.long	118496                          # 0x1cee0
	.long	118596                          # 0x1cf44
	.long	118608                          # 0x1cf50
	.long	118646                          # 0x1cf76
	.long	118660                          # 0x1cf84
	.long	118688                          # 0x1cfa0
	.long	121860                          # 0x1dc04
	.long	122880                          # 0x1e000
	.long	131249                          # 0x200b1
	.long	131268                          # 0x200c4
	.long	131290                          # 0x200da
	.long	131297                          # 0x200e1
	.long	131328                          # 0x20100
	.long	131713                          # 0x20281
	.long	131824                          # 0x202f0
	.long	132609                          # 0x20601
	.long	132864                          # 0x20700
	.long	134404                          # 0x20d04
	.long	134928                          # 0x20f10
	.long	184052                          # 0x2cef4
	.long	184096                          # 0x2cf20
	.long	186356                          # 0x2d7f4
	.long	186368                          # 0x2d800
	.long	187908                          # 0x2de04
	.long	188416                          # 0x2e000
	.long	197284                          # 0x302a4
	.long	197376                          # 0x30300
	.long	199060                          # 0x30994
	.long	199088                          # 0x309b0
	.long	681716                          # 0xa66f4
	.long	681776                          # 0xa6730
	.long	681796                          # 0xa6744
	.long	681952                          # 0xa67e0
	.long	682468                          # 0xa69e4
	.long	682496                          # 0xa6a00
	.long	683780                          # 0xa6f04
	.long	683808                          # 0xa6f20
	.long	688164                          # 0xa8024
	.long	688176                          # 0xa8030
	.long	688228                          # 0xa8064
	.long	688240                          # 0xa8070
	.long	688308                          # 0xa80b4
	.long	688320                          # 0xa80c0
	.long	688694                          # 0xa8236
	.long	688724                          # 0xa8254
	.long	688758                          # 0xa8276
	.long	688768                          # 0xa8280
	.long	688836                          # 0xa82c4
	.long	688848                          # 0xa82d0
	.long	690182                          # 0xa8806
	.long	690208                          # 0xa8820
	.long	691014                          # 0xa8b46
	.long	691268                          # 0xa8c44
	.long	691296                          # 0xa8c60
	.long	691716                          # 0xa8e04
	.long	692000                          # 0xa8f20
	.long	692212                          # 0xa8ff4
	.long	692224                          # 0xa9000
	.long	692836                          # 0xa9264
	.long	692960                          # 0xa92e0
	.long	693364                          # 0xa9474
	.long	693542                          # 0xa9526
	.long	693568                          # 0xa9540
	.long	693767                          # 0xa9607
	.long	694224                          # 0xa97d0
	.long	694276                          # 0xa9804
	.long	694326                          # 0xa9836
	.long	694336                          # 0xa9840
	.long	695092                          # 0xa9b34
	.long	695110                          # 0xa9b46
	.long	695140                          # 0xa9b64
	.long	695206                          # 0xa9ba6
	.long	695236                          # 0xa9bc4
	.long	695270                          # 0xa9be6
	.long	695312                          # 0xa9c10
	.long	695892                          # 0xa9e54
	.long	695904                          # 0xa9e60
	.long	696980                          # 0xaa294
	.long	697078                          # 0xaa2f6
	.long	697108                          # 0xaa314
	.long	697142                          # 0xaa336
	.long	697172                          # 0xaa354
	.long	697200                          # 0xaa370
	.long	697396                          # 0xaa434
	.long	697408                          # 0xaa440
	.long	697540                          # 0xaa4c4
	.long	697558                          # 0xaa4d6
	.long	697568                          # 0xaa4e0
	.long	698308                          # 0xaa7c4
	.long	698320                          # 0xaa7d0
	.long	699140                          # 0xaab04
	.long	699152                          # 0xaab10
	.long	699172                          # 0xaab24
	.long	699216                          # 0xaab50
	.long	699252                          # 0xaab74
	.long	699280                          # 0xaab90
	.long	699364                          # 0xaabe4
	.long	699392                          # 0xaac00
	.long	699412                          # 0xaac14
	.long	699424                          # 0xaac20
	.long	700086                          # 0xaaeb6
	.long	700100                          # 0xaaec4
	.long	700134                          # 0xaaee6
	.long	700160                          # 0xaaf00
	.long	700246                          # 0xaaf56
	.long	700260                          # 0xaaf64
	.long	700272                          # 0xaaf70
	.long	704054                          # 0xabe36
	.long	704084                          # 0xabe54
	.long	704102                          # 0xabe66
	.long	704132                          # 0xabe84
	.long	704150                          # 0xabe96
	.long	704176                          # 0xabeb0
	.long	704198                          # 0xabec6
	.long	704212                          # 0xabed4
	.long	704224                          # 0xabee0
	.long	704523                          # 0xac00b
	.long	704540                          # 0xac01c
	.long	704971                          # 0xac1cb
	.long	704988                          # 0xac1dc
	.long	705419                          # 0xac38b
	.long	705436                          # 0xac39c
	.long	705867                          # 0xac54b
	.long	705884                          # 0xac55c
	.long	706315                          # 0xac70b
	.long	706332                          # 0xac71c
	.long	706763                          # 0xac8cb
	.long	706780                          # 0xac8dc
	.long	707211                          # 0xaca8b
	.long	707228                          # 0xaca9c
	.long	707659                          # 0xacc4b
	.long	707676                          # 0xacc5c
	.long	708107                          # 0xace0b
	.long	708124                          # 0xace1c
	.long	708555                          # 0xacfcb
	.long	708572                          # 0xacfdc
	.long	709003                          # 0xad18b
	.long	709020                          # 0xad19c
	.long	709451                          # 0xad34b
	.long	709468                          # 0xad35c
	.long	709899                          # 0xad50b
	.long	709916                          # 0xad51c
	.long	710347                          # 0xad6cb
	.long	710364                          # 0xad6dc
	.long	710795                          # 0xad88b
	.long	710812                          # 0xad89c
	.long	711243                          # 0xada4b
	.long	711260                          # 0xada5c
	.long	711691                          # 0xadc0b
	.long	711708                          # 0xadc1c
	.long	712139                          # 0xaddcb
	.long	712156                          # 0xadddc
	.long	712587                          # 0xadf8b
	.long	712604                          # 0xadf9c
	.long	713035                          # 0xae14b
	.long	713052                          # 0xae15c
	.long	713483                          # 0xae30b
	.long	713500                          # 0xae31c
	.long	713931                          # 0xae4cb
	.long	713948                          # 0xae4dc
	.long	714379                          # 0xae68b
	.long	714396                          # 0xae69c
	.long	714827                          # 0xae84b
	.long	714844                          # 0xae85c
	.long	715275                          # 0xaea0b
	.long	715292                          # 0xaea1c
	.long	715723                          # 0xaebcb
	.long	715740                          # 0xaebdc
	.long	716171                          # 0xaed8b
	.long	716188                          # 0xaed9c
	.long	716619                          # 0xaef4b
	.long	716636                          # 0xaef5c
	.long	717067                          # 0xaf10b
	.long	717084                          # 0xaf11c
	.long	717515                          # 0xaf2cb
	.long	717532                          # 0xaf2dc
	.long	717963                          # 0xaf48b
	.long	717980                          # 0xaf49c
	.long	718411                          # 0xaf64b
	.long	718428                          # 0xaf65c
	.long	718859                          # 0xaf80b
	.long	718876                          # 0xaf81c
	.long	719307                          # 0xaf9cb
	.long	719324                          # 0xaf9dc
	.long	719755                          # 0xafb8b
	.long	719772                          # 0xafb9c
	.long	720203                          # 0xafd4b
	.long	720220                          # 0xafd5c
	.long	720651                          # 0xaff0b
	.long	720668                          # 0xaff1c
	.long	721099                          # 0xb00cb
	.long	721116                          # 0xb00dc
	.long	721547                          # 0xb028b
	.long	721564                          # 0xb029c
	.long	721995                          # 0xb044b
	.long	722012                          # 0xb045c
	.long	722443                          # 0xb060b
	.long	722460                          # 0xb061c
	.long	722891                          # 0xb07cb
	.long	722908                          # 0xb07dc
	.long	723339                          # 0xb098b
	.long	723356                          # 0xb099c
	.long	723787                          # 0xb0b4b
	.long	723804                          # 0xb0b5c
	.long	724235                          # 0xb0d0b
	.long	724252                          # 0xb0d1c
	.long	724683                          # 0xb0ecb
	.long	724700                          # 0xb0edc
	.long	725131                          # 0xb108b
	.long	725148                          # 0xb109c
	.long	725579                          # 0xb124b
	.long	725596                          # 0xb125c
	.long	726027                          # 0xb140b
	.long	726044                          # 0xb141c
	.long	726475                          # 0xb15cb
	.long	726492                          # 0xb15dc
	.long	726923                          # 0xb178b
	.long	726940                          # 0xb179c
	.long	727371                          # 0xb194b
	.long	727388                          # 0xb195c
	.long	727819                          # 0xb1b0b
	.long	727836                          # 0xb1b1c
	.long	728267                          # 0xb1ccb
	.long	728284                          # 0xb1cdc
	.long	728715                          # 0xb1e8b
	.long	728732                          # 0xb1e9c
	.long	729163                          # 0xb204b
	.long	729180                          # 0xb205c
	.long	729611                          # 0xb220b
	.long	729628                          # 0xb221c
	.long	730059                          # 0xb23cb
	.long	730076                          # 0xb23dc
	.long	730507                          # 0xb258b
	.long	730524                          # 0xb259c
	.long	730955                          # 0xb274b
	.long	730972                          # 0xb275c
	.long	731403                          # 0xb290b
	.long	731420                          # 0xb291c
	.long	731851                          # 0xb2acb
	.long	731868                          # 0xb2adc
	.long	732299                          # 0xb2c8b
	.long	732316                          # 0xb2c9c
	.long	732747                          # 0xb2e4b
	.long	732764                          # 0xb2e5c
	.long	733195                          # 0xb300b
	.long	733212                          # 0xb301c
	.long	733643                          # 0xb31cb
	.long	733660                          # 0xb31dc
	.long	734091                          # 0xb338b
	.long	734108                          # 0xb339c
	.long	734539                          # 0xb354b
	.long	734556                          # 0xb355c
	.long	734987                          # 0xb370b
	.long	735004                          # 0xb371c
	.long	735435                          # 0xb38cb
	.long	735452                          # 0xb38dc
	.long	735883                          # 0xb3a8b
	.long	735900                          # 0xb3a9c
	.long	736331                          # 0xb3c4b
	.long	736348                          # 0xb3c5c
	.long	736779                          # 0xb3e0b
	.long	736796                          # 0xb3e1c
	.long	737227                          # 0xb3fcb
	.long	737244                          # 0xb3fdc
	.long	737675                          # 0xb418b
	.long	737692                          # 0xb419c
	.long	738123                          # 0xb434b
	.long	738140                          # 0xb435c
	.long	738571                          # 0xb450b
	.long	738588                          # 0xb451c
	.long	739019                          # 0xb46cb
	.long	739036                          # 0xb46dc
	.long	739467                          # 0xb488b
	.long	739484                          # 0xb489c
	.long	739915                          # 0xb4a4b
	.long	739932                          # 0xb4a5c
	.long	740363                          # 0xb4c0b
	.long	740380                          # 0xb4c1c
	.long	740811                          # 0xb4dcb
	.long	740828                          # 0xb4ddc
	.long	741259                          # 0xb4f8b
	.long	741276                          # 0xb4f9c
	.long	741707                          # 0xb514b
	.long	741724                          # 0xb515c
	.long	742155                          # 0xb530b
	.long	742172                          # 0xb531c
	.long	742603                          # 0xb54cb
	.long	742620                          # 0xb54dc
	.long	743051                          # 0xb568b
	.long	743068                          # 0xb569c
	.long	743499                          # 0xb584b
	.long	743516                          # 0xb585c
	.long	743947                          # 0xb5a0b
	.long	743964                          # 0xb5a1c
	.long	744395                          # 0xb5bcb
	.long	744412                          # 0xb5bdc
	.long	744843                          # 0xb5d8b
	.long	744860                          # 0xb5d9c
	.long	745291                          # 0xb5f4b
	.long	745308                          # 0xb5f5c
	.long	745739                          # 0xb610b
	.long	745756                          # 0xb611c
	.long	746187                          # 0xb62cb
	.long	746204                          # 0xb62dc
	.long	746635                          # 0xb648b
	.long	746652                          # 0xb649c
	.long	747083                          # 0xb664b
	.long	747100                          # 0xb665c
	.long	747531                          # 0xb680b
	.long	747548                          # 0xb681c
	.long	747979                          # 0xb69cb
	.long	747996                          # 0xb69dc
	.long	748427                          # 0xb6b8b
	.long	748444                          # 0xb6b9c
	.long	748875                          # 0xb6d4b
	.long	748892                          # 0xb6d5c
	.long	749323                          # 0xb6f0b
	.long	749340                          # 0xb6f1c
	.long	749771                          # 0xb70cb
	.long	749788                          # 0xb70dc
	.long	750219                          # 0xb728b
	.long	750236                          # 0xb729c
	.long	750667                          # 0xb744b
	.long	750684                          # 0xb745c
	.long	751115                          # 0xb760b
	.long	751132                          # 0xb761c
	.long	751563                          # 0xb77cb
	.long	751580                          # 0xb77dc
	.long	752011                          # 0xb798b
	.long	752028                          # 0xb799c
	.long	752459                          # 0xb7b4b
	.long	752476                          # 0xb7b5c
	.long	752907                          # 0xb7d0b
	.long	752924                          # 0xb7d1c
	.long	753355                          # 0xb7ecb
	.long	753372                          # 0xb7edc
	.long	753803                          # 0xb808b
	.long	753820                          # 0xb809c
	.long	754251                          # 0xb824b
	.long	754268                          # 0xb825c
	.long	754699                          # 0xb840b
	.long	754716                          # 0xb841c
	.long	755147                          # 0xb85cb
	.long	755164                          # 0xb85dc
	.long	755595                          # 0xb878b
	.long	755612                          # 0xb879c
	.long	756043                          # 0xb894b
	.long	756060                          # 0xb895c
	.long	756491                          # 0xb8b0b
	.long	756508                          # 0xb8b1c
	.long	756939                          # 0xb8ccb
	.long	756956                          # 0xb8cdc
	.long	757387                          # 0xb8e8b
	.long	757404                          # 0xb8e9c
	.long	757835                          # 0xb904b
	.long	757852                          # 0xb905c
	.long	758283                          # 0xb920b
	.long	758300                          # 0xb921c
	.long	758731                          # 0xb93cb
	.long	758748                          # 0xb93dc
	.long	759179                          # 0xb958b
	.long	759196                          # 0xb959c
	.long	759627                          # 0xb974b
	.long	759644                          # 0xb975c
	.long	760075                          # 0xb990b
	.long	760092                          # 0xb991c
	.long	760523                          # 0xb9acb
	.long	760540                          # 0xb9adc
	.long	760971                          # 0xb9c8b
	.long	760988                          # 0xb9c9c
	.long	761419                          # 0xb9e4b
	.long	761436                          # 0xb9e5c
	.long	761867                          # 0xba00b
	.long	761884                          # 0xba01c
	.long	762315                          # 0xba1cb
	.long	762332                          # 0xba1dc
	.long	762763                          # 0xba38b
	.long	762780                          # 0xba39c
	.long	763211                          # 0xba54b
	.long	763228                          # 0xba55c
	.long	763659                          # 0xba70b
	.long	763676                          # 0xba71c
	.long	764107                          # 0xba8cb
	.long	764124                          # 0xba8dc
	.long	764555                          # 0xbaa8b
	.long	764572                          # 0xbaa9c
	.long	765003                          # 0xbac4b
	.long	765020                          # 0xbac5c
	.long	765451                          # 0xbae0b
	.long	765468                          # 0xbae1c
	.long	765899                          # 0xbafcb
	.long	765916                          # 0xbafdc
	.long	766347                          # 0xbb18b
	.long	766364                          # 0xbb19c
	.long	766795                          # 0xbb34b
	.long	766812                          # 0xbb35c
	.long	767243                          # 0xbb50b
	.long	767260                          # 0xbb51c
	.long	767691                          # 0xbb6cb
	.long	767708                          # 0xbb6dc
	.long	768139                          # 0xbb88b
	.long	768156                          # 0xbb89c
	.long	768587                          # 0xbba4b
	.long	768604                          # 0xbba5c
	.long	769035                          # 0xbbc0b
	.long	769052                          # 0xbbc1c
	.long	769483                          # 0xbbdcb
	.long	769500                          # 0xbbddc
	.long	769931                          # 0xbbf8b
	.long	769948                          # 0xbbf9c
	.long	770379                          # 0xbc14b
	.long	770396                          # 0xbc15c
	.long	770827                          # 0xbc30b
	.long	770844                          # 0xbc31c
	.long	771275                          # 0xbc4cb
	.long	771292                          # 0xbc4dc
	.long	771723                          # 0xbc68b
	.long	771740                          # 0xbc69c
	.long	772171                          # 0xbc84b
	.long	772188                          # 0xbc85c
	.long	772619                          # 0xbca0b
	.long	772636                          # 0xbca1c
	.long	773067                          # 0xbcbcb
	.long	773084                          # 0xbcbdc
	.long	773515                          # 0xbcd8b
	.long	773532                          # 0xbcd9c
	.long	773963                          # 0xbcf4b
	.long	773980                          # 0xbcf5c
	.long	774411                          # 0xbd10b
	.long	774428                          # 0xbd11c
	.long	774859                          # 0xbd2cb
	.long	774876                          # 0xbd2dc
	.long	775307                          # 0xbd48b
	.long	775324                          # 0xbd49c
	.long	775755                          # 0xbd64b
	.long	775772                          # 0xbd65c
	.long	776203                          # 0xbd80b
	.long	776220                          # 0xbd81c
	.long	776651                          # 0xbd9cb
	.long	776668                          # 0xbd9dc
	.long	777099                          # 0xbdb8b
	.long	777116                          # 0xbdb9c
	.long	777547                          # 0xbdd4b
	.long	777564                          # 0xbdd5c
	.long	777995                          # 0xbdf0b
	.long	778012                          # 0xbdf1c
	.long	778443                          # 0xbe0cb
	.long	778460                          # 0xbe0dc
	.long	778891                          # 0xbe28b
	.long	778908                          # 0xbe29c
	.long	779339                          # 0xbe44b
	.long	779356                          # 0xbe45c
	.long	779787                          # 0xbe60b
	.long	779804                          # 0xbe61c
	.long	780235                          # 0xbe7cb
	.long	780252                          # 0xbe7dc
	.long	780683                          # 0xbe98b
	.long	780700                          # 0xbe99c
	.long	781131                          # 0xbeb4b
	.long	781148                          # 0xbeb5c
	.long	781579                          # 0xbed0b
	.long	781596                          # 0xbed1c
	.long	782027                          # 0xbeecb
	.long	782044                          # 0xbeedc
	.long	782475                          # 0xbf08b
	.long	782492                          # 0xbf09c
	.long	782923                          # 0xbf24b
	.long	782940                          # 0xbf25c
	.long	783371                          # 0xbf40b
	.long	783388                          # 0xbf41c
	.long	783819                          # 0xbf5cb
	.long	783836                          # 0xbf5dc
	.long	784267                          # 0xbf78b
	.long	784284                          # 0xbf79c
	.long	784715                          # 0xbf94b
	.long	784732                          # 0xbf95c
	.long	785163                          # 0xbfb0b
	.long	785180                          # 0xbfb1c
	.long	785611                          # 0xbfccb
	.long	785628                          # 0xbfcdc
	.long	786059                          # 0xbfe8b
	.long	786076                          # 0xbfe9c
	.long	786507                          # 0xc004b
	.long	786524                          # 0xc005c
	.long	786955                          # 0xc020b
	.long	786972                          # 0xc021c
	.long	787403                          # 0xc03cb
	.long	787420                          # 0xc03dc
	.long	787851                          # 0xc058b
	.long	787868                          # 0xc059c
	.long	788299                          # 0xc074b
	.long	788316                          # 0xc075c
	.long	788747                          # 0xc090b
	.long	788764                          # 0xc091c
	.long	789195                          # 0xc0acb
	.long	789212                          # 0xc0adc
	.long	789643                          # 0xc0c8b
	.long	789660                          # 0xc0c9c
	.long	790091                          # 0xc0e4b
	.long	790108                          # 0xc0e5c
	.long	790539                          # 0xc100b
	.long	790556                          # 0xc101c
	.long	790987                          # 0xc11cb
	.long	791004                          # 0xc11dc
	.long	791435                          # 0xc138b
	.long	791452                          # 0xc139c
	.long	791883                          # 0xc154b
	.long	791900                          # 0xc155c
	.long	792331                          # 0xc170b
	.long	792348                          # 0xc171c
	.long	792779                          # 0xc18cb
	.long	792796                          # 0xc18dc
	.long	793227                          # 0xc1a8b
	.long	793244                          # 0xc1a9c
	.long	793675                          # 0xc1c4b
	.long	793692                          # 0xc1c5c
	.long	794123                          # 0xc1e0b
	.long	794140                          # 0xc1e1c
	.long	794571                          # 0xc1fcb
	.long	794588                          # 0xc1fdc
	.long	795019                          # 0xc218b
	.long	795036                          # 0xc219c
	.long	795467                          # 0xc234b
	.long	795484                          # 0xc235c
	.long	795915                          # 0xc250b
	.long	795932                          # 0xc251c
	.long	796363                          # 0xc26cb
	.long	796380                          # 0xc26dc
	.long	796811                          # 0xc288b
	.long	796828                          # 0xc289c
	.long	797259                          # 0xc2a4b
	.long	797276                          # 0xc2a5c
	.long	797707                          # 0xc2c0b
	.long	797724                          # 0xc2c1c
	.long	798155                          # 0xc2dcb
	.long	798172                          # 0xc2ddc
	.long	798603                          # 0xc2f8b
	.long	798620                          # 0xc2f9c
	.long	799051                          # 0xc314b
	.long	799068                          # 0xc315c
	.long	799499                          # 0xc330b
	.long	799516                          # 0xc331c
	.long	799947                          # 0xc34cb
	.long	799964                          # 0xc34dc
	.long	800395                          # 0xc368b
	.long	800412                          # 0xc369c
	.long	800843                          # 0xc384b
	.long	800860                          # 0xc385c
	.long	801291                          # 0xc3a0b
	.long	801308                          # 0xc3a1c
	.long	801739                          # 0xc3bcb
	.long	801756                          # 0xc3bdc
	.long	802187                          # 0xc3d8b
	.long	802204                          # 0xc3d9c
	.long	802635                          # 0xc3f4b
	.long	802652                          # 0xc3f5c
	.long	803083                          # 0xc410b
	.long	803100                          # 0xc411c
	.long	803531                          # 0xc42cb
	.long	803548                          # 0xc42dc
	.long	803979                          # 0xc448b
	.long	803996                          # 0xc449c
	.long	804427                          # 0xc464b
	.long	804444                          # 0xc465c
	.long	804875                          # 0xc480b
	.long	804892                          # 0xc481c
	.long	805323                          # 0xc49cb
	.long	805340                          # 0xc49dc
	.long	805771                          # 0xc4b8b
	.long	805788                          # 0xc4b9c
	.long	806219                          # 0xc4d4b
	.long	806236                          # 0xc4d5c
	.long	806667                          # 0xc4f0b
	.long	806684                          # 0xc4f1c
	.long	807115                          # 0xc50cb
	.long	807132                          # 0xc50dc
	.long	807563                          # 0xc528b
	.long	807580                          # 0xc529c
	.long	808011                          # 0xc544b
	.long	808028                          # 0xc545c
	.long	808459                          # 0xc560b
	.long	808476                          # 0xc561c
	.long	808907                          # 0xc57cb
	.long	808924                          # 0xc57dc
	.long	809355                          # 0xc598b
	.long	809372                          # 0xc599c
	.long	809803                          # 0xc5b4b
	.long	809820                          # 0xc5b5c
	.long	810251                          # 0xc5d0b
	.long	810268                          # 0xc5d1c
	.long	810699                          # 0xc5ecb
	.long	810716                          # 0xc5edc
	.long	811147                          # 0xc608b
	.long	811164                          # 0xc609c
	.long	811595                          # 0xc624b
	.long	811612                          # 0xc625c
	.long	812043                          # 0xc640b
	.long	812060                          # 0xc641c
	.long	812491                          # 0xc65cb
	.long	812508                          # 0xc65dc
	.long	812939                          # 0xc678b
	.long	812956                          # 0xc679c
	.long	813387                          # 0xc694b
	.long	813404                          # 0xc695c
	.long	813835                          # 0xc6b0b
	.long	813852                          # 0xc6b1c
	.long	814283                          # 0xc6ccb
	.long	814300                          # 0xc6cdc
	.long	814731                          # 0xc6e8b
	.long	814748                          # 0xc6e9c
	.long	815179                          # 0xc704b
	.long	815196                          # 0xc705c
	.long	815627                          # 0xc720b
	.long	815644                          # 0xc721c
	.long	816075                          # 0xc73cb
	.long	816092                          # 0xc73dc
	.long	816523                          # 0xc758b
	.long	816540                          # 0xc759c
	.long	816971                          # 0xc774b
	.long	816988                          # 0xc775c
	.long	817419                          # 0xc790b
	.long	817436                          # 0xc791c
	.long	817867                          # 0xc7acb
	.long	817884                          # 0xc7adc
	.long	818315                          # 0xc7c8b
	.long	818332                          # 0xc7c9c
	.long	818763                          # 0xc7e4b
	.long	818780                          # 0xc7e5c
	.long	819211                          # 0xc800b
	.long	819228                          # 0xc801c
	.long	819659                          # 0xc81cb
	.long	819676                          # 0xc81dc
	.long	820107                          # 0xc838b
	.long	820124                          # 0xc839c
	.long	820555                          # 0xc854b
	.long	820572                          # 0xc855c
	.long	821003                          # 0xc870b
	.long	821020                          # 0xc871c
	.long	821451                          # 0xc88cb
	.long	821468                          # 0xc88dc
	.long	821899                          # 0xc8a8b
	.long	821916                          # 0xc8a9c
	.long	822347                          # 0xc8c4b
	.long	822364                          # 0xc8c5c
	.long	822795                          # 0xc8e0b
	.long	822812                          # 0xc8e1c
	.long	823243                          # 0xc8fcb
	.long	823260                          # 0xc8fdc
	.long	823691                          # 0xc918b
	.long	823708                          # 0xc919c
	.long	824139                          # 0xc934b
	.long	824156                          # 0xc935c
	.long	824587                          # 0xc950b
	.long	824604                          # 0xc951c
	.long	825035                          # 0xc96cb
	.long	825052                          # 0xc96dc
	.long	825483                          # 0xc988b
	.long	825500                          # 0xc989c
	.long	825931                          # 0xc9a4b
	.long	825948                          # 0xc9a5c
	.long	826379                          # 0xc9c0b
	.long	826396                          # 0xc9c1c
	.long	826827                          # 0xc9dcb
	.long	826844                          # 0xc9ddc
	.long	827275                          # 0xc9f8b
	.long	827292                          # 0xc9f9c
	.long	827723                          # 0xca14b
	.long	827740                          # 0xca15c
	.long	828171                          # 0xca30b
	.long	828188                          # 0xca31c
	.long	828619                          # 0xca4cb
	.long	828636                          # 0xca4dc
	.long	829067                          # 0xca68b
	.long	829084                          # 0xca69c
	.long	829515                          # 0xca84b
	.long	829532                          # 0xca85c
	.long	829963                          # 0xcaa0b
	.long	829980                          # 0xcaa1c
	.long	830411                          # 0xcabcb
	.long	830428                          # 0xcabdc
	.long	830859                          # 0xcad8b
	.long	830876                          # 0xcad9c
	.long	831307                          # 0xcaf4b
	.long	831324                          # 0xcaf5c
	.long	831755                          # 0xcb10b
	.long	831772                          # 0xcb11c
	.long	832203                          # 0xcb2cb
	.long	832220                          # 0xcb2dc
	.long	832651                          # 0xcb48b
	.long	832668                          # 0xcb49c
	.long	833099                          # 0xcb64b
	.long	833116                          # 0xcb65c
	.long	833547                          # 0xcb80b
	.long	833564                          # 0xcb81c
	.long	833995                          # 0xcb9cb
	.long	834012                          # 0xcb9dc
	.long	834443                          # 0xcbb8b
	.long	834460                          # 0xcbb9c
	.long	834891                          # 0xcbd4b
	.long	834908                          # 0xcbd5c
	.long	835339                          # 0xcbf0b
	.long	835356                          # 0xcbf1c
	.long	835787                          # 0xcc0cb
	.long	835804                          # 0xcc0dc
	.long	836235                          # 0xcc28b
	.long	836252                          # 0xcc29c
	.long	836683                          # 0xcc44b
	.long	836700                          # 0xcc45c
	.long	837131                          # 0xcc60b
	.long	837148                          # 0xcc61c
	.long	837579                          # 0xcc7cb
	.long	837596                          # 0xcc7dc
	.long	838027                          # 0xcc98b
	.long	838044                          # 0xcc99c
	.long	838475                          # 0xccb4b
	.long	838492                          # 0xccb5c
	.long	838923                          # 0xccd0b
	.long	838940                          # 0xccd1c
	.long	839371                          # 0xccecb
	.long	839388                          # 0xccedc
	.long	839819                          # 0xcd08b
	.long	839836                          # 0xcd09c
	.long	840267                          # 0xcd24b
	.long	840284                          # 0xcd25c
	.long	840715                          # 0xcd40b
	.long	840732                          # 0xcd41c
	.long	841163                          # 0xcd5cb
	.long	841180                          # 0xcd5dc
	.long	841611                          # 0xcd78b
	.long	841628                          # 0xcd79c
	.long	842059                          # 0xcd94b
	.long	842076                          # 0xcd95c
	.long	842507                          # 0xcdb0b
	.long	842524                          # 0xcdb1c
	.long	842955                          # 0xcdccb
	.long	842972                          # 0xcdcdc
	.long	843403                          # 0xcde8b
	.long	843420                          # 0xcde9c
	.long	843851                          # 0xce04b
	.long	843868                          # 0xce05c
	.long	844299                          # 0xce20b
	.long	844316                          # 0xce21c
	.long	844747                          # 0xce3cb
	.long	844764                          # 0xce3dc
	.long	845195                          # 0xce58b
	.long	845212                          # 0xce59c
	.long	845643                          # 0xce74b
	.long	845660                          # 0xce75c
	.long	846091                          # 0xce90b
	.long	846108                          # 0xce91c
	.long	846539                          # 0xceacb
	.long	846556                          # 0xceadc
	.long	846987                          # 0xcec8b
	.long	847004                          # 0xcec9c
	.long	847435                          # 0xcee4b
	.long	847452                          # 0xcee5c
	.long	847883                          # 0xcf00b
	.long	847900                          # 0xcf01c
	.long	848331                          # 0xcf1cb
	.long	848348                          # 0xcf1dc
	.long	848779                          # 0xcf38b
	.long	848796                          # 0xcf39c
	.long	849227                          # 0xcf54b
	.long	849244                          # 0xcf55c
	.long	849675                          # 0xcf70b
	.long	849692                          # 0xcf71c
	.long	850123                          # 0xcf8cb
	.long	850140                          # 0xcf8dc
	.long	850571                          # 0xcfa8b
	.long	850588                          # 0xcfa9c
	.long	851019                          # 0xcfc4b
	.long	851036                          # 0xcfc5c
	.long	851467                          # 0xcfe0b
	.long	851484                          # 0xcfe1c
	.long	851915                          # 0xcffcb
	.long	851932                          # 0xcffdc
	.long	852363                          # 0xd018b
	.long	852380                          # 0xd019c
	.long	852811                          # 0xd034b
	.long	852828                          # 0xd035c
	.long	853259                          # 0xd050b
	.long	853276                          # 0xd051c
	.long	853707                          # 0xd06cb
	.long	853724                          # 0xd06dc
	.long	854155                          # 0xd088b
	.long	854172                          # 0xd089c
	.long	854603                          # 0xd0a4b
	.long	854620                          # 0xd0a5c
	.long	855051                          # 0xd0c0b
	.long	855068                          # 0xd0c1c
	.long	855499                          # 0xd0dcb
	.long	855516                          # 0xd0ddc
	.long	855947                          # 0xd0f8b
	.long	855964                          # 0xd0f9c
	.long	856395                          # 0xd114b
	.long	856412                          # 0xd115c
	.long	856843                          # 0xd130b
	.long	856860                          # 0xd131c
	.long	857291                          # 0xd14cb
	.long	857308                          # 0xd14dc
	.long	857739                          # 0xd168b
	.long	857756                          # 0xd169c
	.long	858187                          # 0xd184b
	.long	858204                          # 0xd185c
	.long	858635                          # 0xd1a0b
	.long	858652                          # 0xd1a1c
	.long	859083                          # 0xd1bcb
	.long	859100                          # 0xd1bdc
	.long	859531                          # 0xd1d8b
	.long	859548                          # 0xd1d9c
	.long	859979                          # 0xd1f4b
	.long	859996                          # 0xd1f5c
	.long	860427                          # 0xd210b
	.long	860444                          # 0xd211c
	.long	860875                          # 0xd22cb
	.long	860892                          # 0xd22dc
	.long	861323                          # 0xd248b
	.long	861340                          # 0xd249c
	.long	861771                          # 0xd264b
	.long	861788                          # 0xd265c
	.long	862219                          # 0xd280b
	.long	862236                          # 0xd281c
	.long	862667                          # 0xd29cb
	.long	862684                          # 0xd29dc
	.long	863115                          # 0xd2b8b
	.long	863132                          # 0xd2b9c
	.long	863563                          # 0xd2d4b
	.long	863580                          # 0xd2d5c
	.long	864011                          # 0xd2f0b
	.long	864028                          # 0xd2f1c
	.long	864459                          # 0xd30cb
	.long	864476                          # 0xd30dc
	.long	864907                          # 0xd328b
	.long	864924                          # 0xd329c
	.long	865355                          # 0xd344b
	.long	865372                          # 0xd345c
	.long	865803                          # 0xd360b
	.long	865820                          # 0xd361c
	.long	866251                          # 0xd37cb
	.long	866268                          # 0xd37dc
	.long	866699                          # 0xd398b
	.long	866716                          # 0xd399c
	.long	867147                          # 0xd3b4b
	.long	867164                          # 0xd3b5c
	.long	867595                          # 0xd3d0b
	.long	867612                          # 0xd3d1c
	.long	868043                          # 0xd3ecb
	.long	868060                          # 0xd3edc
	.long	868491                          # 0xd408b
	.long	868508                          # 0xd409c
	.long	868939                          # 0xd424b
	.long	868956                          # 0xd425c
	.long	869387                          # 0xd440b
	.long	869404                          # 0xd441c
	.long	869835                          # 0xd45cb
	.long	869852                          # 0xd45dc
	.long	870283                          # 0xd478b
	.long	870300                          # 0xd479c
	.long	870731                          # 0xd494b
	.long	870748                          # 0xd495c
	.long	871179                          # 0xd4b0b
	.long	871196                          # 0xd4b1c
	.long	871627                          # 0xd4ccb
	.long	871644                          # 0xd4cdc
	.long	872075                          # 0xd4e8b
	.long	872092                          # 0xd4e9c
	.long	872523                          # 0xd504b
	.long	872540                          # 0xd505c
	.long	872971                          # 0xd520b
	.long	872988                          # 0xd521c
	.long	873419                          # 0xd53cb
	.long	873436                          # 0xd53dc
	.long	873867                          # 0xd558b
	.long	873884                          # 0xd559c
	.long	874315                          # 0xd574b
	.long	874332                          # 0xd575c
	.long	874763                          # 0xd590b
	.long	874780                          # 0xd591c
	.long	875211                          # 0xd5acb
	.long	875228                          # 0xd5adc
	.long	875659                          # 0xd5c8b
	.long	875676                          # 0xd5c9c
	.long	876107                          # 0xd5e4b
	.long	876124                          # 0xd5e5c
	.long	876555                          # 0xd600b
	.long	876572                          # 0xd601c
	.long	877003                          # 0xd61cb
	.long	877020                          # 0xd61dc
	.long	877451                          # 0xd638b
	.long	877468                          # 0xd639c
	.long	877899                          # 0xd654b
	.long	877916                          # 0xd655c
	.long	878347                          # 0xd670b
	.long	878364                          # 0xd671c
	.long	878795                          # 0xd68cb
	.long	878812                          # 0xd68dc
	.long	879243                          # 0xd6a8b
	.long	879260                          # 0xd6a9c
	.long	879691                          # 0xd6c4b
	.long	879708                          # 0xd6c5c
	.long	880139                          # 0xd6e0b
	.long	880156                          # 0xd6e1c
	.long	880587                          # 0xd6fcb
	.long	880604                          # 0xd6fdc
	.long	881035                          # 0xd718b
	.long	881052                          # 0xd719c
	.long	881483                          # 0xd734b
	.long	881500                          # 0xd735c
	.long	881931                          # 0xd750b
	.long	881948                          # 0xd751c
	.long	882379                          # 0xd76cb
	.long	882396                          # 0xd76dc
	.long	882827                          # 0xd788b
	.long	882844                          # 0xd789c
	.long	883264                          # 0xd7a40
	.long	883464                          # 0xd7b08
	.long	883824                          # 0xd7c70
	.long	883897                          # 0xd7cb9
	.long	884672                          # 0xd7fc0
	.long	1028580                         # 0xfb1e4
	.long	1028592                         # 0xfb1f0
	.long	1040388                         # 0xfe004
	.long	1040640                         # 0xfe100
	.long	1040900                         # 0xfe204
	.long	1041152                         # 0xfe300
	.long	1044465                         # 0xfeff1
	.long	1044480                         # 0xff000
	.long	1047012                         # 0xff9e4
	.long	1047040                         # 0xffa00
	.long	1048321                         # 0xfff01
	.long	1048512                         # 0xfffc0
	.long	1056724                         # 0x101fd4
	.long	1056736                         # 0x101fe0
	.long	1060356                         # 0x102e04
	.long	1060368                         # 0x102e10
	.long	1062756                         # 0x103764
	.long	1062832                         # 0x1037b0
	.long	1089556                         # 0x10a014
	.long	1089600                         # 0x10a040
	.long	1089620                         # 0x10a054
	.long	1089648                         # 0x10a070
	.long	1089732                         # 0x10a0c4
	.long	1089792                         # 0x10a100
	.long	1090436                         # 0x10a384
	.long	1090480                         # 0x10a3b0
	.long	1090548                         # 0x10a3f4
	.long	1090560                         # 0x10a400
	.long	1093204                         # 0x10ae54
	.long	1093232                         # 0x10ae70
	.long	1102404                         # 0x10d244
	.long	1102464                         # 0x10d280
	.long	1108660                         # 0x10eab4
	.long	1108688                         # 0x10ead0
	.long	1109972                         # 0x10efd4
	.long	1110016                         # 0x10f000
	.long	1111140                         # 0x10f464
	.long	1111312                         # 0x10f510
	.long	1112100                         # 0x10f824
	.long	1112160                         # 0x10f860
	.long	1114118                         # 0x110006
	.long	1114132                         # 0x110014
	.long	1114150                         # 0x110026
	.long	1114160                         # 0x110030
	.long	1115012                         # 0x110384
	.long	1115248                         # 0x110470
	.long	1115908                         # 0x110704
	.long	1115920                         # 0x110710
	.long	1115956                         # 0x110734
	.long	1115984                         # 0x110750
	.long	1116148                         # 0x1107f4
	.long	1116198                         # 0x110826
	.long	1116208                         # 0x110830
	.long	1116934                         # 0x110b06
	.long	1116980                         # 0x110b34
	.long	1117046                         # 0x110b76
	.long	1117076                         # 0x110b94
	.long	1117104                         # 0x110bb0
	.long	1117141                         # 0x110bd5
	.long	1117152                         # 0x110be0
	.long	1117220                         # 0x110c24
	.long	1117232                         # 0x110c30
	.long	1117397                         # 0x110cd5
	.long	1117408                         # 0x110ce0
	.long	1118212                         # 0x111004
	.long	1118256                         # 0x111030
	.long	1118836                         # 0x111274
	.long	1118918                         # 0x1112c6
	.long	1118932                         # 0x1112d4
	.long	1119056                         # 0x111350
	.long	1119318                         # 0x111456
	.long	1119344                         # 0x111470
	.long	1120052                         # 0x111734
	.long	1120064                         # 0x111740
	.long	1120260                         # 0x111804
	.long	1120294                         # 0x111826
	.long	1120304                         # 0x111830
	.long	1121078                         # 0x111b36
	.long	1121124                         # 0x111b64
	.long	1121270                         # 0x111bf6
	.long	1121296                         # 0x111c10
	.long	1121317                         # 0x111c25
	.long	1121344                         # 0x111c40
	.long	1121428                         # 0x111c94
	.long	1121488                         # 0x111cd0
	.long	1121510                         # 0x111ce6
	.long	1121524                         # 0x111cf4
	.long	1121536                         # 0x111d00
	.long	1123014                         # 0x1122c6
	.long	1123060                         # 0x1122f4
	.long	1123110                         # 0x112326
	.long	1123140                         # 0x112344
	.long	1123158                         # 0x112356
	.long	1123172                         # 0x112364
	.long	1123200                         # 0x112380
	.long	1123300                         # 0x1123e4
	.long	1123312                         # 0x1123f0
	.long	1123348                         # 0x112414
	.long	1123360                         # 0x112420
	.long	1125876                         # 0x112df4
	.long	1125894                         # 0x112e06
	.long	1125940                         # 0x112e34
	.long	1126064                         # 0x112eb0
	.long	1126404                         # 0x113004
	.long	1126438                         # 0x113026
	.long	1126464                         # 0x113040
	.long	1127348                         # 0x1133b4
	.long	1127376                         # 0x1133d0
	.long	1127396                         # 0x1133e4
	.long	1127414                         # 0x1133f6
	.long	1127428                         # 0x113404
	.long	1127446                         # 0x113416
	.long	1127504                         # 0x113450
	.long	1127542                         # 0x113476
	.long	1127568                         # 0x113490
	.long	1127606                         # 0x1134b6
	.long	1127648                         # 0x1134e0
	.long	1127796                         # 0x113574
	.long	1127808                         # 0x113580
	.long	1127974                         # 0x113626
	.long	1128000                         # 0x113640
	.long	1128036                         # 0x113664
	.long	1128144                         # 0x1136d0
	.long	1128196                         # 0x113704
	.long	1128272                         # 0x113750
	.long	1131350                         # 0x114356
	.long	1131396                         # 0x114384
	.long	1131526                         # 0x114406
	.long	1131556                         # 0x114424
	.long	1131606                         # 0x114456
	.long	1131620                         # 0x114464
	.long	1131632                         # 0x114470
	.long	1132004                         # 0x1145e4
	.long	1132016                         # 0x1145f0
	.long	1133316                         # 0x114b04
	.long	1133334                         # 0x114b16
	.long	1133364                         # 0x114b34
	.long	1133462                         # 0x114b96
	.long	1133476                         # 0x114ba4
	.long	1133494                         # 0x114bb6
	.long	1133524                         # 0x114bd4
	.long	1133542                         # 0x114be6
	.long	1133556                         # 0x114bf4
	.long	1133590                         # 0x114c16
	.long	1133604                         # 0x114c24
	.long	1133632                         # 0x114c40
	.long	1137396                         # 0x115af4
	.long	1137414                         # 0x115b06
	.long	1137444                         # 0x115b24
	.long	1137504                         # 0x115b60
	.long	1137542                         # 0x115b86
	.long	1137604                         # 0x115bc4
	.long	1137638                         # 0x115be6
	.long	1137652                         # 0x115bf4
	.long	1137680                         # 0x115c10
	.long	1138116                         # 0x115dc4
	.long	1138144                         # 0x115de0
	.long	1139462                         # 0x116306
	.long	1139508                         # 0x116334
	.long	1139638                         # 0x1163b6
	.long	1139668                         # 0x1163d4
	.long	1139686                         # 0x1163e6
	.long	1139700                         # 0x1163f4
	.long	1139728                         # 0x116410
	.long	1141428                         # 0x116ab4
	.long	1141446                         # 0x116ac6
	.long	1141460                         # 0x116ad4
	.long	1141478                         # 0x116ae6
	.long	1141508                         # 0x116b04
	.long	1141606                         # 0x116b66
	.long	1141620                         # 0x116b74
	.long	1141632                         # 0x116b80
	.long	1143252                         # 0x1171d4
	.long	1143296                         # 0x117200
	.long	1143332                         # 0x117224
	.long	1143398                         # 0x117266
	.long	1143412                         # 0x117274
	.long	1143488                         # 0x1172c0
	.long	1147590                         # 0x1182c6
	.long	1147636                         # 0x1182f4
	.long	1147782                         # 0x118386
	.long	1147796                         # 0x118394
	.long	1147824                         # 0x1183b0
	.long	1151748                         # 0x119304
	.long	1151766                         # 0x119316
	.long	1151840                         # 0x119360
	.long	1151862                         # 0x119376
	.long	1151888                         # 0x119390
	.long	1151924                         # 0x1193b4
	.long	1151958                         # 0x1193d6
	.long	1151972                         # 0x1193e4
	.long	1151989                         # 0x1193f5
	.long	1152006                         # 0x119406
	.long	1152021                         # 0x119415
	.long	1152038                         # 0x119426
	.long	1152052                         # 0x119434
	.long	1152064                         # 0x119440
	.long	1154326                         # 0x119d16
	.long	1154372                         # 0x119d44
	.long	1154432                         # 0x119d80
	.long	1154468                         # 0x119da4
	.long	1154502                         # 0x119dc6
	.long	1154564                         # 0x119e04
	.long	1154576                         # 0x119e10
	.long	1154630                         # 0x119e46
	.long	1154640                         # 0x119e50
	.long	1155092                         # 0x11a014
	.long	1155248                         # 0x11a0b0
	.long	1155892                         # 0x11a334
	.long	1155990                         # 0x11a396
	.long	1156005                         # 0x11a3a5
	.long	1156020                         # 0x11a3b4
	.long	1156080                         # 0x11a3f0
	.long	1156212                         # 0x11a474
	.long	1156224                         # 0x11a480
	.long	1156372                         # 0x11a514
	.long	1156470                         # 0x11a576
	.long	1156500                         # 0x11a594
	.long	1156544                         # 0x11a5c0
	.long	1157189                         # 0x11a845
	.long	1157284                         # 0x11a8a4
	.long	1157494                         # 0x11a976
	.long	1157508                         # 0x11a984
	.long	1157536                         # 0x11a9a0
	.long	1164022                         # 0x11c2f6
	.long	1164036                         # 0x11c304
	.long	1164144                         # 0x11c370
	.long	1164164                         # 0x11c384
	.long	1164262                         # 0x11c3e6
	.long	1164276                         # 0x11c3f4
	.long	1164288                         # 0x11c400
	.long	1165604                         # 0x11c924
	.long	1165952                         # 0x11ca80
	.long	1165974                         # 0x11ca96
	.long	1165988                         # 0x11caa4
	.long	1166102                         # 0x11cb16
	.long	1166116                         # 0x11cb24
	.long	1166150                         # 0x11cb46
	.long	1166164                         # 0x11cb54
	.long	1166192                         # 0x11cb70
	.long	1168148                         # 0x11d314
	.long	1168240                         # 0x11d370
	.long	1168292                         # 0x11d3a4
	.long	1168304                         # 0x11d3b0
	.long	1168324                         # 0x11d3c4
	.long	1168352                         # 0x11d3e0
	.long	1168372                         # 0x11d3f4
	.long	1168485                         # 0x11d465
	.long	1168500                         # 0x11d474
	.long	1168512                         # 0x11d480
	.long	1169574                         # 0x11d8a6
	.long	1169648                         # 0x11d8f0
	.long	1169668                         # 0x11d904
	.long	1169696                         # 0x11d920
	.long	1169718                         # 0x11d936
	.long	1169748                         # 0x11d954
	.long	1169766                         # 0x11d966
	.long	1169780                         # 0x11d974
	.long	1169792                         # 0x11d980
	.long	1175348                         # 0x11ef34
	.long	1175382                         # 0x11ef56
	.long	1175408                         # 0x11ef70
	.long	1175556                         # 0x11f004
	.long	1175589                         # 0x11f025
	.long	1175606                         # 0x11f036
	.long	1175616                         # 0x11f040
	.long	1176390                         # 0x11f346
	.long	1176420                         # 0x11f364
	.long	1176496                         # 0x11f3b0
	.long	1176550                         # 0x11f3e6
	.long	1176580                         # 0x11f404
	.long	1176598                         # 0x11f416
	.long	1176612                         # 0x11f424
	.long	1176624                         # 0x11f430
	.long	1262337                         # 0x134301
	.long	1262596                         # 0x134404
	.long	1262608                         # 0x134410
	.long	1262708                         # 0x134474
	.long	1262944                         # 0x134560
	.long	1486596                         # 0x16af04
	.long	1486672                         # 0x16af50
	.long	1487620                         # 0x16b304
	.long	1487728                         # 0x16b370
	.long	1504500                         # 0x16f4f4
	.long	1504512                         # 0x16f500
	.long	1504534                         # 0x16f516
	.long	1505408                         # 0x16f880
	.long	1505524                         # 0x16f8f4
	.long	1505584                         # 0x16f930
	.long	1506884                         # 0x16fe44
	.long	1506896                         # 0x16fe50
	.long	1507078                         # 0x16ff06
	.long	1507104                         # 0x16ff20
	.long	1821140                         # 0x1bc9d4
	.long	1821168                         # 0x1bc9f0
	.long	1821185                         # 0x1bca01
	.long	1821248                         # 0x1bca40
	.long	1896452                         # 0x1cf004
	.long	1897184                         # 0x1cf2e0
	.long	1897220                         # 0x1cf304
	.long	1897584                         # 0x1cf470
	.long	1906260                         # 0x1d1654
	.long	1906278                         # 0x1d1666
	.long	1906292                         # 0x1d1674
	.long	1906336                         # 0x1d16a0
	.long	1906390                         # 0x1d16d6
	.long	1906404                         # 0x1d16e4
	.long	1906481                         # 0x1d1731
	.long	1906612                         # 0x1d17b4
	.long	1906736                         # 0x1d1830
	.long	1906772                         # 0x1d1854
	.long	1906880                         # 0x1d18c0
	.long	1907364                         # 0x1d1aa4
	.long	1907424                         # 0x1d1ae0
	.long	1909796                         # 0x1d2424
	.long	1909840                         # 0x1d2450
	.long	1941508                         # 0x1da004
	.long	1942384                         # 0x1da370
	.long	1942452                         # 0x1da3b4
	.long	1943248                         # 0x1da6d0
	.long	1943380                         # 0x1da754
	.long	1943392                         # 0x1da760
	.long	1943620                         # 0x1da844
	.long	1943632                         # 0x1da850
	.long	1943988                         # 0x1da9b4
	.long	1944064                         # 0x1daa00
	.long	1944084                         # 0x1daa14
	.long	1944320                         # 0x1dab00
	.long	1966084                         # 0x1e0004
	.long	1966192                         # 0x1e0070
	.long	1966212                         # 0x1e0084
	.long	1966480                         # 0x1e0190
	.long	1966516                         # 0x1e01b4
	.long	1966624                         # 0x1e0220
	.long	1966644                         # 0x1e0234
	.long	1966672                         # 0x1e0250
	.long	1966692                         # 0x1e0264
	.long	1966768                         # 0x1e02b0
	.long	1968372                         # 0x1e08f4
	.long	1968384                         # 0x1e0900
	.long	1970948                         # 0x1e1304
	.long	1971056                         # 0x1e1370
	.long	1977060                         # 0x1e2ae4
	.long	1977072                         # 0x1e2af0
	.long	1978052                         # 0x1e2ec4
	.long	1978112                         # 0x1e2f00
	.long	1986244                         # 0x1e4ec4
	.long	1986304                         # 0x1e4f00
	.long	2002180                         # 0x1e8d04
	.long	2002288                         # 0x1e8d70
	.long	2004036                         # 0x1e9444
	.long	2004144                         # 0x1e94b0
	.long	2039405                         # 0x1f1e6d
	.long	2039808                         # 0x1f2000
	.long	2047924                         # 0x1f3fb4
	.long	2048000                         # 0x1f4000
	.long	14680065                        # 0xe00001
	.long	14680580                        # 0xe00204
	.long	14682113                        # 0xe00801
	.long	14684164                        # 0xe01004
	.long	14688001                        # 0xe01f01
	.long	14745600                        # 0xe10000
	.size	_ZNSt9__unicode9__v15_1_011__gcb_edgesE, 6800

	.type	_ZNSt9__unicode9__v15_1_013__width_edgesE,@object # @_ZNSt9__unicode9__v15_1_013__width_edgesE
	.section	.rodata._ZNSt9__unicode9__v15_1_013__width_edgesE,"aG",@progbits,_ZNSt9__unicode9__v15_1_013__width_edgesE,comdat
	.weak	_ZNSt9__unicode9__v15_1_013__width_edgesE
	.p2align	4, 0x0
_ZNSt9__unicode9__v15_1_013__width_edgesE:
	.long	4352                            # 0x1100
	.long	4448                            # 0x1160
	.long	8986                            # 0x231a
	.long	8988                            # 0x231c
	.long	9001                            # 0x2329
	.long	9003                            # 0x232b
	.long	9193                            # 0x23e9
	.long	9197                            # 0x23ed
	.long	9200                            # 0x23f0
	.long	9201                            # 0x23f1
	.long	9203                            # 0x23f3
	.long	9204                            # 0x23f4
	.long	9725                            # 0x25fd
	.long	9727                            # 0x25ff
	.long	9748                            # 0x2614
	.long	9750                            # 0x2616
	.long	9800                            # 0x2648
	.long	9812                            # 0x2654
	.long	9855                            # 0x267f
	.long	9856                            # 0x2680
	.long	9875                            # 0x2693
	.long	9876                            # 0x2694
	.long	9889                            # 0x26a1
	.long	9890                            # 0x26a2
	.long	9898                            # 0x26aa
	.long	9900                            # 0x26ac
	.long	9917                            # 0x26bd
	.long	9919                            # 0x26bf
	.long	9924                            # 0x26c4
	.long	9926                            # 0x26c6
	.long	9934                            # 0x26ce
	.long	9935                            # 0x26cf
	.long	9940                            # 0x26d4
	.long	9941                            # 0x26d5
	.long	9962                            # 0x26ea
	.long	9963                            # 0x26eb
	.long	9970                            # 0x26f2
	.long	9972                            # 0x26f4
	.long	9973                            # 0x26f5
	.long	9974                            # 0x26f6
	.long	9978                            # 0x26fa
	.long	9979                            # 0x26fb
	.long	9981                            # 0x26fd
	.long	9982                            # 0x26fe
	.long	9989                            # 0x2705
	.long	9990                            # 0x2706
	.long	9994                            # 0x270a
	.long	9996                            # 0x270c
	.long	10024                           # 0x2728
	.long	10025                           # 0x2729
	.long	10060                           # 0x274c
	.long	10061                           # 0x274d
	.long	10062                           # 0x274e
	.long	10063                           # 0x274f
	.long	10067                           # 0x2753
	.long	10070                           # 0x2756
	.long	10071                           # 0x2757
	.long	10072                           # 0x2758
	.long	10133                           # 0x2795
	.long	10136                           # 0x2798
	.long	10160                           # 0x27b0
	.long	10161                           # 0x27b1
	.long	10175                           # 0x27bf
	.long	10176                           # 0x27c0
	.long	11035                           # 0x2b1b
	.long	11037                           # 0x2b1d
	.long	11088                           # 0x2b50
	.long	11089                           # 0x2b51
	.long	11093                           # 0x2b55
	.long	11094                           # 0x2b56
	.long	11904                           # 0x2e80
	.long	11930                           # 0x2e9a
	.long	11931                           # 0x2e9b
	.long	12020                           # 0x2ef4
	.long	12032                           # 0x2f00
	.long	12246                           # 0x2fd6
	.long	12272                           # 0x2ff0
	.long	12351                           # 0x303f
	.long	12353                           # 0x3041
	.long	12439                           # 0x3097
	.long	12441                           # 0x3099
	.long	12544                           # 0x3100
	.long	12549                           # 0x3105
	.long	12592                           # 0x3130
	.long	12593                           # 0x3131
	.long	12687                           # 0x318f
	.long	12688                           # 0x3190
	.long	12772                           # 0x31e4
	.long	12783                           # 0x31ef
	.long	12831                           # 0x321f
	.long	12832                           # 0x3220
	.long	12872                           # 0x3248
	.long	12880                           # 0x3250
	.long	42125                           # 0xa48d
	.long	42128                           # 0xa490
	.long	42183                           # 0xa4c7
	.long	43360                           # 0xa960
	.long	43389                           # 0xa97d
	.long	44032                           # 0xac00
	.long	55204                           # 0xd7a4
	.long	63744                           # 0xf900
	.long	64256                           # 0xfb00
	.long	65040                           # 0xfe10
	.long	65050                           # 0xfe1a
	.long	65072                           # 0xfe30
	.long	65107                           # 0xfe53
	.long	65108                           # 0xfe54
	.long	65127                           # 0xfe67
	.long	65128                           # 0xfe68
	.long	65132                           # 0xfe6c
	.long	65281                           # 0xff01
	.long	65377                           # 0xff61
	.long	65504                           # 0xffe0
	.long	65511                           # 0xffe7
	.long	94176                           # 0x16fe0
	.long	94181                           # 0x16fe5
	.long	94192                           # 0x16ff0
	.long	94194                           # 0x16ff2
	.long	94208                           # 0x17000
	.long	100344                          # 0x187f8
	.long	100352                          # 0x18800
	.long	101590                          # 0x18cd6
	.long	101632                          # 0x18d00
	.long	101641                          # 0x18d09
	.long	110576                          # 0x1aff0
	.long	110580                          # 0x1aff4
	.long	110581                          # 0x1aff5
	.long	110588                          # 0x1affc
	.long	110589                          # 0x1affd
	.long	110591                          # 0x1afff
	.long	110592                          # 0x1b000
	.long	110883                          # 0x1b123
	.long	110898                          # 0x1b132
	.long	110899                          # 0x1b133
	.long	110928                          # 0x1b150
	.long	110931                          # 0x1b153
	.long	110933                          # 0x1b155
	.long	110934                          # 0x1b156
	.long	110948                          # 0x1b164
	.long	110952                          # 0x1b168
	.long	110960                          # 0x1b170
	.long	111356                          # 0x1b2fc
	.long	126980                          # 0x1f004
	.long	126981                          # 0x1f005
	.long	127183                          # 0x1f0cf
	.long	127184                          # 0x1f0d0
	.long	127374                          # 0x1f18e
	.long	127375                          # 0x1f18f
	.long	127377                          # 0x1f191
	.long	127387                          # 0x1f19b
	.long	127488                          # 0x1f200
	.long	127491                          # 0x1f203
	.long	127504                          # 0x1f210
	.long	127548                          # 0x1f23c
	.long	127552                          # 0x1f240
	.long	127561                          # 0x1f249
	.long	127568                          # 0x1f250
	.long	127570                          # 0x1f252
	.long	127584                          # 0x1f260
	.long	127590                          # 0x1f266
	.long	127744                          # 0x1f300
	.long	128592                          # 0x1f650
	.long	128640                          # 0x1f680
	.long	128710                          # 0x1f6c6
	.long	128716                          # 0x1f6cc
	.long	128717                          # 0x1f6cd
	.long	128720                          # 0x1f6d0
	.long	128723                          # 0x1f6d3
	.long	128725                          # 0x1f6d5
	.long	128728                          # 0x1f6d8
	.long	128732                          # 0x1f6dc
	.long	128736                          # 0x1f6e0
	.long	128747                          # 0x1f6eb
	.long	128749                          # 0x1f6ed
	.long	128756                          # 0x1f6f4
	.long	128765                          # 0x1f6fd
	.long	128992                          # 0x1f7e0
	.long	129004                          # 0x1f7ec
	.long	129008                          # 0x1f7f0
	.long	129009                          # 0x1f7f1
	.long	129280                          # 0x1f900
	.long	129536                          # 0x1fa00
	.long	129648                          # 0x1fa70
	.long	129661                          # 0x1fa7d
	.long	129664                          # 0x1fa80
	.long	129673                          # 0x1fa89
	.long	129680                          # 0x1fa90
	.long	129726                          # 0x1fabe
	.long	129727                          # 0x1fabf
	.long	129734                          # 0x1fac6
	.long	129742                          # 0x1face
	.long	129756                          # 0x1fadc
	.long	129760                          # 0x1fae0
	.long	129769                          # 0x1fae9
	.long	129776                          # 0x1faf0
	.long	129785                          # 0x1faf9
	.long	131072                          # 0x20000
	.long	196606                          # 0x2fffe
	.long	196608                          # 0x30000
	.long	262142                          # 0x3fffe
	.size	_ZNSt9__unicode9__v15_1_013__width_edgesE, 800

	.type	_ZNSt9__unicode9__v15_1_014__xpicto_edgesE,@object # @_ZNSt9__unicode9__v15_1_014__xpicto_edgesE
	.section	.rodata._ZNSt9__unicode9__v15_1_014__xpicto_edgesE,"aG",@progbits,_ZNSt9__unicode9__v15_1_014__xpicto_edgesE,comdat
	.weak	_ZNSt9__unicode9__v15_1_014__xpicto_edgesE
	.p2align	4, 0x0
_ZNSt9__unicode9__v15_1_014__xpicto_edgesE:
	.long	169                             # 0xa9
	.long	170                             # 0xaa
	.long	174                             # 0xae
	.long	175                             # 0xaf
	.long	8252                            # 0x203c
	.long	8253                            # 0x203d
	.long	8265                            # 0x2049
	.long	8266                            # 0x204a
	.long	8482                            # 0x2122
	.long	8483                            # 0x2123
	.long	8505                            # 0x2139
	.long	8506                            # 0x213a
	.long	8596                            # 0x2194
	.long	8602                            # 0x219a
	.long	8617                            # 0x21a9
	.long	8619                            # 0x21ab
	.long	8986                            # 0x231a
	.long	8988                            # 0x231c
	.long	9000                            # 0x2328
	.long	9001                            # 0x2329
	.long	9096                            # 0x2388
	.long	9097                            # 0x2389
	.long	9167                            # 0x23cf
	.long	9168                            # 0x23d0
	.long	9193                            # 0x23e9
	.long	9204                            # 0x23f4
	.long	9208                            # 0x23f8
	.long	9211                            # 0x23fb
	.long	9410                            # 0x24c2
	.long	9411                            # 0x24c3
	.long	9642                            # 0x25aa
	.long	9644                            # 0x25ac
	.long	9654                            # 0x25b6
	.long	9655                            # 0x25b7
	.long	9664                            # 0x25c0
	.long	9665                            # 0x25c1
	.long	9723                            # 0x25fb
	.long	9727                            # 0x25ff
	.long	9728                            # 0x2600
	.long	9734                            # 0x2606
	.long	9735                            # 0x2607
	.long	9747                            # 0x2613
	.long	9748                            # 0x2614
	.long	9862                            # 0x2686
	.long	9872                            # 0x2690
	.long	9990                            # 0x2706
	.long	9992                            # 0x2708
	.long	10003                           # 0x2713
	.long	10004                           # 0x2714
	.long	10005                           # 0x2715
	.long	10006                           # 0x2716
	.long	10007                           # 0x2717
	.long	10013                           # 0x271d
	.long	10014                           # 0x271e
	.long	10017                           # 0x2721
	.long	10018                           # 0x2722
	.long	10024                           # 0x2728
	.long	10025                           # 0x2729
	.long	10035                           # 0x2733
	.long	10037                           # 0x2735
	.long	10052                           # 0x2744
	.long	10053                           # 0x2745
	.long	10055                           # 0x2747
	.long	10056                           # 0x2748
	.long	10060                           # 0x274c
	.long	10061                           # 0x274d
	.long	10062                           # 0x274e
	.long	10063                           # 0x274f
	.long	10067                           # 0x2753
	.long	10070                           # 0x2756
	.long	10071                           # 0x2757
	.long	10072                           # 0x2758
	.long	10083                           # 0x2763
	.long	10088                           # 0x2768
	.long	10133                           # 0x2795
	.long	10136                           # 0x2798
	.long	10145                           # 0x27a1
	.long	10146                           # 0x27a2
	.long	10160                           # 0x27b0
	.long	10161                           # 0x27b1
	.long	10175                           # 0x27bf
	.long	10176                           # 0x27c0
	.long	10548                           # 0x2934
	.long	10550                           # 0x2936
	.long	11013                           # 0x2b05
	.long	11016                           # 0x2b08
	.long	11035                           # 0x2b1b
	.long	11037                           # 0x2b1d
	.long	11088                           # 0x2b50
	.long	11089                           # 0x2b51
	.long	11093                           # 0x2b55
	.long	11094                           # 0x2b56
	.long	12336                           # 0x3030
	.long	12337                           # 0x3031
	.long	12349                           # 0x303d
	.long	12350                           # 0x303e
	.long	12951                           # 0x3297
	.long	12952                           # 0x3298
	.long	12953                           # 0x3299
	.long	12954                           # 0x329a
	.long	126976                          # 0x1f000
	.long	127232                          # 0x1f100
	.long	127245                          # 0x1f10d
	.long	127248                          # 0x1f110
	.long	127279                          # 0x1f12f
	.long	127280                          # 0x1f130
	.long	127340                          # 0x1f16c
	.long	127346                          # 0x1f172
	.long	127358                          # 0x1f17e
	.long	127360                          # 0x1f180
	.long	127374                          # 0x1f18e
	.long	127375                          # 0x1f18f
	.long	127377                          # 0x1f191
	.long	127387                          # 0x1f19b
	.long	127405                          # 0x1f1ad
	.long	127462                          # 0x1f1e6
	.long	127489                          # 0x1f201
	.long	127504                          # 0x1f210
	.long	127514                          # 0x1f21a
	.long	127515                          # 0x1f21b
	.long	127535                          # 0x1f22f
	.long	127536                          # 0x1f230
	.long	127538                          # 0x1f232
	.long	127547                          # 0x1f23b
	.long	127548                          # 0x1f23c
	.long	127552                          # 0x1f240
	.long	127561                          # 0x1f249
	.long	127995                          # 0x1f3fb
	.long	128000                          # 0x1f400
	.long	128318                          # 0x1f53e
	.long	128326                          # 0x1f546
	.long	128592                          # 0x1f650
	.long	128640                          # 0x1f680
	.long	128768                          # 0x1f700
	.long	128884                          # 0x1f774
	.long	128896                          # 0x1f780
	.long	128981                          # 0x1f7d5
	.long	129024                          # 0x1f800
	.long	129036                          # 0x1f80c
	.long	129040                          # 0x1f810
	.long	129096                          # 0x1f848
	.long	129104                          # 0x1f850
	.long	129114                          # 0x1f85a
	.long	129120                          # 0x1f860
	.long	129160                          # 0x1f888
	.long	129168                          # 0x1f890
	.long	129198                          # 0x1f8ae
	.long	129280                          # 0x1f900
	.long	129292                          # 0x1f90c
	.long	129339                          # 0x1f93b
	.long	129340                          # 0x1f93c
	.long	129350                          # 0x1f946
	.long	129351                          # 0x1f947
	.long	129792                          # 0x1fb00
	.long	130048                          # 0x1fc00
	.long	131070                          # 0x1fffe
	.size	_ZNSt9__unicode9__v15_1_014__xpicto_edgesE, 624

	.type	_ZNSt9__unicode9__v15_1_012__incb_edgesE,@object # @_ZNSt9__unicode9__v15_1_012__incb_edgesE
	.section	.rodata._ZNSt9__unicode9__v15_1_012__incb_edgesE,"aG",@progbits,_ZNSt9__unicode9__v15_1_012__incb_edgesE,comdat
	.weak	_ZNSt9__unicode9__v15_1_012__incb_edgesE
	.p2align	4, 0x0
_ZNSt9__unicode9__v15_1_012__incb_edgesE:
	.long	3074                            # 0xc02
	.long	3388                            # 0xd3c
	.long	3394                            # 0xd42
	.long	3520                            # 0xdc0
	.long	4622                            # 0x120e
	.long	4640                            # 0x1220
	.long	5702                            # 0x1646
	.long	5880                            # 0x16f8
	.long	5886                            # 0x16fe
	.long	5888                            # 0x1700
	.long	5894                            # 0x1706
	.long	5900                            # 0x170c
	.long	5906                            # 0x1712
	.long	5912                            # 0x1718
	.long	5918                            # 0x171e
	.long	5920                            # 0x1720
	.long	6210                            # 0x1842
	.long	6252                            # 0x186c
	.long	6446                            # 0x192e
	.long	6528                            # 0x1980
	.long	6594                            # 0x19c2
	.long	6596                            # 0x19c4
	.long	7002                            # 0x1b5a
	.long	7028                            # 0x1b74
	.long	7038                            # 0x1b7e
	.long	7060                            # 0x1b94
	.long	7070                            # 0x1b9e
	.long	7076                            # 0x1ba4
	.long	7082                            # 0x1baa
	.long	7096                            # 0x1bb8
	.long	7238                            # 0x1c46
	.long	7240                            # 0x1c48
	.long	7362                            # 0x1cc2
	.long	7468                            # 0x1d2c
	.long	8110                            # 0x1fae
	.long	8144                            # 0x1fd0
	.long	8182                            # 0x1ff6
	.long	8184                            # 0x1ff8
	.long	8282                            # 0x205a
	.long	8296                            # 0x2068
	.long	8302                            # 0x206e
	.long	8336                            # 0x2090
	.long	8342                            # 0x2096
	.long	8352                            # 0x20a0
	.long	8358                            # 0x20a6
	.long	8376                            # 0x20b8
	.long	8550                            # 0x2166
	.long	8560                            # 0x2170
	.long	8802                            # 0x2262
	.long	8832                            # 0x2280
	.long	9002                            # 0x232a
	.long	9096                            # 0x2388
	.long	9102                            # 0x238e
	.long	9216                            # 0x2400
	.long	9301                            # 0x2455
	.long	9448                            # 0x24e8
	.long	9458                            # 0x24f2
	.long	9460                            # 0x24f4
	.long	9542                            # 0x2546
	.long	9556                            # 0x2554
	.long	9569                            # 0x2561
	.long	9600                            # 0x2580
	.long	9697                            # 0x25e1
	.long	9728                            # 0x2600
	.long	9813                            # 0x2655
	.long	9892                            # 0x26a4
	.long	9897                            # 0x26a9
	.long	9924                            # 0x26c4
	.long	9929                            # 0x26c9
	.long	9932                            # 0x26cc
	.long	9945                            # 0x26d9
	.long	9960                            # 0x26e8
	.long	9970                            # 0x26f2
	.long	9972                            # 0x26f4
	.long	10097                           # 0x2771
	.long	10104                           # 0x2778
	.long	10109                           # 0x277d
	.long	10112                           # 0x2780
	.long	10177                           # 0x27c1
	.long	10184                           # 0x27c8
	.long	10234                           # 0x27fa
	.long	10236                           # 0x27fc
	.long	10482                           # 0x28f2
	.long	10484                           # 0x28f4
	.long	10837                           # 0x2a55
	.long	10916                           # 0x2aa4
	.long	10921                           # 0x2aa9
	.long	10948                           # 0x2ac4
	.long	10953                           # 0x2ac9
	.long	10960                           # 0x2ad0
	.long	10965                           # 0x2ad5
	.long	10984                           # 0x2ae8
	.long	10994                           # 0x2af2
	.long	10996                           # 0x2af4
	.long	11237                           # 0x2be5
	.long	11240                           # 0x2be8
	.long	11349                           # 0x2c55
	.long	11428                           # 0x2ca4
	.long	11433                           # 0x2ca9
	.long	11460                           # 0x2cc4
	.long	11465                           # 0x2cc9
	.long	11472                           # 0x2cd0
	.long	11477                           # 0x2cd5
	.long	11496                           # 0x2ce8
	.long	11506                           # 0x2cf2
	.long	11508                           # 0x2cf4
	.long	11633                           # 0x2d71
	.long	11640                           # 0x2d78
	.long	11645                           # 0x2d7d
	.long	11648                           # 0x2d80
	.long	11717                           # 0x2dc5
	.long	11720                           # 0x2dc8
	.long	12373                           # 0x3055
	.long	12452                           # 0x30a4
	.long	12457                           # 0x30a9
	.long	12520                           # 0x30e8
	.long	12530                           # 0x30f2
	.long	12532                           # 0x30f4
	.long	12630                           # 0x3156
	.long	12636                           # 0x315c
	.long	12641                           # 0x3161
	.long	12652                           # 0x316c
	.long	13042                           # 0x32f2
	.long	13044                           # 0x32f4
	.long	13397                           # 0x3455
	.long	13550                           # 0x34ee
	.long	13556                           # 0x34f4
	.long	14562                           # 0x38e2
	.long	14572                           # 0x38ec
	.long	14626                           # 0x3922
	.long	14640                           # 0x3930
	.long	15074                           # 0x3ae2
	.long	15084                           # 0x3aec
	.long	15138                           # 0x3b22
	.long	15152                           # 0x3b30
	.long	15458                           # 0x3c62
	.long	15464                           # 0x3c68
	.long	15574                           # 0x3cd6
	.long	15576                           # 0x3cd8
	.long	15582                           # 0x3cde
	.long	15584                           # 0x3ce0
	.long	15590                           # 0x3ce6
	.long	15592                           # 0x3ce8
	.long	15814                           # 0x3dc6
	.long	15820                           # 0x3dcc
	.long	15826                           # 0x3dd2
	.long	15828                           # 0x3dd4
	.long	15850                           # 0x3dea
	.long	15864                           # 0x3df8
	.long	15874                           # 0x3e02
	.long	15876                           # 0x3e04
	.long	15882                           # 0x3e0a
	.long	15892                           # 0x3e14
	.long	15898                           # 0x3e1a
	.long	15904                           # 0x3e20
	.long	16154                           # 0x3f1a
	.long	16156                           # 0x3f1c
	.long	16606                           # 0x40de
	.long	16608                           # 0x40e0
	.long	16614                           # 0x40e6
	.long	16620                           # 0x40ec
	.long	16950                           # 0x4236
	.long	16952                           # 0x4238
	.long	19830                           # 0x4d76
	.long	19840                           # 0x4d80
	.long	23634                           # 0x5c52
	.long	23636                           # 0x5c54
	.long	24394                           # 0x5f4a
	.long	24396                           # 0x5f4c
	.long	24438                           # 0x5f76
	.long	24440                           # 0x5f78
	.long	25254                           # 0x62a6
	.long	25256                           # 0x62a8
	.long	25830                           # 0x64e6
	.long	25840                           # 0x64f0
	.long	26718                           # 0x685e
	.long	26724                           # 0x6864
	.long	27010                           # 0x6982
	.long	27012                           # 0x6984
	.long	27094                           # 0x69d6
	.long	27124                           # 0x69f4
	.long	27134                           # 0x69fe
	.long	27136                           # 0x6a00
	.long	27330                           # 0x6ac2
	.long	27384                           # 0x6af8
	.long	27390                           # 0x6afe
	.long	27452                           # 0x6b3c
	.long	27858                           # 0x6cd2
	.long	27860                           # 0x6cd4
	.long	28078                           # 0x6dae
	.long	28112                           # 0x6dd0
	.long	28334                           # 0x6eae
	.long	28336                           # 0x6eb0
	.long	28570                           # 0x6f9a
	.long	28572                           # 0x6f9c
	.long	28894                           # 0x70de
	.long	28896                           # 0x70e0
	.long	29506                           # 0x7342
	.long	29516                           # 0x734c
	.long	29522                           # 0x7352
	.long	29572                           # 0x7384
	.long	29578                           # 0x738a
	.long	29604                           # 0x73a4
	.long	29622                           # 0x73b6
	.long	29624                           # 0x73b8
	.long	29650                           # 0x73d2
	.long	29652                           # 0x73d4
	.long	29666                           # 0x73e2
	.long	29672                           # 0x73e8
	.long	30466                           # 0x7702
	.long	30720                           # 0x7800
	.long	32822                           # 0x8036
	.long	32824                           # 0x8038
	.long	33602                           # 0x8342
	.long	33652                           # 0x8374
	.long	33670                           # 0x8386
	.long	33672                           # 0x8388
	.long	33686                           # 0x8396
	.long	33732                           # 0x83c4
	.long	46014                           # 0xb3be
	.long	46024                           # 0xb3c8
	.long	46590                           # 0xb5fe
	.long	46592                           # 0xb600
	.long	46978                           # 0xb782
	.long	47104                           # 0xb800
	.long	49322                           # 0xc0aa
	.long	49344                           # 0xc0c0
	.long	49766                           # 0xc266
	.long	49772                           # 0xc26c
	.long	170430                          # 0x299be
	.long	170432                          # 0x299c0
	.long	170450                          # 0x299d2
	.long	170488                          # 0x299f8
	.long	170618                          # 0x29a7a
	.long	170624                          # 0x29a80
	.long	170946                          # 0x29bc2
	.long	170952                          # 0x29bc8
	.long	172210                          # 0x2a0b2
	.long	172212                          # 0x2a0b4
	.long	172930                          # 0x2a382
	.long	173000                          # 0x2a3c8
	.long	173230                          # 0x2a4ae
	.long	173240                          # 0x2a4b8
	.long	173774                          # 0x2a6ce
	.long	173776                          # 0x2a6d0
	.long	174786                          # 0x2aac2
	.long	174788                          # 0x2aac4
	.long	174794                          # 0x2aaca
	.long	174804                          # 0x2aad4
	.long	174814                          # 0x2aade
	.long	174820                          # 0x2aae4
	.long	174842                          # 0x2aafa
	.long	174848                          # 0x2ab00
	.long	174854                          # 0x2ab06
	.long	174856                          # 0x2ab08
	.long	175066                          # 0x2abda
	.long	175068                          # 0x2abdc
	.long	176054                          # 0x2afb6
	.long	176056                          # 0x2afb8
	.long	257146                          # 0x3ec7a
	.long	257148                          # 0x3ec7c
	.long	260226                          # 0x3f882
	.long	260288                          # 0x3f8c0
	.long	264182                          # 0x407f6
	.long	264184                          # 0x407f8
	.long	265090                          # 0x40b82
	.long	265092                          # 0x40b84
	.long	265690                          # 0x40dda
	.long	265708                          # 0x40dec
	.long	272438                          # 0x42836
	.long	272440                          # 0x42838
	.long	272446                          # 0x4283e
	.long	272448                          # 0x42840
	.long	272610                          # 0x428e2
	.long	272620                          # 0x428ec
	.long	272638                          # 0x428fe
	.long	272640                          # 0x42900
	.long	273302                          # 0x42b96
	.long	273308                          # 0x42b9c
	.long	275602                          # 0x43492
	.long	275616                          # 0x434a0
	.long	277166                          # 0x43aae
	.long	277172                          # 0x43ab4
	.long	277494                          # 0x43bf6
	.long	277504                          # 0x43c00
	.long	277786                          # 0x43d1a
	.long	277828                          # 0x43d44
	.long	278026                          # 0x43e0a
	.long	278040                          # 0x43e18
	.long	278978                          # 0x441c2
	.long	278980                          # 0x441c4
	.long	279038                          # 0x441fe
	.long	279040                          # 0x44200
	.long	279274                          # 0x442ea
	.long	279276                          # 0x442ec
	.long	279554                          # 0x44402
	.long	279564                          # 0x4440c
	.long	279758                          # 0x444ce
	.long	279764                          # 0x444d4
	.long	280014                          # 0x445ce
	.long	280016                          # 0x445d0
	.long	280362                          # 0x4472a
	.long	280364                          # 0x4472c
	.long	280794                          # 0x448da
	.long	280796                          # 0x448dc
	.long	281510                          # 0x44ba6
	.long	281516                          # 0x44bac
	.long	281838                          # 0x44cee
	.long	281844                          # 0x44cf4
	.long	282010                          # 0x44d9a
	.long	282036                          # 0x44db4
	.long	282050                          # 0x44dc2
	.long	282068                          # 0x44dd4
	.long	282906                          # 0x4511a
	.long	282908                          # 0x4511c
	.long	283002                          # 0x4517a
	.long	283004                          # 0x4517c
	.long	283406                          # 0x4530e
	.long	283408                          # 0x45310
	.long	284418                          # 0x45702
	.long	284420                          # 0x45704
	.long	285406                          # 0x45ade
	.long	285408                          # 0x45ae0
	.long	285870                          # 0x45cae
	.long	285872                          # 0x45cb0
	.long	286954                          # 0x460ea
	.long	286956                          # 0x460ec
	.long	287994                          # 0x464fa
	.long	287996                          # 0x464fc
	.long	288014                          # 0x4650e
	.long	288016                          # 0x46510
	.long	288978                          # 0x468d2
	.long	288980                          # 0x468d4
	.long	289054                          # 0x4691e
	.long	289056                          # 0x46920
	.long	289382                          # 0x46a66
	.long	289384                          # 0x46a68
	.long	292106                          # 0x4750a
	.long	292108                          # 0x4750c
	.long	292114                          # 0x47512
	.long	292120                          # 0x47518
	.long	292446                          # 0x4765e
	.long	292448                          # 0x47660
	.long	294154                          # 0x47d0a
	.long	294156                          # 0x47d0c
	.long	371650                          # 0x5abc2
	.long	371668                          # 0x5abd4
	.long	371906                          # 0x5acc2
	.long	371932                          # 0x5acdc
	.long	455290                          # 0x6f27a
	.long	455292                          # 0x6f27c
	.long	476566                          # 0x74596
	.long	476568                          # 0x74598
	.long	476574                          # 0x7459e
	.long	476584                          # 0x745a8
	.long	476602                          # 0x745ba
	.long	476620                          # 0x745cc
	.long	476654                          # 0x745ee
	.long	476684                          # 0x7460c
	.long	476694                          # 0x74616
	.long	476720                          # 0x74630
	.long	476842                          # 0x746aa
	.long	476856                          # 0x746b8
	.long	477450                          # 0x7490a
	.long	477460                          # 0x74914
	.long	491522                          # 0x78002
	.long	491548                          # 0x7801c
	.long	491554                          # 0x78022
	.long	491620                          # 0x78064
	.long	491630                          # 0x7806e
	.long	491656                          # 0x78088
	.long	491662                          # 0x7808e
	.long	491668                          # 0x78094
	.long	491674                          # 0x7809a
	.long	491692                          # 0x780ac
	.long	492094                          # 0x7823e
	.long	492096                          # 0x78240
	.long	492738                          # 0x784c2
	.long	492764                          # 0x784dc
	.long	494266                          # 0x78aba
	.long	494268                          # 0x78abc
	.long	494514                          # 0x78bb2
	.long	494528                          # 0x78bc0
	.long	496562                          # 0x793b2
	.long	496576                          # 0x793c0
	.long	500546                          # 0x7a342
	.long	500572                          # 0x7a35c
	.long	501010                          # 0x7a512
	.long	501036                          # 0x7a52c
	.size	_ZNSt9__unicode9__v15_1_012__incb_edgesE, 1556

	.type	.L__const._ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_.__digits,@object # @__const._ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_.__digits
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0
.L__const._ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_.__digits:
	.ascii	"0123456789abcdef"
	.size	.L__const._ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_.__digits, 16

	.type	.L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits,@object # @__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits
	.section	.rodata.str1.16,"aMS",@progbits,1
	.p2align	4, 0x0
.L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits:
	.asciz	"00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899"
	.size	.L__const._ZNSt8__detail18__to_chars_10_implIoEEvPcjT_.__digits, 201

	.type	.L.str.34,@object               # @.str.34
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.34:
	.asciz	"format error: unmatched '}' in format string"
	.size	.L.str.34, 45

	.section	".linker-options","e",@llvm_linker_options
	.hidden	DW.ref.__gxx_personality_v0
	.weak	DW.ref.__gxx_personality_v0
	.section	.data.DW.ref.__gxx_personality_v0,"awG",@progbits,DW.ref.__gxx_personality_v0,comdat
	.p2align	3, 0x0
	.type	DW.ref.__gxx_personality_v0,@object
	.size	DW.ref.__gxx_personality_v0, 8
DW.ref.__gxx_personality_v0:
	.quad	__gxx_personality_v0
	.ident	"clang version 18.1.8"
	.section	".note.GNU-stack","",@progbits
	.addrsig
	.addrsig_sym __gxx_personality_v0
	.addrsig_sym _Unwind_Resume
	.addrsig_sym __stack_chk_fail
	.addrsig_sym _ZZ8generatemE4rdev
	.addrsig_sym _ZGVZ8generatemE4rdev
	.addrsig_sym __dso_handle
	.addrsig_sym _ZTVN10__cxxabiv120__si_class_type_infoE
	.addrsig_sym _ZTSNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
	.addrsig_sym _ZTSNSt8__format9_Buf_sinkIcEE
	.addrsig_sym _ZTVN10__cxxabiv117__class_type_infoE
	.addrsig_sym _ZTSNSt8__format5_SinkIcEE
	.addrsig_sym _ZTINSt8__format5_SinkIcEE
	.addrsig_sym _ZTINSt8__format9_Buf_sinkIcEE
	.addrsig_sym _ZTINSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
	.addrsig_sym _ZTSNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE
	.addrsig_sym _ZTINSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEEE
	.addrsig_sym _ZTSNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE
	.addrsig_sym _ZTSNSt8__format8_ScannerIcEE
	.addrsig_sym _ZTINSt8__format8_ScannerIcEE
	.addrsig_sym _ZTINSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEE
	.addrsig_sym _ZTSSt12format_error
	.addrsig_sym _ZTISt13runtime_error
	.addrsig_sym _ZTISt12format_error
	.addrsig_sym _ZNSt7__cxx118numpunctIcE2idE
	.addrsig_sym _ZNSt9__unicode9__v15_1_013__width_edgesE
	.addrsig_sym _ZNSt9__unicode9__v15_1_014__xpicto_edgesE
